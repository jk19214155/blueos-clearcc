     1 00000000                                 ; haribote-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [INSTRSET "i486p"]
     5 00000000                                 
     6  = 00000118                              VBEMODE	EQU		0x0118			; 1024 x  768 x 8bitカラー
     7 00000000                                 ; （画面モード一覧）
     8 00000000                                 ;	0x100 :  640 x  400 x 8bitカラー
     9 00000000                                 ;	0x101 :  640 x  480 x 8bitカラー
    10 00000000                                 ;	0x103 :  800 x  600 x 8bitカラー
    11 00000000                                 ;	0x105 : 1024 x  768 x 8bitカラー
    12 00000000                                 ;	0x107 : 1280 x 1024 x 8bitカラー
    13 00000000                                 
    14  = 00280000                              BOTPAK	EQU		0x00280000		; bootpackのロード先
    15  = 00100000                              DSKCAC	EQU		0x00100000		; ディスクキャッシュの場所
    16  = 00008000                              DSKCAC0	EQU		0x00008000		; ディスクキャッシュの場所（リアルモード）
    17 00000000                                 
    18 00000000                                 ; BOOT_INFO関係
    19  = 00000FF0                              CYLS	EQU		0x0ff0			; ブートセクタが設定する
    20  = 00000FF1                              LEDS	EQU		0x0ff1
    21  = 00000FF2                              VMODE	EQU		0x0ff2			; 色数に関する情報。何ビットカラーか？
    22  = 00000FF4                              SCRNX	EQU		0x0ff4			; 解像度のX
    23  = 00000FF6                              SCRNY	EQU		0x0ff6			; 解像度のY
    24  = 00000FF8                              VRAM	EQU		0x0ff8			; グラフィックバッファの開始番地
    25                                          		ORG		0xc200			; このプログラムがどこに読み込まれるのか
    26 0000C200                                 		
    27 0000C200                                 _cpu_init_setup:
    28 0000C200 EB 18                           		jmp start
    29 0000C202                                 _gdtr2: ;0xc202
    30 0000C202 00000000 00000000               	RESD 2
    31 0000C20A                                 _idtr2: ;0xc20a
    32 0000C20A 00000000 00000000               	resd 2
    33 0000C212                                 _resd_cpu_num: ;0xc212
    34 0000C212 00000000                        	resd 1
    35 0000C216                                 _cpu_list: ;0xc216
    36 0000C216 00000000                        	resd 1
    37 0000C21A                                 start:
    38 0000C21A                                 ;首先查看是否是bsp，然后决定下面的操作
    39 0000C21A 66 B9 0000001B                  		mov ecx,0x1b
    40 0000C220 0F 32                           		db 0x0f,0x32;rdmsr
    41 0000C222 66 A9 00000100                  		test eax,1<<8
    42 0000C228 75 3A                           		jnz start_bsp
    43 0000C22A FA                              		cli
    44 0000C22B 66 FF 06 8016                   		inc dword[0x8016] ;增加处理器队列
    45 0000C230 EB 04                           		jmp start_ap
    46 0000C232                                 ap_lock:
    47 0000C232 00000000                        		resd 1
    48 0000C236                                 start_ap:
    49 0000C236 90                              		nop
    50 0000C237 90                              		nop
    51 0000C238 66 0F BA 2E C232 00             		bts dword[ap_lock],0
    52 0000C23F 73 F5                           		jnc start_ap
    53 0000C241 0F 01 16 C202                   		lgdt [_gdtr2]
    54 0000C246 0F 01 1E C20A                   		lidt [_idtr2]
    55 0000C24B                                 		
    56 0000C24B 66 FF 06 8012                   		inc dword[0x8012]
    57 0000C250 66 0F BA 3E C232 00             		btc dword[ap_lock],0
    58 0000C257 EB 00                           		jmp ap_loop
    59 0000C259                                 ap_loop:
    60 0000C259 F4                              		hlt
    61 0000C25A EB FD                           		jmp ap_loop
    62 0000C25C 66 EA 0000001B 0010             		jmp dword 2*8:0x0000001b
    63 0000C264                                 start_bsp:
    64 0000C264 66 C7 06 C232 00000000          		mov dword[ap_lock],0
    65 0000C26D 66 C7 06 C212 00000000          		mov dword[_resd_cpu_num],0
    66 0000C276                                 		
    67 0000C276 0F 20 E0                        		mov eax,cr4
    68 0000C279 66 83 C8 10                     		or eax,16
    69 0000C27D 0F 22 E0                        		mov cr4,eax
    70 0000C280                                 ; VBE存在確認
    71 0000C280 B8 9000                         		MOV		AX,0x9000
    72 0000C283 8E C0                           		MOV		ES,AX
    73 0000C285 BF 0000                         		MOV		DI,0
    74 0000C288 B8 4F00                         		MOV		AX,0x4f00
    75 0000C28B CD 10                           		INT		0x10
    76 0000C28D 3D 004F                         		CMP		AX,0x004f
    77 0000C290 75 37                           		JNE		scrn320
    78 0000C292                                 
    79 0000C292                                 ; VBEのバージョンチェック
    80 0000C292                                 
    81 0000C292 26 8B 45 04                     		MOV		AX,[ES:DI+4]
    82 0000C296 3D 0200                         		CMP		AX,0x0200
    83 0000C299 72 2E                           		JB		scrn320			; if (AX < 0x0200) goto scrn320
    84 0000C29B                                 
    85 0000C29B                                 ; 画面モード情報を得る
    86 0000C29B                                 
    87 0000C29B B9 0118                         		MOV		CX,VBEMODE
    88 0000C29E B8 4F01                         		MOV		AX,0x4f01
    89 0000C2A1 CD 10                           		INT		0x10
    90 0000C2A3                                 ;		CMP		AX,0x004f
    91 0000C2A3                                 ;		JNE		scrn320
    92 0000C2A3                                 
    93 0000C2A3                                 ; 画面モード情報の確認
    94 0000C2A3                                 
    95 0000C2A3                                 ;		CMP		BYTE [ES:DI+0x19],8
    96 0000C2A3                                 ;		JNE		scrn320
    97 0000C2A3                                 ;		CMP		BYTE [ES:DI+0x1b],4
    98 0000C2A3                                 ;		JNE		scrn320
    99 0000C2A3                                 ;		MOV		AX,[ES:DI+0x00]
   100 0000C2A3                                 ;		AND		AX,0x0080
   101 0000C2A3                                 ;		JZ		scrn320			; モード属性のbit7が0だったのであきらめる
   102 0000C2A3                                 
   103 0000C2A3                                 ; 画面モードの切り替え
   104 0000C2A3                                 
   105 0000C2A3 BB 4118                         		MOV		BX,VBEMODE+0x4000
   106 0000C2A6 B8 4F02                         		MOV		AX,0x4f02
   107 0000C2A9 CD 10                           		INT		0x10
   108 0000C2AB C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	; 画面モードをメモする（C言語が参照する）
   109 0000C2B0 26 8B 45 12                     		MOV		AX,[ES:DI+0x12]
   110 0000C2B4 A3 0FF4                         		MOV		[SCRNX],AX
   111 0000C2B7 26 8B 45 14                     		MOV		AX,[ES:DI+0x14]
   112 0000C2BB A3 0FF6                         		MOV		[SCRNY],AX
   113 0000C2BE 66 26 8B 45 28                  		MOV		EAX,[ES:DI+0x28]
   114 0000C2C3 66 A3 0FF8                      		MOV		[VRAM],EAX
   115 0000C2C7 EB 20                           		JMP		keystatus
   116 0000C2C9                                 
   117 0000C2C9                                 scrn320:
   118 0000C2C9 B0 13                           		MOV		AL,0x13			; VGAグラフィックス、320x200x8bitカラー
   119 0000C2CB B4 00                           		MOV		AH,0x00
   120 0000C2CD CD 10                           		INT		0x10
   121 0000C2CF C6 06 0FF2 08                   		MOV		BYTE [VMODE],8	; 画面モードをメモする（C言語が参照する）
   122 0000C2D4 C7 06 0FF4 0140                 		MOV		WORD [SCRNX],320
   123 0000C2DA C7 06 0FF6 00C8                 		MOV		WORD [SCRNY],200
   124 0000C2E0 66 C7 06 0FF8 000A0000          		MOV		DWORD [VRAM],0x000a0000
   125 0000C2E9                                 
   126 0000C2E9                                 ; 通过bios获取led灯的状态
   127 0000C2E9                                 
   128 0000C2E9                                 keystatus:
   129 0000C2E9 B4 02                           		MOV		AH,0x02
   130 0000C2EB CD 16                           		INT		0x16 			; keyboard BIOS
   131 0000C2ED A2 0FF1                         		MOV		[LEDS],AL
   132 0000C2F0                                 
   133 0000C2F0                                 ; PICが一切の割り込みを受け付けないようにする
   134 0000C2F0                                 ;	AT互換機の仕様では、PICの初期化をするなら、
   135 0000C2F0                                 ;	こいつをCLI前にやっておかないと、たまにハングアップする
   136 0000C2F0                                 ;	PICの初期化はあとでやる
   137 0000C2F0                                 ; 禁用pic中断
   138 0000C2F0 B0 FF                           		MOV		AL,0xff
   139 0000C2F2 E6 21                           		OUT		0x21,AL
   140 0000C2F4 90                              		NOP						; OUT命令を連続させるとうまくいかない機種があるらしいので
   141 0000C2F5 E6 A1                           		OUT		0xa1,AL
   142 0000C2F7                                 
   143 0000C2F7 FA                              		CLI						; さらにCPUレベルでも割り込み禁止
   144 0000C2F8                                 
   145 0000C2F8                                 ; CPUから1MB以上のメモリにアクセスできるように、A20GATEを設定
   146 0000C2F8                                 
   147 0000C2F8 E8 0111                         		CALL	waitkbdout
   148 0000C2FB B0 D1                           		MOV		AL,0xd1
   149 0000C2FD E6 64                           		OUT		0x64,AL
   150 0000C2FF E8 010A                         		CALL	waitkbdout
   151 0000C302 B0 DF                           		MOV		AL,0xdf			; enable A20
   152 0000C304 E6 60                           		OUT		0x60,AL
   153 0000C306 E8 0103                         		CALL	waitkbdout
   154 0000C309                                 		
   155 0000C309                                 memtest:
   156 0000C309                                 ; 获取内存分布情况
   157 0000C309 31 C0                           		xor ax,ax
   158 0000C30B 8E C0                           		mov es,ax
   159 0000C30D 8E D8                           		mov ds,ax
   160 0000C30F 66 BB 00000000                  		mov ebx,0;第一次调用
   161 0000C315 66 BA 534D4150                  		mov edx,0x534d4150;;SMAP签名
   162 0000C31B BF 7000                         		mov di,0x7000
   163 0000C31E                                 .start:
   164 0000C31E 66 B9 00000014                  		mov ecx,20;使用20字节保存返回的信息
   165 0000C324 66 B8 0000E820                  		mov eax,0xe820;0xe820内存探测
   166 0000C32A 66 89 5D 14                     		mov dword[di+20],ebx;保存序列号
   167 0000C32E CD 15                           		int 0x15
   168 0000C330 83 C7 20                        		add di,32;区域宽度32
   169 0000C333 72 07                           		jc .fin
   170 0000C335 66 21 DB                        		and ebx,ebx
   171 0000C338 74 02                           		jz .fin
   172 0000C33A EB E2                           		jmp .start
   173 0000C33C                                 .fin:
   174 0000C33C                                 ; プロテクトモード移行
   175 0000C33C                                 
   176 0000C33C 0F 01 16 C44A                   		LGDT	[GDTR0]			; 暫定GDTを設定
   177 0000C341 0F 20 C0                        		MOV		EAX,CR0
   178 0000C344 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; bit31を0にする（ページング禁止のため）
   179 0000C34A 66 83 C8 01                     		OR		EAX,0x00000001	; bit0を1にする（プロテクトモード移行のため）
   180 0000C34E 0F 22 C0                        		MOV		CR0,EAX
   181 0000C351 EB 00                           		JMP		pipelineflush
   182 0000C353                                 pipelineflush:
   183 0000C353 B8 0008                         		MOV		AX,1*8			;  読み書き可能セグメント32bit
   184 0000C356 8E D8                           		MOV		DS,AX
   185 0000C358 8E C0                           		MOV		ES,AX
   186 0000C35A 8E E0                           		MOV		FS,AX
   187 0000C35C 8E E8                           		MOV		GS,AX
   188 0000C35E 8E D0                           		MOV		SS,AX
   189 0000C360                                 ;内存分布图的传送
   190 0000C360 FC                              		cld
   191 0000C361 66 BE 00007000                  		mov esi,0x7000
   192 0000C367 66 BF 0026A000                  		mov edi,0x0026a000
   193 0000C36D 66 B9 00001000                  		mov ecx,4096;假定内存分布传送区域不大于4k
   194 0000C373                                 		;rep movsb
   195 0000C373 E8 009F                         		call memcpy;
   196 0000C376                                 		;db 0x66,0xf3,0xa4
   197 0000C376                                 ; bootpackの転送
   198 0000C376                                 
   199 0000C376 66 BE 0000C450                  		MOV		ESI,bootpack	; 転送元
   200 0000C37C 66 BF 00280000                  		MOV		EDI,BOTPAK		; 転送先
   201 0000C382 66 B9 00020000                  		MOV		ECX,512*1024/4
   202 0000C388 E8 008A                         		CALL	memcpy
   203 0000C38B                                 
   204 0000C38B                                 ; ついでにディスクデータも本来の位置へ転送
   205 0000C38B                                 
   206 0000C38B                                 ; まずはブートセクタから
   207 0000C38B                                 
   208 0000C38B 66 BE 00007C00                  		MOV		ESI,0x7c00		; 転送元
   209 0000C391 66 BF 00100000                  		MOV		EDI,DSKCAC		; 転送先
   210 0000C397 66 B9 00000080                  		MOV		ECX,512/4
   211 0000C39D E8 0075                         		CALL	memcpy
   212 0000C3A0                                 
   213 0000C3A0                                 ; 残り全部
   214 0000C3A0                                 
   215 0000C3A0 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 転送元
   216 0000C3A6 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 転送先
   217 0000C3AC 66 B9 00000000                  		MOV		ECX,0
   218 0000C3B2 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
   219 0000C3B6 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; シリンダ数からバイト数/4に変換
   220 0000C3BD 66 81 E9 00000080               		SUB		ECX,512/4		; IPLの分だけ差し引く
   221 0000C3C4 E8 004E                         		CALL	memcpy
   222 0000C3C7                                 
   223 0000C3C7                                 ; asmheadでしなければいけないことは全部し終わったので、
   224 0000C3C7                                 ;	あとはbootpackに任せる
   225 0000C3C7                                 
   226 0000C3C7                                 ; bootpackの起動
   227 0000C3C7                                 
   228 0000C3C7 66 BB 00280000                  		MOV		EBX,BOTPAK
   229 0000C3CD 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
   230 0000C3D2 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
   231 0000C3D6 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
   232 0000C3DA 74 10                           		JZ		skip			; 転送するべきものがない
   233 0000C3DC 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 転送元
   234 0000C3E1 66 01 DE                        		ADD		ESI,EBX
   235 0000C3E4 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 転送先
   236 0000C3E9 E8 0029                         		CALL	memcpy
   237 0000C3EC                                 skip:
   238 0000C3EC 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; スタック初期値
   239 0000C3F1 6A 00                           		push  0			;传入参数
   240 0000C3F3 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
   241 0000C3FB                                 reboot:
   242 0000C3FB 66 B8 000000FE                  		mov eax,0xfe
   243 0000C401 66 BA 00000060                  		mov edx,0x60
   244 0000C407 EF                              		out dx,ax
   245 0000C408                                 .fin:
   246 0000C408 FA                              		cli
   247 0000C409 F4                              		hlt
   248 0000C40A EB FC                           		jmp .fin
   249 0000C40C                                 waitkbdout:
   250 0000C40C E4 64                           		IN		 AL,0x64
   251 0000C40E 24 02                           		AND		 AL,0x02
   252 0000C410 E4 60                           		IN		 AL,0x60 		; から読み(受信バッファが悪さをしないように)
   253 0000C412 75 F8                           		JNZ		waitkbdout		; ANDの結果が0でなければwaitkbdoutへ
   254 0000C414 C3                              		RET
   255 0000C415                                 
   256 0000C415                                 memcpy:
   257 0000C415 67 66 8B 06                     		MOV		EAX,[ESI]
   258 0000C419 66 83 C6 04                     		ADD		ESI,4
   259 0000C41D 67 66 89 07                     		MOV		[EDI],EAX
   260 0000C421 66 83 C7 04                     		ADD		EDI,4
   261 0000C425 66 83 E9 01                     		SUB		ECX,1
   262 0000C429 75 EA                           		JNZ		memcpy			; 引き算した結果が0でなければmemcpyへ
   263 0000C42B C3                              		RET
   264 0000C42C                                 ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
   265 0000C42C                                 
   266 0000C42C 00 00 00 00                     		ALIGNB	16
   267 0000C430                                 GDT0:
   268 0000C430 00 00 00 00 00 00 00 00         		RESB	8				; ヌルセレクタ
   269 0000C438 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; 読み書き可能セグメント32bit
   270 0000C440 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 実行可能セグメント32bit（bootpack用）
   271 0000C448 0000                            		DW		0
   272 0000C44A                                 GDTR0:
   273 0000C44A 0017                            		DW		8*3-1
   274 0000C44C 0000C430                        		DD		GDT0
   275 0000C450                                 		ALIGNB	16
   276 0000C450                                 bootpack:
