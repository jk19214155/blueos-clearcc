	.file	"mtask.c"
	.text
	.balign 2
.globl _task_now
	.def	_task_now;	.scl	2;	.type	32;	.endef
_task_now:
	movl	_taskctl, %eax
	pushl	%ebp
	movl	%esp, %ebp
	popl	%ebp
	movl	(%eax), %edx
	imull	$408, %edx, %edx
	leal	8(%edx,%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax,%edx,4), %eax
	ret
	.balign 2
.globl _add_child_task
	.def	_add_child_task;	.scl	2;	.type	32;	.endef
_add_child_task:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	12(%ebp), %ecx
	movl	248(%ebx), %eax
	testl	%eax, %eax
	jne	L3
	movl	%ecx, 248(%ebx)
	movl	%ecx, 244(%ecx)
L12:
	movl	%ebx, 252(%ecx)
	popl	%ebx
	popl	%ebp
	ret
L3:
	movl	%eax, %edx
	cmpl	%eax, 244(%eax)
	je	L11
L9:
	movl	244(%edx), %edx
	cmpl	%eax, 244(%edx)
	jne	L9
L11:
	movl	244(%edx), %eax
	movl	%eax, 244(%ecx)
	movl	%ecx, 244(%edx)
	jmp	L12
	.balign 2
.globl _find_child_task
	.def	_find_child_task;	.scl	2;	.type	32;	.endef
_find_child_task:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	xorl	%ebx, %ebx
	movl	8(%ebp), %eax
	movl	248(%eax), %eax
	testl	%eax, %eax
	je	L13
L23:
	movl	%eax, %edx
	movl	%eax, %ecx
L16:
	movl	248(%edx), %eax
	testl	%eax, %eax
	jne	L23
	movl	244(%edx), %eax
	movl	%edx, %ebx
	cmpl	%ecx, %eax
	movl	%eax, %edx
	jne	L16
L13:
	movl	%ebx, %eax
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _unlink_task
	.def	_unlink_task;	.scl	2;	.type	32;	.endef
_unlink_task:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %eax
	cmpl	$0, 248(%eax)
	jne	L24
	movl	%eax, %edx
	cmpl	%eax, 244(%eax)
	je	L35
L31:
	movl	244(%edx), %edx
	cmpl	%eax, 244(%edx)
	jne	L31
L35:
	cmpl	%eax, %edx
	je	L37
	movl	244(%eax), %eax
	movl	%eax, 244(%edx)
L36:
	xorl	%eax, %eax
L24:
	popl	%ebp
	ret
L37:
	movl	252(%edx), %edx
	movl	$0, 248(%edx)
	jmp	L36
	.balign 2
.globl _task_add
	.def	_task_add;	.scl	2;	.type	32;	.endef
_task_add:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %ecx
	movl	8(%ecx), %edx
	imull	$408, %edx, %edx
	addl	_taskctl, %edx
	movl	8(%edx), %eax
	movl	%ecx, 16(%edx,%eax,4)
	incl	%eax
	movl	%eax, 8(%edx)
	movl	$2, 4(%ecx)
	popl	%ebp
	ret
	.balign 2
.globl _task_remove
	.def	_task_remove;	.scl	2;	.type	32;	.endef
_task_remove:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	movl	8(%ebp), %edi
	pushl	%ebx
	movl	8(%edi), %eax
	imull	$408, %eax, %eax
	addl	_taskctl, %eax
	leal	8(%eax), %esi
L40:
	pushl	%edi
	call	_find_child_task
	popl	%ecx
	movl	%eax, %ebx
	testl	%eax, %eax
	je	L46
	pushl	%eax
	call	_task_remove
	pushl	%ebx
	call	_unlink_task
	popl	%eax
	popl	%edx
	jmp	L40
L46:
	xorl	%edx, %edx
	movl	(%esi), %eax
	cmpl	%eax, %edx
	jge	L48
L52:
	cmpl	%edi, 8(%esi,%edx,4)
	je	L48
	incl	%edx
	cmpl	%eax, %edx
	jl	L52
L48:
	decl	%eax
	movl	%eax, (%esi)
	movl	4(%esi), %eax
	cmpl	%eax, %edx
	jge	L53
	decl	%eax
	movl	%eax, 4(%esi)
L53:
	movl	(%esi), %eax
	cmpl	%eax, 4(%esi)
	jl	L54
	movl	$0, 4(%esi)
L54:
	movl	$1, 4(%edi)
	movl	(%esi), %ecx
	cmpl	%ecx, %edx
	jge	L62
L59:
	movl	12(%esi,%edx,4), %eax
	movl	%eax, 8(%esi,%edx,4)
	incl	%edx
	cmpl	%ecx, %edx
	jl	L59
L62:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _task_switchsub
	.def	_task_switchsub;	.scl	2;	.type	32;	.endef
_task_switchsub:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	movl	_taskctl, %eax
	xorl	%edx, %edx
L69:
	cmpl	$0, 8(%eax,%edx)
	jg	L65
	incl	%ecx
	addl	$408, %edx
	cmpl	$9, %ecx
	jle	L69
L65:
	movl	%ecx, (%eax)
	movb	$0, 4(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _task_idle
	.def	_task_idle;	.scl	2;	.type	32;	.endef
_task_idle:
	pushl	%ebp
	movl	%esp, %ebp
L72:
	call	_io_hlt
	jmp	L72
	.balign 2
.globl _task_init
	.def	_task_init;	.scl	2;	.type	32;	.endef
_task_init:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	xorl	%esi, %esi
	pushl	%ebx
	movl	$999, %ebx
	movl	2551808, %eax
	pushl	$280088
	pushl	8(%ebp)
	movl	%eax, -16(%ebp)
	call	_memman_alloc_4k
	pushl	$0
	movl	%eax, _taskctl
	pushl	$69
	pushl	$7
	pushl	%eax
	pushl	$2523136
	pushl	-16(%ebp)
	call	_memmam_link_page_32_m
	addl	$32, %esp
L80:
	movl	%edi, %edx
	leal	24(%esi), %eax
	addl	_taskctl, %edx
	movl	%eax, 4088(%edx)
	leal	8024(%esi), %eax
	movl	%eax, 4228(%edx)
	leal	2555928(%esi), %eax
	movl	$0, 4092(%edx)
	pushl	$137
	addl	$4132, %edx
	pushl	%edx
	pushl	$103
	pushl	%eax
	call	_set_segmdesc
	movl	_taskctl, %eax
	addl	%edi, %eax
	pushl	$130
	addl	$4236, %eax
	addl	$276, %edi
	pushl	%eax
	leal	2563928(%esi), %eax
	pushl	$31
	addl	$8, %esi
	pushl	%eax
	call	_set_segmdesc
	addl	$32, %esp
	decl	%ebx
	jns	L80
	movl	_taskctl, %ecx
	xorl	%edx, %edx
	movl	$9, %ebx
L85:
	leal	(%ecx,%edx), %eax
	addl	$408, %edx
	decl	%ebx
	movl	$0, 8(%eax)
	movl	$0, 12(%eax)
	jns	L85
	call	_task_alloc
	movl	%eax, %esi
	movl	$2523136, 72(%eax)
	movl	8(%ebp), %eax
	movl	%eax, 260(%esi)
	movl	$2, 4(%esi)
	movl	$2, 12(%esi)
	movl	$0, 8(%esi)
	pushl	%esi
	call	_task_add
	call	_task_switchsub
	pushl	(%esi)
	call	_load_tr
	call	_timer_alloc
	pushl	12(%esi)
	pushl	%eax
	movl	%eax, _task_timer
	call	_timer_settime
	call	_task_alloc
	pushl	$65536
	pushl	8(%ebp)
	movl	%eax, %ebx
	call	_memman_alloc_4k
	addl	$65536, %eax
	movl	%eax, 100(%ebx)
	pushl	$0
	pushl	$16
	pushl	$7
	movl	100(%ebx), %eax
	subl	$65536, %eax
	pushl	%eax
	pushl	$2523136
	pushl	-16(%ebp)
	call	_memmam_link_page_32_m
	addl	$48, %esp
	movl	$_task_idle, 76(%ebx)
	movl	$8, 116(%ebx)
	movl	$16, 120(%ebx)
	movl	$8, 124(%ebx)
	movl	$8, 128(%ebx)
	movl	$8, 132(%ebx)
	movl	$8, 136(%ebx)
	movl	$2523136, 72(%ebx)
	movl	$0, 252(%ebx)
	movl	$0, 248(%ebx)
	movl	%ebx, 244(%ebx)
	pushl	$1
	pushl	$9
	pushl	%ebx
	call	_task_run
	leal	-12(%ebp), %esp
	popl	%ebx
	movl	%esi, %eax
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _task_alloc
	.def	_task_alloc;	.scl	2;	.type	32;	.endef
_task_alloc:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	xorl	%edx, %edx
L96:
	movl	%edx, %eax
	addl	_taskctl, %eax
	cmpl	$0, 4092(%eax)
	je	L99
	incl	%ecx
	addl	$276, %edx
	cmpl	$999, %ecx
	jle	L96
	xorl	%eax, %eax
L90:
	popl	%ebp
	ret
L99:
	addl	$4088, %eax
	movl	$1, 4(%eax)
	movl	$514, 80(%eax)
	movl	$0, 84(%eax)
	movl	$0, 88(%eax)
	movl	$0, 92(%eax)
	movl	$0, 96(%eax)
	movl	$0, 104(%eax)
	movl	$0, 108(%eax)
	movl	$0, 112(%eax)
	movl	$0, 116(%eax)
	movl	$0, 128(%eax)
	movl	$0, 132(%eax)
	movl	$0, 136(%eax)
	movl	$1073741824, 144(%eax)
	movl	$0, 52(%eax)
	movl	$0, 72(%eax)
	movl	$0, 252(%eax)
	movl	$0, 248(%eax)
	movl	%eax, 244(%eax)
	movl	$0, 256(%eax)
	movl	$0, 264(%eax)
	movl	$0, 268(%eax)
	movl	$0, 272(%eax)
	jmp	L90
	.balign 2
.globl _task_run
	.def	_task_run;	.scl	2;	.type	32;	.endef
_task_run:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	16(%ebp), %eax
	movl	8(%ebp), %ebx
	testl	%esi, %esi
	js	L105
L101:
	testl	%eax, %eax
	jle	L102
	movl	%eax, 12(%ebx)
L102:
	cmpl	$2, 4(%ebx)
	je	L106
L103:
	cmpl	$2, 4(%ebx)
	je	L104
	movl	%esi, 8(%ebx)
	pushl	%ebx
	call	_task_add
	popl	%esi
L104:
	movl	_taskctl, %eax
	movb	$1, 4(%eax)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L106:
	cmpl	%esi, 8(%ebx)
	je	L103
	pushl	%ebx
	call	_task_remove
	popl	%eax
	jmp	L103
L105:
	movl	8(%ebx), %esi
	jmp	L101
	.balign 2
.globl _task_sleep
	.def	_task_sleep;	.scl	2;	.type	32;	.endef
_task_sleep:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %esi
	cmpl	$2, 4(%esi)
	je	L110
L107:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L110:
	call	_task_now
	pushl	%esi
	movl	%eax, %ebx
	call	_task_remove
	popl	%ecx
	cmpl	%ebx, %esi
	jne	L107
	call	_task_switchsub
	call	_task_now
	pushl	(%eax)
	pushl	$0
	call	_farjmp
	popl	%eax
	popl	%edx
	jmp	L107
	.balign 2
.globl _task_switch
	.def	_task_switch;	.scl	2;	.type	32;	.endef
_task_switch:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	_taskctl, %ebx
	movl	(%ebx), %edx
	imull	$408, %edx, %edx
	leal	(%edx,%ebx), %edx
	leal	8(%edx), %ecx
	movl	4(%ecx), %eax
	movl	8(%ecx,%eax,4), %esi
	incl	%eax
	movl	%eax, 4(%ecx)
	cmpl	8(%edx), %eax
	je	L115
L112:
	cmpb	$0, 4(%ebx)
	jne	L116
L113:
	movl	4(%ecx), %eax
	movl	8(%ecx,%eax,4), %ebx
	pushl	12(%ebx)
	pushl	_task_timer
	call	_timer_settime
	cmpl	%esi, %ebx
	popl	%eax
	popl	%edx
	je	L111
	pushl	(%ebx)
	pushl	$0
	call	_farjmp
	popl	%ebx
	popl	%esi
L111:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L116:
	call	_task_switchsub
	movl	_taskctl, %edx
	movl	(%edx), %eax
	imull	$408, %eax, %eax
	leal	8(%eax,%edx), %ecx
	jmp	L113
L115:
	movl	$0, 4(%ecx)
	jmp	L112
	.balign 2
.globl _task_lanch
	.def	_task_lanch;	.scl	2;	.type	32;	.endef
_task_lanch:
	pushl	%ebp
	movl	%esp, %ebp
	popl	%ebp
	ret
	.balign 2
.globl _task_get_index
	.def	_task_get_index;	.scl	2;	.type	32;	.endef
_task_get_index:
	pushl	%ebp
	movl	%esp, %ebp
	popl	%ebp
	ret
.globl _taskctl
	.data
	.balign 4
_taskctl:
	.space 4
.globl _task_timer
	.data
	.balign 4
_task_timer:
	.space 4
	.def	_farjmp;	.scl	2;	.type	32;	.endef
	.def	_task_run;	.scl	2;	.type	32;	.endef
	.def	_timer_settime;	.scl	2;	.type	32;	.endef
	.def	_timer_alloc;	.scl	2;	.type	32;	.endef
	.def	_load_tr;	.scl	2;	.type	32;	.endef
	.def	_task_alloc;	.scl	2;	.type	32;	.endef
	.def	_set_segmdesc;	.scl	2;	.type	32;	.endef
	.def	_memmam_link_page_32_m;	.scl	2;	.type	32;	.endef
	.def	_memman_alloc_4k;	.scl	2;	.type	32;	.endef
	.def	_io_hlt;	.scl	2;	.type	32;	.endef
