     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Éï„Ç°„Ç§„É´„Çí‰Ωú„Çã„É¢„Éº„ÉÅE
     5 00000000                                 [INSTRSET "i486p"]				; 486„ÅÆÂëΩ‰ª§„Åæ„Åß‰Ωø„ÅÅEÅü„ÅÅEÅ®„ÅÅEÅÜË®òËø∞
     6 00000000                                 [BITS 32]						; 32„Éì„ÉÉ„Éà„É¢„Éº„ÉâÁî®„ÅÆÊ©üÊ¢∞Ë™û„Çí‰Ωú„Çâ„Åõ„Çã
     7 00000000                                 [FILE "naskfunc.nas"]			; „ÇΩ„Éº„Çπ„Éï„Ç°„Ç§„É´ÂêçÊÉÖÂ†±
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_cr3, _store_cr3
    16 00000000                                 		GLOBAL	_load_tr
    17 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    18 00000000                                 		GLOBAL	_asm_inthandler2c, _asm_inthandler0c, _asm_inthandler0e
    19 00000000                                 		GLOBAL	_asm_inthandler0d, _asm_end_app
    20 00000000                                 		GLOBAL	_memtest_sub
    21 00000000                                 		GLOBAL	_farjmp, _farcall
    22 00000000                                 		GLOBAL	_asm_hrb_api, _start_app
    23 00000000                                 		;GLOBAL	_memset,_strcpy,_strcmp
    24 00000000                                 		global	_support_apic, _io_wrmsr, _io_rdmsr, _test2, _get_lock, _rdrand
    25 00000000                                 		global	_store_gdt, _store_idt,_sys_reboot,_sys_call,_test3
    26 00000000                                 		EXTERN	_inthandler20, _inthandler21
    27 00000000                                 		EXTERN	_inthandler2c, _inthandler0d
    28 00000000                                 		EXTERN	_inthandler0c, _inthandler0e
    29 00000000                                 		EXTERN	_hrb_api
    30  = FED40000                              		tpm_command equ 0xfed40000      ;TPMÂëΩ‰ª§ÂØÑÂ≠òÂô®Âú∞ÂùÄ
    31  = FED40014                              		tpm_status equ 0xfed40014       ;TPMÁä∂ÊÄÅÂØÑÂ≠òÂô®Âú∞ÂùÄ
    32 00000000                                 
    33                                          [SECTION .text]
    34 00000000                                 
    35 00000000                                 _io_hlt:	; void io_hlt(void);
    36 00000000 F4                              		HLT
    37 00000001 C3                              		RET
    38 00000002                                 
    39 00000002                                 _io_cli:	; void io_cli(void);
    40 00000002 FA                              		CLI
    41 00000003 C3                              		RET
    42 00000004                                 
    43 00000004                                 _io_sti:	; void io_sti(void);
    44 00000004 FB                              		STI
    45 00000005 C3                              		RET
    46 00000006                                 
    47 00000006                                 _io_stihlt:	; void io_stihlt(void);
    48 00000006 FB                              		STI
    49 00000007 F4                              		HLT
    50 00000008 C3                              		RET
    51 00000009                                 
    52 00000009                                 _io_in8:	; int io_in8(int port);
    53 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    54 0000000D B8 00000000                     		MOV		EAX,0
    55 00000012 EC                              		IN		AL,DX
    56 00000013 C3                              		RET
    57 00000014                                 
    58 00000014                                 _io_in16:	; int io_in16(int port);
    59 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    60 00000018 B8 00000000                     		MOV		EAX,0
    61 0000001D 66 ED                           		IN		AX,DX
    62 0000001F C3                              		RET
    63 00000020                                 
    64 00000020                                 _io_in32:	; int io_in32(int port);
    65 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    66 00000024 ED                              		IN		EAX,DX
    67 00000025 C3                              		RET
    68 00000026                                 
    69 00000026                                 _io_out8:	; void io_out8(int port, int data);
    70 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    71 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    72 0000002E EE                              		OUT		DX,AL
    73 0000002F C3                              		RET
    74 00000030                                 
    75 00000030                                 _io_out16:	; void io_out16(int port, int data);
    76 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    77 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    78 00000038 66 EF                           		OUT		DX,AX
    79 0000003A C3                              		RET
    80 0000003B                                 
    81 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    82 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    83 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    84 00000043 EF                              		OUT		DX,EAX
    85 00000044 C3                              		RET
    86 00000045                                 
    87 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    88 00000045 9C                              		PUSHFD		; PUSH EFLAGS „Å®„ÅÅEÅÜÊÑèÂë≥
    89 00000046 58                              		POP		EAX
    90 00000047 C3                              		RET
    91 00000048                                 
    92 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    93 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    94 0000004C 50                              		PUSH	EAX
    95 0000004D 9D                              		POPFD		; POP EFLAGS „Å®„ÅÅEÅÜÊÑèÂë≥
    96 0000004E C3                              		RET
    97 0000004F                                 
    98 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    99 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   100 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
   101 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
   102 0000005E C3                              		RET
   103 0000005F                                 
   104 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
   105 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   106 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   107 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   108 0000006E C3                              		RET
   109 0000006F                                 
   110 0000006F                                 _load_cr0:		; int load_cr0(void);
   111 0000006F 0F 20 C0                        		MOV		EAX,CR0
   112 00000072 C3                              		RET
   113 00000073                                 
   114 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   115 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   116 00000077 0F 22 C0                        		MOV		CR0,EAX
   117 0000007A 90                              		nop
   118 0000007B 90                              		nop
   119 0000007C C3                              		RET
   120 0000007D                                 		
   121 0000007D                                 _load_cr3:		; int load_cr3(void);
   122 0000007D 0F 20 D8                        		MOV		EAX,CR3
   123 00000080 C3                              		RET
   124 00000081                                 
   125 00000081                                 _store_cr3:		; void store_cr3(int cr0);
   126 00000081 8B 44 24 04                     		MOV		EAX,[ESP+4]
   127 00000085 0F 22 D8                        		MOV		CR3,EAX
   128 00000088 C3                              		RET
   129 00000089                                 
   130 00000089                                 _load_tr:		; void load_tr(int tr);
   131 00000089 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   132 0000008E C3                              		RET
   133 0000008F                                 
   134 0000008F                                 _asm_inthandler20:
   135 0000008F 06                              		PUSH	ES
   136 00000090 1E                              		PUSH	DS
   137 00000091 60                              		PUSHAD
   138 00000092 89 E0                           		MOV		EAX,ESP
   139 00000094 50                              		PUSH	EAX
   140 00000095 66 8C D0                        		MOV		AX,SS
   141 00000098 8E D8                           		MOV		DS,AX
   142 0000009A 8E C0                           		MOV		ES,AX
   143 0000009C E8 [00000000]                   		CALL	_inthandler20
   144 000000A1 58                              		POP		EAX
   145 000000A2 61                              		POPAD
   146 000000A3 1F                              		POP		DS
   147 000000A4 07                              		POP		ES
   148 000000A5 CF                              		IRETD
   149 000000A6                                 
   150 000000A6                                 _asm_inthandler21:
   151 000000A6 06                              		PUSH	ES
   152 000000A7 1E                              		PUSH	DS
   153 000000A8 60                              		PUSHAD
   154 000000A9 89 E0                           		MOV		EAX,ESP
   155 000000AB 50                              		PUSH	EAX
   156 000000AC 66 8C D0                        		MOV		AX,SS
   157 000000AF 8E D8                           		MOV		DS,AX
   158 000000B1 8E C0                           		MOV		ES,AX
   159 000000B3 E8 [00000000]                   		CALL	_inthandler21
   160 000000B8 58                              		POP		EAX
   161 000000B9 61                              		POPAD
   162 000000BA 1F                              		POP		DS
   163 000000BB 07                              		POP		ES
   164 000000BC CF                              		IRETD
   165 000000BD                                 
   166 000000BD                                 _asm_inthandler2c:
   167 000000BD 06                              		PUSH	ES
   168 000000BE 1E                              		PUSH	DS
   169 000000BF 60                              		PUSHAD
   170 000000C0 89 E0                           		MOV		EAX,ESP
   171 000000C2 50                              		PUSH	EAX
   172 000000C3 66 8C D0                        		MOV		AX,SS
   173 000000C6 8E D8                           		MOV		DS,AX
   174 000000C8 8E C0                           		MOV		ES,AX
   175 000000CA E8 [00000000]                   		CALL	_inthandler2c
   176 000000CF 58                              		POP		EAX
   177 000000D0 61                              		POPAD
   178 000000D1 1F                              		POP		DS
   179 000000D2 07                              		POP		ES
   180 000000D3 CF                              		IRETD
   181 000000D4                                 
   182 000000D4                                 _asm_inthandler0c:
   183 000000D4 FB                              		STI
   184 000000D5 06                              		PUSH	ES
   185 000000D6 1E                              		PUSH	DS
   186 000000D7 60                              		PUSHAD
   187 000000D8 89 E0                           		MOV		EAX,ESP
   188 000000DA 50                              		PUSH	EAX
   189 000000DB 66 8C D0                        		MOV		AX,SS
   190 000000DE 8E D8                           		MOV		DS,AX
   191 000000E0 8E C0                           		MOV		ES,AX
   192 000000E2 E8 [00000000]                   		CALL	_inthandler0c
   193 000000E7 83 F8 00                        		CMP		EAX,0
   194 000000EA 0F 85 000000BC                  		JNE		_asm_end_app
   195 000000F0 58                              		POP		EAX
   196 000000F1 61                              		POPAD
   197 000000F2 1F                              		POP		DS
   198 000000F3 07                              		POP		ES
   199 000000F4 83 C4 04                        		ADD		ESP,4			; INT 0x0c „Åß„ÇÇ„ÄÅ„Åì„Çå„ÅåÂøÅE¶ÅE
   200 000000F7 CF                              		IRETD
   201 000000F8                                 
   202 000000F8                                 _asm_inthandler0d:
   203 000000F8 FB                              		STI
   204 000000F9 06                              		PUSH	ES
   205 000000FA 1E                              		PUSH	DS
   206 000000FB 60                              		PUSHAD
   207 000000FC 89 E0                           		MOV		EAX,ESP
   208 000000FE 50                              		PUSH	EAX
   209 000000FF 66 8C D0                        		MOV		AX,SS
   210 00000102 8E D8                           		MOV		DS,AX
   211 00000104 8E C0                           		MOV		ES,AX
   212 00000106 E8 [00000000]                   		CALL	_inthandler0d
   213 0000010B 83 F8 00                        		CMP		EAX,0			; „Åì„Åì„Å†„ÅëÈÅï„ÅÅE
   214 0000010E 0F 85 00000098                  		JNE		_asm_end_app	; „Åì„Åì„Å†„ÅëÈÅï„ÅÅE
   215 00000114 58                              		POP		EAX
   216 00000115 61                              		POPAD
   217 00000116 1F                              		POP		DS
   218 00000117 07                              		POP		ES
   219 00000118 83 C4 04                        		ADD		ESP,4			; INT 0x0d „Åß„ÅØ„ÄÅ„Åì„Çå„ÅåÂøÅE¶ÅE
   220 0000011B CF                              		IRETD
   221 0000011C                                 
   222 0000011C                                 _asm_inthandler0e:
   223 0000011C FB                              		STI
   224 0000011D 06                              		PUSH	ES
   225 0000011E 1E                              		PUSH	DS
   226 0000011F 60                              		PUSHAD
   227 00000120 89 E0                           		MOV		EAX,ESP
   228 00000122 50                              		PUSH	EAX
   229 00000123 66 8C D0                        		MOV		AX,SS
   230 00000126 8E D8                           		MOV		DS,AX
   231 00000128 8E C0                           		MOV		ES,AX
   232 0000012A 0F 20 D0                        		MOV 	eax,cr2 ;‰øùÂ≠òÁé∞Âú∫
   233 0000012D 50                              		PUSH 	eax
   234 0000012E E8 [00000000]                   		CALL	_inthandler0e
   235 00000133 83 F8 00                        		CMP		EAX,0
   236 00000136 75 74                           		JNE		_asm_end_app
   237 00000138 83 C4 04                        		ADD 	ESP,4 ;Ê∏ÅEô§Ê†à‰∏≠ÁöÅEr2
   238 0000013B 58                              		POP		EAX
   239 0000013C 61                              		POPAD
   240 0000013D 1F                              		POP		DS
   241 0000013E 07                              		POP		ES
   242 0000013F 83 C4 04                        		ADD		ESP,4
   243 00000142 CF                              		IRETD
   244 00000143                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   245 00000143 57                              		PUSH	EDI						; ÅEÅEBX, ESI, EDI „ÇÇ‰Ωø„ÅÅEÅü„ÅÅEÅE„ÅßÅEÅE
   246 00000144 56                              		PUSH	ESI
   247 00000145 53                              		PUSH	EBX
   248 00000146 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   249 0000014B BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   250 00000150 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   251 00000154                                 mts_loop:
   252 00000154 89 C3                           		MOV		EBX,EAX
   253 00000156 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   254 0000015C 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   255 0000015E 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   256 00000160 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   257 00000163 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   258 00000165 75 18                           		JNE		mts_fin
   259 00000167 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   260 0000016A 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   261 0000016C 75 11                           		JNE		mts_fin
   262 0000016E 89 13                           		MOV		[EBX],EDX				; *p = old;
   263 00000170 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   264 00000175 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   265 00000179 76 D9                           		JBE		mts_loop
   266 0000017B 5B                              		POP		EBX
   267 0000017C 5E                              		POP		ESI
   268 0000017D 5F                              		POP		EDI
   269 0000017E C3                              		RET
   270 0000017F                                 mts_fin:
   271 0000017F 89 13                           		MOV		[EBX],EDX				; *p = old;
   272 00000181 5B                              		POP		EBX
   273 00000182 5E                              		POP		ESI
   274 00000183 5F                              		POP		EDI
   275 00000184 C3                              		RET
   276 00000185                                 
   277 00000185                                 _farjmp:		; void farjmp(int eip, int cs);
   278 00000185 FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   279 00000189 C3                              		RET
   280 0000018A                                 
   281 0000018A                                 _farcall:		; void farcall(int eip, int cs);
   282 0000018A FF 5C 24 04                     		CALL	FAR	[ESP+4]				; eip, cs
   283 0000018E C3                              		RET
   284 0000018F                                 
   285 0000018F                                 _asm_hrb_api:
   286 0000018F FB                              		STI
   287 00000190 1E                              		PUSH	DS
   288 00000191 06                              		PUSH	ES
   289 00000192 60                              		PUSHAD		; ‰øùÂ≠ò„ÅE„Åü„ÇÅ„ÅÆPUSH
   290 00000193 60                              		PUSHAD		; hrb_api„Å´„Çè„Åü„Åô„Åü„ÇÅ„ÅEPUSH
   291 00000194 66 8C D0                        		MOV		AX,SS
   292 00000197 8E D8                           		MOV		DS,AX		; OSÁî®„ÅÆ„Çª„Ç∞„É°„É≥„Éà„ÇíDS„Å®ES„Å´„ÇÇÂÅE„Çå„Çã
   293 00000199 8E C0                           		MOV		ES,AX
   294 0000019B E8 [00000000]                   		CALL	_hrb_api
   295 000001A0 83 F8 00                        		CMP		EAX,0		; EAX„ÅÅE„Åß„Å™„Åë„Çå„Å∞„Ç¢„Éó„É™ÁµÇ‰∫ÅEÅEÁêÅE
   296 000001A3 75 07                           		JNE		_asm_end_app
   297 000001A5 83 C4 20                        		ADD		ESP,32
   298 000001A8 61                              		POPAD
   299 000001A9 07                              		POP		ES
   300 000001AA 1F                              		POP		DS
   301 000001AB CF                              		IRETD
   302 000001AC                                 _asm_end_app:
   303 000001AC                                 ;	EAX„ÅØtss.esp0„ÅÆÁï™Âú∞
   304 000001AC 8B 20                           		MOV		ESP,[EAX]
   305 000001AE C7 40 04 00000000               		MOV		DWORD [EAX+4],0
   306 000001B5 61                              		POPAD
   307 000001B6 C3                              		RET					; cmd_app„Å∏Â∏∞„ÇÅE
   308 000001B7                                 
   309 000001B7                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   310 000001B7 60                              		PUSHAD		; 32„Éì„ÉÉ„Éà„É¨„Ç∏„Çπ„Çø„ÇíÂÅEÈÉ®‰øùÂ≠ò„Åó„Å¶„Åä„Åè
   311 000001B8 8B 54 24 24                     		MOV		EDX,[ESP+36]	; „Ç¢„Éó„É™Áî®„ÅÆEIP
   312 000001BC 8B 44 24 28                     		MOV		EAX,[ESP+40]	; „Ç¢„Éó„É™Áî®„ÅÆCS
   313 000001C0 8B 4C 24 2C                     		MOV		ECX,[ESP+44]	; „Ç¢„Éó„É™Áî®„ÅÆESP
   314 000001C4 8B 5C 24 30                     		MOV		EBX,[ESP+48]	; „Ç¢„Éó„É™Áî®„ÅÆDS/SS
   315 000001C8 8B 6C 24 34                     		MOV		EBP,[ESP+52]	; tss.esp0„ÅÆÁï™Âú∞
   316 000001CC 89 65 00                        		MOV		[EBP  ],ESP		; OSÁî®„ÅÆESP„Çí‰øùÂ≠ÅE
   317 000001CF 8C 55 04                        		MOV		[EBP+4],SS		; OSÁî®„ÅÆSS„Çí‰øùÂ≠ÅE
   318 000001D2 8E C3                           		MOV		ES,BX
   319 000001D4 8E DB                           		MOV		DS,BX
   320 000001D6 8E E3                           		MOV		FS,BX
   321 000001D8 8E EB                           		MOV		GS,BX
   322 000001DA                                 		;db 0x0f,0x35;sys_ret
   323 000001DA                                 ;	‰ª•‰∏ã„ÅERETF„Åß„Ç¢„Éó„É™„Å´Ë°å„Åã„Åõ„Çã„Åü„ÇÅ„ÅÆ„Çπ„Çø„ÉÅEÇØË™øÊï¥
   324 000001DA 83 C8 03                        		OR		EAX,3			; „Ç¢„Éó„É™Áî®„ÅÆ„Çª„Ç∞„É°„É≥„ÉàÁï™Âè∑„Å´3„ÇíOR„Åô„Çã
   325 000001DD 83 CB 03                        		OR		EBX,3			; „Ç¢„Éó„É™Áî®„ÅÆ„Çª„Ç∞„É°„É≥„ÉàÁï™Âè∑„Å´3„ÇíOR„Åô„Çã
   326 000001E0 53                              		PUSH	EBX				; „Ç¢„Éó„É™„ÅÆSS
   327 000001E1 51                              		PUSH	ECX				; „Ç¢„Éó„É™„ÅÆESP
   328 000001E2 50                              		PUSH	EAX				; „Ç¢„Éó„É™„ÅÆCS
   329 000001E3 52                              		PUSH	EDX				; „Ç¢„Éó„É™„ÅÆEIP
   330 000001E4 CB                              		RETF
   331 000001E5                                 ;	„Ç¢„Éó„É™„ÅåÁµÇ‰∫ÅEÅó„Å¶„ÇÇ„Åì„Åì„Å´„ÅØÊù•„Å™„ÅÅE
   332 000001E5                                 _strcmp:	;int strcmp(char* s,char* t,int longer);
   333 000001E5 56                              	push esi;
   334 000001E6 57                              	push edi;
   335 000001E7 51                              	push ecx;
   336 000001E8 8B 74 24 04                     	mov esi,[esp+4]
   337 000001EC 8B 7C 24 08                     	mov edi,[esp+8]
   338 000001F0 8B 4C 24 0C                     	mov ecx,[esp+12]
   339 000001F4 F2 A7                           	repne cmpsd
   340 000001F6 89 C8                           	mov eax,ecx
   341 000001F8 59                              	pop ecx
   342 000001F9 5F                              	pop edi
   343 000001FA 5E                              	pop esi
   344 000001FB C3                              	ret
   345 000001FC                                 _strcpy:	;void strcpy(char* s,char* t,int longer);
   346 000001FC 56                              	push esi;
   347 000001FD 57                              	push edi;
   348 000001FE 51                              	push ecx;
   349 000001FF 8B 74 24 04                     	mov esi,[esp+4]
   350 00000203 8B 7C 24 08                     	mov edi,[esp+8]
   351 00000207 8B 4C 24 0C                     	mov ecx,[esp+12]
   352 0000020B F3 A5                           	db 0xf3,0xa5;rep movsb
   353 0000020D 59                              	pop ecx
   354 0000020E 5F                              	pop edi
   355 0000020F 5E                              	pop esi
   356 00000210 C3                              	ret
   357 00000211                                 _memset:	;void memset(char* s,int num,int longer)
   358 00000211 57                              	push edi
   359 00000212 50                              	push eax
   360 00000213 51                              	push ecx
   361 00000214 8B 7C 24 04                     	mov edi,[esp+4]
   362 00000218 8B 44 24 08                     	mov eax,[esp+8]
   363 0000021C 8B 4C 24 0C                     	mov ecx,[esp+12]
   364 00000220 F3 AA                           	rep stosb
   365 00000222 59                              	pop ecx
   366 00000223 58                              	pop eax
   367 00000224 5F                              	pop edi
   368 00000225 C3                              	ret
   369 00000226                                 _support_apic: ;int support_apic(void):
   370 00000226 52                              	push edx
   371 00000227 B8 00000001                     	mov eax,1
   372 0000022C 0F A2                           	db 0x0f,0xa2 ;cpuid 
   373 0000022E 0F BA E2 09                     	bt edx,9
   374 00000232 0F 92 C0                        	setc al
   375 00000235 0F B6 C0                        	movzx eax,al
   376 00000238 5A                              	pop edx
   377 00000239 C3                              	ret
   378 0000023A                                 _io_rdmsr: ;void io_rdmsr(int* edx,int* eax,int ecx)
   379 0000023A 52                              	push edx
   380 0000023B 51                              	push ecx
   381 0000023C 50                              	push eax
   382 0000023D 8B 4C 24 18                     	mov ecx,[esp+24]
   383 00000241 0F 32                           	db 0x0f,0x32 ;rdmsr
   384 00000243 8B 4C 24 10                     	mov ecx,[esp+16]
   385 00000247 89 11                           	mov [ecx],edx
   386 00000249 8B 4C 24 14                     	mov ecx,[esp+20]
   387 0000024D 89 01                           	mov [ecx],eax
   388 0000024F 58                              	pop eax
   389 00000250 59                              	pop ecx
   390 00000251 5A                              	pop edx
   391 00000252 C3                              	ret
   392 00000253                                 _io_wrmsr: ;void io_wrmsr(int edx,int eax,int ecx)
   393 00000253 52                              	push edx
   394 00000254 51                              	push ecx
   395 00000255 50                              	push eax
   396 00000256 8B 54 24 10                     	mov edx,[esp+16]
   397 0000025A 8B 44 24 14                     	mov eax,[esp+20]
   398 0000025E 8B 4C 24 18                     	mov ecx,[esp+24]
   399 00000262 0F 30                           	db 0x0f,0x30 ;wrmsr
   400 00000264 58                              	pop eax
   401 00000265 59                              	pop ecx
   402 00000266 5A                              	pop edx
   403 00000267 C3                              	ret
   404 00000268                                 _test2: ;void test(int eax,int ebx)
   405 00000268 50                              	push eax
   406 00000269 53                              	push ebx
   407 0000026A 8B 44 24 0C                     	mov eax,[esp+12]
   408 0000026E 8B 5C 24 10                     	mov ebx,[esp+16]
   409 00000272 0F 0B                           	db 0x0f,0x0b ;ud2
   410 00000274                                 .fin:
   411 00000274 FA                              	cli
   412 00000275 F4                              	hlt
   413 00000276 EB FC                           	jmp .fin
   414 00000278 5B                              	pop ebx
   415 00000279 58                              	pop eax
   416 0000027A C3                              	ret
   417 0000027B                                 _get_lock: ;int get_lock(int* lock,int bit)
   418 0000027B 55                              	push ebp
   419 0000027C 89 E5                           	mov ebp,esp
   420 0000027E 51                              	push ecx
   421 0000027F 52                              	push edx
   422 00000280 8B 5D 08                        	mov ebx,[ebp+8]
   423 00000283 8B 4D 0C                        	mov ecx,[ebp+12]
   424 00000286 F0 0F AB 0B                     	lock bts dword [ebx],ecx
   425 0000028A 31 C0                           	xor eax,eax
   426 0000028C 11 C0                           	adc eax,eax
   427 0000028E 5A                              	pop edx
   428 0000028F 59                              	pop ecx
   429 00000290 89 EC                           	mov esp,ebp
   430 00000292 5D                              	pop ebp
   431 00000293 C3                              	ret
   432 00000294                                 _store_gdt: ;void store_gdt(void* addr)
   433 00000294 50                              	push eax
   434 00000295 8B 44 24 08                     	mov eax,[esp+8]
   435 00000299 0F 01 00                        	sgdt [eax]
   436 0000029C 58                              	pop eax
   437 0000029D C3                              	ret
   438 0000029E                                 _store_idt: ;void store_gdt(void* addr)
   439 0000029E 50                              	push eax
   440 0000029F 8B 44 24 08                     	mov eax,[esp+8]
   441 000002A3 0F 01 08                        	sidt [eax]
   442 000002A6 58                              	pop eax
   443 000002A7 C3                              	ret
   444 000002A8                                 _sys_reboot: ;void sys_reboot(void)
   445 000002A8 FA                              	cli
   446 000002A9 0F 20 C0                        	mov eax,cr0
   447 000002AC 66 BA 0064                      	mov dx,0x64
   448 000002B0 66 B8 00FE                      	mov ax,0xfe
   449 000002B4 66 EF                           	out dx,ax
   450 000002B6                                 .fin:
   451 000002B6 F4                              	hlt
   452 000002B7 EB FD                           	jmp .fin
   453 000002B9                                 _sys_call:
   454 000002B9 0F 35                           	db 0x0f,0x35 ;sysexit
   455 000002BB                                 _test3:
   456 000002BB F4                              	db 0xf4
   457 000002BC                                 .fin:
   458 000002BC EB FE                           	jmp .fin
   459 000002BE                                 _support_rand: ;int support_rand()
   460 000002BE                                 	
   461 000002BE 53                              	push ebx
   462 000002BF 51                              	push ecx
   463 000002C0 52                              	push edx
   464 000002C1 B8 00000001                     	mov eax,1
   465 000002C6 0F A2                           	db 0x0f,0xa2 ;cpuid
   466 000002C8 83 E1 00                        	and ecx,0x400000000
   467 000002CB 0F 92 C0                        	db 0x0f,0x92,0xc0;setc al
   468 000002CE 5A                              	pop edx
   469 000002CF 59                              	pop ecx
   470 000002D0 5B                              	pop ebx
   471 000002D1 C3                              	ret
   472 000002D2                                 _rdrand: ;int rdrand()
   473 000002D2 0F C7 F0                        	db 0x0f,0xc7,0xf0 ;rnrand eax
   474 000002D5 C3                              	ret
   475 000002D6                                 _invlpg:
   476 000002D6 C3                              	ret
   477 000002D7                                 _tpm_init:
   478 000002D7                                 	;ÂàùÂßãÂåñTPM
   479 000002D7 50                              	push eax
   480 000002D8 B8 0006F000                         mov eax, 0x6f000
   481 000002DD A3 FED40000                         mov dword [tpm_command], eax
   482 000002E2 E8 00000002                         call _tpm_wait_for_status
   483 000002E7 58                              	pop eax
   484 000002E8 C3                              	ret
   485 000002E9                                 _tpm_get_a_key:
   486 000002E9                                 	
   487 000002E9                                 _tpm_wait_for_status:
   488 000002E9                                         ;Á≠âÂæÖTPMÁä∂ÊÄÅÂ∞±Áª™
   489 000002E9 A1 FED40014                             mov eax, dword [tpm_status]
   490 000002EE 25 01800000                             and eax, 0x01800000
   491 000002F3 3D 00800000                             cmp eax, 0x00800000
   492 000002F8 75 EF                                   jne _tpm_wait_for_status
   493 000002FA C3                              		ret
