     1                                  ; naskfunc
     2                                  ; tab=4
     3                                  
     4                                  ;format "wcoff"				; オブジェクトファイルを作るモーチe
     5                                  ;instrset "i486p"				; 486の命令まで使ぁe��ぁe��ぁe��記述
     6                                  bits 64						; 32ビットモード用の機械語を作らせる
     7                                  ;file "naskfunc.nas"			; ソースファイル名情報
     8                                  
     9                                  		global	io_hlt, io_cli, io_sti, io_stihlt
    10                                  		global	io_in8,  io_in16,  io_in32
    11                                  		global	io_out8, io_out16, io_out32
    12                                  		global	io_load_eflags, io_store_eflags
    13                                  		global	load_gdtr, load_idtr
    14                                  		global	load_cr0, store_cr0
    15                                  		global	load_cr3, store_cr3
    16                                  		global load_cr4, store_cr4
    17                                  		global	load_tr
    18                                  		global	asm_inthandler20, asm_inthandler21
    19                                  		global	asm_inthandler2c, asm_inthandler0c , asm_inthandler34, asm_inthandler0e
    20                                  		global	asm_inthandler0d, asm_end_app
    21                                  		global	memtest_sub
    22                                  		global	farjmp, farcall
    23                                  		global	asm_hrb_api, start_app
    24                                  		global sys_nop , asm_sse_strcmp
    25                                  		global	asm_memset,asm_strcpy,asm_strcmp,asm_memcpy,asm_memcmp,asm_memset
    26                                  		global	support_apic, io_wrmsr, io_rdmsr, test2, get_lock, rdrand
    27                                  		global	store_gdt, store_idt,sys_reboot,sys_call, test3, asm_task_switch32
    28                                  		global asm_x64_cs_init,asm_get_cs,asm_sheet_refreshsub32
    29                                  		extern	inthandler20, inthandler21
    30                                  		extern	inthandler2c, inthandler0d
    31                                  		extern	inthandler0c, inthandler0e , inthandler34
    32                                  		extern	hrb_api 
    33                                  		tpm_command equ 0xfed40000      ;tpm命令寄存器地址
    34                                  		tpm_status equ 0xfed40014       ;tpm状态寄存器地址
    35                                  ; 一个接收指针参数的 vmxon 指令宏定义
    36                                  
    37                                  ;ip_size equ 4
    38                                  ;gpr_size equ 4
    39                                  ;rax equ <eax>
    40                                  ;rbx equ <ebx>
    41                                  ;rcx equ <ecx>
    42                                  ;rdx equ <edx>
    43                                  ;rsi equ <esi>
    44                                  ;rdi equ <edi>
    45                                  ;rsp equ <esp>
    46                                  ;rbp equ <ebp>
    47                                  
    48                                  
    49                                  ip_size equ 8
    50                                  gpr_size equ 8
    51                                  
    52                                  
    53                                  section .text
    54                                  
    55                                  io_hlt:	; void io_hlt(void);
    56 00000000 F4                      		hlt
    57 00000001 C3                      		ret
    58                                  
    59                                  io_cli:	; void io_cli(void);
    60                                  
    61 00000002 FA                      		cli
    62 00000003 C3                      		ret
    63                                  
    64                                  io_sti:	; void io_sti(void);
    65                                  	
    66 00000004 FB                      		sti
    67 00000005 C3                      		ret
    68                                  
    69                                  io_stihlt:	; void io_stihlt(void);
    70 00000006 FB                      		sti
    71 00000007 F4                      		hlt
    72 00000008 C3                      		ret
    73                                  
    74                                  io_in8:	; int io_in8(int port);
    75 00000009 89CA                    		mov		edx,ecx		; port
    76 0000000B 31C0                    		xor		eax,eax
    77 0000000D EC                      		in		al,dx
    78 0000000E C3                      		ret
    79                                  
    80                                  io_in16:	; int io_in16(int port);
    81 0000000F 89CA                    		mov		edx,ecx		; port
    82 00000011 31C0                    		xor		eax,eax
    83 00000013 66ED                    		in		ax,dx
    84 00000015 C3                      		ret
    85                                  
    86                                  io_in32:	; int io_in32(int port);
    87 00000016 89CA                    		mov		edx,ecx		; port
    88 00000018 ED                      		in		eax,dx
    89 00000019 C3                      		ret
    90                                  
    91                                  io_out8:	; void io_out8(int port, int data);
    92 0000001A 89D0                    		mov		eax,edx		; data
    93 0000001C 89CA                    		mov		edx,ecx	; port
    94 0000001E EE                      		out		dx,al
    95 0000001F C3                      		ret
    96                                  
    97                                  io_out16:	; void io_out16(int port, int data);
    98 00000020 89D0                    		mov		eax,edx		; data
    99 00000022 89CA                    		mov		edx,ecx		; port
   100 00000024 66EF                    		out		dx,ax
   101 00000026 C3                      		ret
   102                                  
   103                                  io_out32:	; void io_out32(int port, int data);
   104 00000027 89D0                    		mov		eax,edx		; datas
   105 00000029 89CA                    		mov		edx,ecx		; port
   106 0000002B EF                      		out		dx,eax
   107 0000002C C3                      		ret
   108                                  
   109                                  io_load_eflags:	; int io_load_eflags(void);
   110 0000002D 9C                      		pushfq		; push eflags とぁe��意味
   111 0000002E 58                      		pop rax
   112 0000002F C3                      		ret
   113                                  io_store_eflags:	; void io_store_eflags(int eflags);
   114                                  		;push eax
   115 00000030 51                      		push rcx
   116 00000031 9D                      		popfq		; pop eflags とぁe��意味
   117                                  		;pop eax
   118 00000032 C3                      		ret
   119                                  
   120                                  load_gdtr:		; void load_gdtr(int limit, int addr);
   121                                  		;push eax
   122 00000033 52                      		push rdx
   123 00000034 83EC02                  		sub esp,2
   124 00000037 6667890C24              		mov [esp],cx
   125 0000003C 0F011424                		lgdt [rsp]
   126 00000040 4883C40A                		add rsp,10
   127                                  		;64位0特权级所有段寄存器清零
   128 00000044 31C0                    		xor eax,eax
   129 00000046 8ED8                    		mov ds,eax
   130 00000048 8EC0                    		mov es,eax
   131 0000004A 8ED0                    		mov ss,eax
   132 0000004C 8EE8                    		mov gs,eax
   133 0000004E 8EE0                    		mov fs,eax
   134                                  		;pop eax
   135 00000050 C3                      		ret
   136                                  
   137                                  load_idtr:		; void load_idtr(int limit, int addr);
   138 00000051 52                      		push rdx
   139 00000052 6651                    		push cx
   140 00000054 0F011C24                		lidt [rsp]
   141 00000058 4883C40A                		add rsp,10
   142 0000005C C3                      		ret
   143                                  
   144                                  load_cr0:		; int load_cr0(void);
   145 0000005D 0F20C0                  		mov		rax,cr0
   146 00000060 C3                      		ret
   147                                  
   148                                  store_cr0:		; void store_cr0(int cr0);
   149 00000061 0F22C1                  		mov		cr0,rcx
   150 00000064 C3                      		ret
   151                                  		
   152                                  load_cr3:		; int load_cr3(void);
   153 00000065 0F20D8                  		mov		rax,cr3
   154 00000068 C3                      		ret
   155                                  
   156                                  store_cr3:		; void store_cr3(int cr0);
   157 00000069 0F22D9                  		mov		cr3,rcx
   158 0000006C C3                      		ret
   159                                  
   160                                  load_tr:		; void load_tr(int tr);
   161 0000006D 0F00D9                  		ltr		cx
   162 00000070 C3                      		ret
   163                                  load_cr4:
   164 00000071 0F22E1                  		mov cr4,rcx
   165 00000074 C3                      		ret
   166                                  store_cr4:
   167 00000075 0F20E0                  		mov rax,cr4
   168 00000078 C3                      		ret
   169                                  		
   170                                  asm_inthandler20:
   171 00000079 50                      		push rax
   172                                  		
   173 0000007A 8CC0                    		mov eax,es
   174 0000007C 50                      		push rax
   175 0000007D 8CD8                    		mov eax,ds
   176 0000007F 50                      		push rax
   177                                  		
   178 00000080 50                      		push rax
   179 00000081 51                      		push rcx
   180 00000082 52                      		push rdx
   181 00000083 53                      		push rbx
   182 00000084 56                      		push rsi
   183 00000085 57                      		push rdi
   184 00000086 55                      		push rbp
   185 00000087 4150                    		push r8
   186 00000089 4151                    		push r9
   187 0000008B 4152                    		push r10
   188 0000008D 4153                    		push r11
   189 0000008F 4154                    		push r12
   190 00000091 4155                    		push r13
   191 00000093 4156                    		push r14
   192 00000095 4157                    		push r15
   193                                  		
   194 00000097 4889E0                  		mov		rax,rsp
   195 0000009A 4889C1                  		mov 	rcx,rax
   196 0000009D 668CD0                  		mov		ax,ss
   197 000000A0 8ED8                    		mov		ds,ax
   198 000000A2 8EC0                    		mov		es,ax
   199 000000A4 E8(00000000)            		call	inthandler20
   200                                  		
   201 000000A9 415F                    		pop r15
   202 000000AB 415E                    		pop r14
   203 000000AD 415D                    		pop r13
   204 000000AF 415C                    		pop r12
   205 000000B1 415B                    		pop r11
   206 000000B3 415A                    		pop r10
   207 000000B5 4159                    		pop r9
   208 000000B7 4158                    		pop r8
   209 000000B9 5D                      		pop rbp
   210 000000BA 5F                      		pop rdi
   211 000000BB 5E                      		pop rsi
   212 000000BC 5B                      		pop rbx
   213 000000BD 5A                      		pop rdx
   214 000000BE 59                      		pop rcx
   215 000000BF 58                      		pop rax
   216                                  		
   217 000000C0 58                      		pop rax
   218 000000C1 8ED8                    		mov ds,eax
   219 000000C3 58                      		pop rax
   220 000000C4 8EC0                    		mov es,eax
   221                                  		
   222 000000C6 58                      		pop rax
   223 000000C7 48                      		db 0x48
   224 000000C8 CF                      		iret
   225                                  
   226                                  asm_inthandler21:
   227 000000C9 50                      		push rax
   228                                  		
   229 000000CA 8CC0                    		mov eax,es
   230 000000CC 50                      		push rax
   231 000000CD 8CD8                    		mov eax,ds
   232 000000CF 50                      		push rax
   233                                  		
   234 000000D0 50                      		push rax
   235 000000D1 51                      		push rcx
   236 000000D2 52                      		push rdx
   237 000000D3 53                      		push rbx
   238 000000D4 56                      		push rsi
   239 000000D5 57                      		push rdi
   240 000000D6 55                      		push rbp
   241 000000D7 4150                    		push r8
   242 000000D9 4151                    		push r9
   243 000000DB 4152                    		push r10
   244 000000DD 4153                    		push r11
   245 000000DF 4154                    		push r12
   246 000000E1 4155                    		push r13
   247 000000E3 4156                    		push r14
   248 000000E5 4157                    		push r15
   249                                  		
   250 000000E7 4889E0                  		mov		rax,rsp
   251 000000EA 4889C1                  		mov		rcx,rax
   252 000000ED 668CD0                  		mov		ax,ss
   253 000000F0 8ED8                    		mov		ds,ax
   254 000000F2 8EC0                    		mov		es,ax
   255 000000F4 E8(00000000)            		call	inthandler21
   256                                  		
   257 000000F9 415F                    		pop r15
   258 000000FB 415E                    		pop r14
   259 000000FD 415D                    		pop r13
   260 000000FF 415C                    		pop r12
   261 00000101 415B                    		pop r11
   262 00000103 415A                    		pop r10
   263 00000105 4159                    		pop r9
   264 00000107 4158                    		pop r8
   265 00000109 5D                      		pop rbp
   266 0000010A 5F                      		pop rdi
   267 0000010B 5E                      		pop rsi
   268 0000010C 5B                      		pop rbx
   269 0000010D 5A                      		pop rdx
   270 0000010E 59                      		pop rcx
   271 0000010F 59                      		pop rcx
   272 00000110 58                      		pop rax
   273                                  		
   274 00000111 8ED8                    		mov ds,eax
   275 00000113 58                      		pop rax
   276 00000114 8EC0                    		mov es,eax
   277 00000116 58                      		pop rax
   278 00000117 48                      		db 0x48
   279 00000118 CF                      		iret
   280                                  
   281                                  asm_inthandler2c:
   282 00000119 50                      		push rax
   283 0000011A 8CC0                    		mov eax,es
   284 0000011C 50                      		push rax
   285 0000011D 8CD8                    		mov eax,ds
   286 0000011F 50                      		push rax
   287                                  		
   288 00000120 50                      		push rax
   289 00000121 51                      		push rcx
   290 00000122 52                      		push rdx
   291 00000123 53                      		push rbx
   292 00000124 56                      		push rsi
   293 00000125 57                      		push rdi
   294 00000126 55                      		push rbp
   295 00000127 4150                    		push r8
   296 00000129 4151                    		push r9
   297 0000012B 4152                    		push r10
   298 0000012D 4153                    		push r11
   299 0000012F 4154                    		push r12
   300 00000131 4155                    		push r13
   301 00000133 4156                    		push r14
   302 00000135 4157                    		push r15
   303                                  		
   304 00000137 4889E1                  		mov		rcx,rsp
   305 0000013A 4831C0                  		xor		rax,rax
   306 0000013D 8ED8                    		mov		ds,ax
   307 0000013F 8EC0                    		mov		es,ax
   308 00000141 E8(00000000)            		call	inthandler2c
   309 00000146 415F                    		pop r15
   310 00000148 415E                    		pop r14
   311 0000014A 415D                    		pop r13
   312 0000014C 415C                    		pop r12
   313 0000014E 415B                    		pop r11
   314 00000150 415A                    		pop r10
   315 00000152 4159                    		pop r9
   316 00000154 4158                    		pop r8
   317 00000156 5D                      		pop rbp
   318 00000157 5F                      		pop rdi
   319 00000158 5E                      		pop rsi
   320 00000159 5B                      		pop rbx
   321 0000015A 5A                      		pop rdx
   322 0000015B 59                      		pop rcx
   323 0000015C 58                      		pop rax
   324                                  		
   325 0000015D 58                      		pop rax
   326 0000015E 8ED8                    		mov ds,eax
   327 00000160 58                      		pop rax
   328 00000161 8EC0                    		mov es,eax
   329 00000163 58                      		pop rax
   330 00000164 48                      		db 0x48
   331 00000165 CF                      		iret
   332                                  
   333                                  asm_inthandler34:
   334 00000166 50                      		push rax
   335 00000167 8CC0                    		mov eax,es
   336 00000169 50                      		push rax
   337 0000016A 8CD8                    		mov eax,ds
   338 0000016C 50                      		push rax
   339                                  		
   340 0000016D 50                      		push rax
   341 0000016E 51                      		push rcx
   342 0000016F 52                      		push rdx
   343 00000170 53                      		push rbx
   344 00000171 56                      		push rsi
   345 00000172 57                      		push rdi
   346 00000173 55                      		push rbp
   347 00000174 4150                    		push r8
   348 00000176 4151                    		push r9
   349 00000178 4152                    		push r10
   350 0000017A 4153                    		push r11
   351 0000017C 4154                    		push r12
   352 0000017E 4155                    		push r13
   353 00000180 4156                    		push r14
   354 00000182 4157                    		push r15
   355                                  		
   356 00000184 4889E1                  		mov		rcx,rsp
   357 00000187 668CD0                  		mov		ax,ss
   358 0000018A 8ED8                    		mov		ds,ax
   359 0000018C 8EC0                    		mov		es,ax
   360 0000018E E8(00000000)            		call	inthandler34
   361 00000193 415F                    		pop r15
   362 00000195 415E                    		pop r14
   363 00000197 415D                    		pop r13
   364 00000199 415C                    		pop r12
   365 0000019B 415B                    		pop r11
   366 0000019D 415A                    		pop r10
   367 0000019F 4159                    		pop r9
   368 000001A1 4158                    		pop r8
   369 000001A3 5D                      		pop rbp
   370 000001A4 5F                      		pop rdi
   371 000001A5 5E                      		pop rsi
   372 000001A6 5B                      		pop rbx
   373 000001A7 5A                      		pop rdx
   374 000001A8 59                      		pop rcx
   375 000001A9 58                      		pop rax
   376                                  		
   377 000001AA 58                      		pop rax
   378 000001AB 8ED8                    		mov ds,eax
   379 000001AD 58                      		pop rax
   380 000001AE 8EC0                    		mov es,eax
   381 000001B0 58                      		pop rax
   382 000001B1 48                      		db 0x48
   383 000001B2 CF                      		iret
   384                                  
   385                                  asm_inthandler0c:
   386 000001B3 50                      		push rax
   387 000001B4 8CC0                    		mov eax,es
   388 000001B6 50                      		push rax
   389 000001B7 8CD8                    		mov eax,ds
   390 000001B9 50                      		push rax
   391                                  		
   392 000001BA 50                      		push rax
   393 000001BB 51                      		push rcx
   394 000001BC 52                      		push rdx
   395 000001BD 53                      		push rbx
   396 000001BE 56                      		push rsi
   397 000001BF 57                      		push rdi
   398 000001C0 55                      		push rbp
   399 000001C1 4150                    		push r8
   400 000001C3 4151                    		push r9
   401 000001C5 4152                    		push r10
   402 000001C7 4153                    		push r11
   403 000001C9 4154                    		push r12
   404 000001CB 4155                    		push r13
   405 000001CD 4156                    		push r14
   406 000001CF 4157                    		push r15
   407                                  		
   408 000001D1 4889E1                  		mov		rcx,rsp
   409 000001D4 668CD0                  		mov		ax,ss
   410 000001D7 8ED8                    		mov		ds,ax
   411 000001D9 8EC0                    		mov		es,ax
   412 000001DB E8(00000000)            		call	inthandler0c
   413 000001E0 83F800                  		cmp		eax,0
   414 000001E3 0F856B010000            		jne		asm_end_app
   415 000001E9 415F                    		pop r15
   416 000001EB 415E                    		pop r14
   417 000001ED 415D                    		pop r13
   418 000001EF 415C                    		pop r12
   419 000001F1 415B                    		pop r11
   420 000001F3 415A                    		pop r10
   421 000001F5 4159                    		pop r9
   422 000001F7 4158                    		pop r8
   423 000001F9 5D                      		pop rbp
   424 000001FA 5F                      		pop rdi
   425 000001FB 5E                      		pop rsi
   426 000001FC 5B                      		pop rbx
   427 000001FD 5A                      		pop rdx
   428 000001FE 59                      		pop rcx
   429 000001FF 58                      		pop rax
   430                                  		
   431 00000200 58                      		pop rax
   432 00000201 8ED8                    		mov ds,eax
   433 00000203 58                      		pop rax
   434 00000204 8EC0                    		mov es,eax
   435 00000206 58                      		pop rax
   436 00000207 83C404                  		add		esp,4			; int 0x0c でも、これが忁e��e
   437 0000020A 48                      		db 0x48
   438 0000020B CF                      		iret
   439                                  
   440                                  asm_inthandler0d:
   441 0000020C 50                      		push rax
   442 0000020D 8CC0                    		mov eax,es
   443 0000020F 50                      		push rax
   444 00000210 8CD8                    		mov eax,ds
   445 00000212 50                      		push rax
   446                                  		
   447 00000213 50                      		push rax
   448 00000214 51                      		push rcx
   449 00000215 52                      		push rdx
   450 00000216 53                      		push rbx
   451 00000217 56                      		push rsi
   452 00000218 57                      		push rdi
   453 00000219 55                      		push rbp
   454 0000021A 4150                    		push r8
   455 0000021C 4151                    		push r9
   456 0000021E 4152                    		push r10
   457 00000220 4153                    		push r11
   458 00000222 4154                    		push r12
   459 00000224 4155                    		push r13
   460 00000226 4156                    		push r14
   461 00000228 4157                    		push r15
   462                                  		
   463 0000022A 4889E1                  		mov		rcx,rsp
   464 0000022D 668CD0                  		mov		ax,ss
   465 00000230 8ED8                    		mov		ds,ax
   466 00000232 8EC0                    		mov		es,ax
   467 00000234 E8(00000000)            		call	inthandler0d
   468 00000239 83F800                  		cmp		eax,0			; ここだけ違ぁe
   469 0000023C 0F8512010000            		jne		asm_end_app	; ここだけ違ぁe
   470 00000242 415F                    		pop r15
   471 00000244 415E                    		pop r14
   472 00000246 415D                    		pop r13
   473 00000248 415C                    		pop r12
   474 0000024A 415B                    		pop r11
   475 0000024C 415A                    		pop r10
   476 0000024E 4159                    		pop r9
   477 00000250 4158                    		pop r8
   478 00000252 5D                      		pop rbp
   479 00000253 5F                      		pop rdi
   480 00000254 5E                      		pop rsi
   481 00000255 5B                      		pop rbx
   482 00000256 5A                      		pop rdx
   483 00000257 59                      		pop rcx
   484 00000258 58                      		pop rax
   485                                  		
   486 00000259 58                      		pop rax
   487 0000025A 8ED8                    		mov ds,eax
   488 0000025C 58                      		pop rax
   489 0000025D 8EC0                    		mov es,eax
   490 0000025F 58                      		pop rax
   491 00000260 83C404                  		add		esp,4			; int 0x0d では、これが忁e��e
   492 00000263 48                      		db 0x48
   493 00000264 CF                      		iret
   494                                  
   495                                  asm_inthandler0e:
   496 00000265 FB                      		sti
   497 00000266 50                      		push rax
   498 00000267 8CC0                    		mov eax,es
   499 00000269 50                      		push rax
   500 0000026A 8CD8                    		mov eax,ds
   501 0000026C 50                      		push rax
   502                                  		
   503 0000026D 50                      		push rax
   504 0000026E 51                      		push rcx
   505 0000026F 52                      		push rdx
   506 00000270 53                      		push rbx
   507 00000271 56                      		push rsi
   508 00000272 57                      		push rdi
   509 00000273 55                      		push rbp
   510 00000274 4150                    		push r8
   511 00000276 4151                    		push r9
   512 00000278 4152                    		push r10
   513 0000027A 4153                    		push r11
   514 0000027C 4154                    		push r12
   515 0000027E 4155                    		push r13
   516 00000280 4156                    		push r14
   517 00000282 4157                    		push r15
   518                                  		
   519 00000284 4889E1                  		mov		rcx,rsp
   520 00000287 668CD0                  		mov		ax,ss
   521 0000028A 8ED8                    		mov		ds,ax
   522 0000028C 8EC0                    		mov		es,ax
   523 0000028E 0F20D2                  		mov 	rdx,cr2 ;保存现场
   524 00000291 50                      		push 	rax
   525 00000292 E8(00000000)            		call	inthandler0e
   526 00000297 83F800                  		cmp		eax,0
   527 0000029A 0F85B4000000            		jne		asm_end_app
   528 000002A0 415F                    		pop r15
   529 000002A2 415E                    		pop r14
   530 000002A4 415D                    		pop r13
   531 000002A6 415C                    		pop r12
   532 000002A8 415B                    		pop r11
   533 000002AA 415A                    		pop r10
   534 000002AC 4159                    		pop r9
   535 000002AE 4158                    		pop r8
   536 000002B0 5D                      		pop rbp
   537 000002B1 5F                      		pop rdi
   538 000002B2 5E                      		pop rsi
   539 000002B3 5B                      		pop rbx
   540 000002B4 5A                      		pop rdx
   541 000002B5 59                      		pop rcx
   542 000002B6 58                      		pop rax
   543                                  		
   544 000002B7 58                      		pop rax
   545 000002B8 8ED8                    		mov ds,eax
   546 000002BA 58                      		pop rax
   547 000002BB 8EC0                    		mov es,eax
   548 000002BD 58                      		pop rax
   549 000002BE 83C404                  		add		esp,4
   550 000002C1 48                      		db 0x48
   551 000002C2 CF                      		iret
   552                                  memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   553 000002C3 57                      		push	rdi						; �e�ebx, esi, edi も使ぁe��ぁe�eで�e�e
   554 000002C4 56                      		push	rsi
   555 000002C5 53                      		push	rbx
   556 000002C6 BE55AA55AA              		mov		esi,0xaa55aa55			; pat0 = 0xaa55aa55;
   557 000002CB BFAA55AA55              		mov		edi,0x55aa55aa			; pat1 = 0x55aa55aa;
   558 000002D0 8B442410                		mov		eax,[rsp+12+4]			; i = start;
   559                                  mts_loop:
   560 000002D4 89C3                    		mov		ebx,eax
   561 000002D6 81C3FC0F0000            		add		ebx,0xffc				; p = i + 0xffc;
   562 000002DC 678B13                  		mov		edx,[ebx]				; old = *p;
   563 000002DF 678933                  		mov		[ebx],esi				; *p = pat0;
   564 000002E2 678333FF                		xor		dword [ebx],0xffffffff	; *p ^= 0xffffffff;
   565 000002E6 673B3B                  		cmp		edi,[ebx]				; if (*p != pat1) goto fin;
   566 000002E9 751B                    		jne		mts_fin
   567 000002EB 678333FF                		xor		dword [ebx],0xffffffff	; *p ^= 0xffffffff;
   568 000002EF 673B33                  		cmp		esi,[ebx]				; if (*p != pat0) goto fin;
   569 000002F2 7512                    		jne		mts_fin
   570 000002F4 678913                  		mov		[ebx],edx				; *p = old;
   571 000002F7 0500100000              		add		eax,0x1000				; i += 0x1000;
   572 000002FC 3B442414                		cmp		eax,[rsp+12+8]			; if (i <= end) goto mts_loop;
   573 00000300 76D2                    		jbe		mts_loop
   574 00000302 5B                      		pop		rbx
   575 00000303 5E                      		pop		rsi
   576 00000304 5F                      		pop		rdi
   577 00000305 C3                      		ret
   578                                  mts_fin:
   579 00000306 678913                  		mov		[ebx],edx				; *p = old;
   580 00000309 5B                      		pop		rbx
   581 0000030A 5E                      		pop		rsi
   582 0000030B 5F                      		pop		rdi
   583 0000030C C3                      		ret
   584                                  
   585                                  farjmp:		; void farjmp(int eip, int cs);
   586 0000030D 48FF6C2408              		jmp		far	[rsp+ip_size]				; eip, cs
   587 00000312 C3                      		ret
   588                                  
   589                                  farcall:		; void farcall(int eip, int cs);
   590 00000313 48FF5C2408              		call	far	[rsp+ip_size]				; eip, cs
   591 00000318 C3                      		ret
   592                                  
   593                                  asm_hrb_api:
   594 00000319 FB                      		sti
   595 0000031A 8CC0                    		mov eax,es
   596 0000031C 50                      		push rax
   597 0000031D 8CD8                    		mov eax,ds
   598 0000031F 50                      		push rax
   599                                  		
   600                                  
   601 00000320 50                      		push rax
   602 00000321 51                      		push rcx
   603 00000322 52                      		push rdx
   604 00000323 53                      		push rbx
   605 00000324 56                      		push rsi
   606 00000325 57                      		push rdi
   607 00000326 55                      		push rbp
   608 00000327 54                      		push rsp; 保存�eためのpush
   609                                  		
   610                                  
   611 00000328 50                      		push rax
   612 00000329 51                      		push rcx
   613 0000032A 52                      		push rdx
   614 0000032B 53                      		push rbx
   615 0000032C 56                      		push rsi
   616 0000032D 57                      		push rdi
   617 0000032E 55                      		push rbp
   618 0000032F 54                      		push rsp; hrb_apiにわたすため�epush
   619 00000330 668CD0                  		mov		ax,ss
   620 00000333 8ED8                    		mov		ds,ax		; os用のセグメントをdsとesにも�eれる
   621 00000335 8EC0                    		mov		es,ax
   622 00000337 E8(00000000)            		call	hrb_api
   623 0000033C 83F800                  		cmp		eax,0		; eaxぁeでなければアプリ終亁e�e琁e
   624 0000033F 7513                    		jne		asm_end_app
   625 00000341 83C420                  		add		esp,32
   626                                  		
   627 00000344 5C                      		pop rsp
   628 00000345 5D                      		pop rbp
   629 00000346 5F                      		pop rdi
   630 00000347 5E                      		pop rsi
   631 00000348 5B                      		pop rbx
   632 00000349 5A                      		pop rdx
   633 0000034A 59                      		pop rcx
   634 0000034B 58                      		pop rax
   635                                  		
   636 0000034C 58                      		pop rax
   637 0000034D 8ED8                    		mov ds,eax
   638 0000034F 58                      		pop rax
   639 00000350 8EC0                    		mov es,eax
   640 00000352 48                      		db 0x48
   641 00000353 CF                      		iret
   642                                  asm_end_app:
   643                                  ;	eaxはtss.esp0の番地
   644 00000354 488B20                  		mov		rsp,[rax]
   645 00000357 67C7400400000000        		mov		dword [eax+4],0
   646 0000035F 5C                      		pop rsp
   647 00000360 5D                      		pop rbp
   648 00000361 5F                      		pop rdi
   649 00000362 5E                      		pop rsi
   650 00000363 5B                      		pop rbx
   651 00000364 5A                      		pop rdx
   652 00000365 59                      		pop rcx
   653 00000366 58                      		pop rax
   654 00000367 C3                      		ret					; cmd_appへ帰めe
   655                                  
   656                                  start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   657 00000368 50                      		push rax
   658 00000369 51                      		push rcx
   659 0000036A 52                      		push rdx
   660 0000036B 53                      		push rbx
   661 0000036C 56                      		push rsi
   662 0000036D 57                      		push rdi
   663 0000036E 55                      		push rbp
   664 0000036F 54                      		push rsp		; 32ビットレジスタを�e部保存しておく
   665                                  		
   666 00000370 488B6C2448              		mov		rbp,[rsp+ip_size+gpr_size*8]	; tss.esp0の番地
   667 00000375 48896500                		mov		[rbp  ],rsp		; os用のespを保孁e
   668 00000379 8C5508                  		mov		[rbp+8],ss		; os用のssを保孁e
   669 0000037C 418EC1                  		mov		es,r9d
   670 0000037F 418ED9                  		mov		ds,r9d
   671 00000382 418EE1                  		mov		fs,r9d
   672 00000385 418EE9                  		mov		gs,r9d
   673                                  		;db 0x0f,0x35;sys_ret
   674                                  ;	以下�eretfでアプリに行かせるためのスタチe��調整
   675 00000388 83C803                  		or		eax,3			; アプリ用のセグメント番号に3をorする
   676 0000038B 83CB03                  		or		ebx,3			; アプリ用のセグメント番号に3をorする
   677 0000038E 4151                    		push	r9				; アプリのss
   678 00000390 4150                    		push	r8				; アプリのesp
   679 00000392 52                      		push	rdx				; アプリのcs
   680 00000393 51                      		push	rcx				; アプリのeip
   681 00000394 CB                      		retf
   682                                  ;	アプリが終亁e��てもここには来なぁe
   683                                  
   684                                  ; int strcmp(const char *s1, const char *s2)
   685                                  asm_strcmp:
   686 00000395 4889CE                      mov rsi, rcx  ; s1 -> rsi
   687 00000398 4889D7                      mov rdi, rdx  ; s2 -> rdi
   688 0000039B FC                          cld           ; 确保DF标志位为0，正向扫描
   689 0000039C B000                        mov al, 0     ; 设置终止字符
   690 0000039E F3A6                        repe cmpsb    ; 比较直到发现不同的字节或遇到'\0'
   691 000003A0 0FB646FF                    movzx eax, byte [rsi - 1]
   692 000003A4 0FB657FF                    movzx edx, byte [rdi - 1]
   693 000003A8 29D0                        sub eax, edx  ; 计算差值
   694 000003AA C3                          ret
   695                                  
   696                                  ; char* strcpy(char *dest, const char *src)
   697                                  asm_strcpy:
   698 000003AB 4889D7                      mov rdi, rdx  ; src -> rdi
   699 000003AE 51                      	push rcx
   700 000003AF 48C7C1FFFFFFFF              mov rcx, -1   ; 计数器初始化为 -1
   701 000003B6 30C0                        xor al, al    ; 终止字符 '\0'
   702 000003B8 FC                          cld
   703 000003B9 F2AE                        repne scasb   ; 计算 src 的长度，包括 '\0'
   704 000003BB 48F7D1                      not rcx       ; 计算实际长度（包含 '\0'）
   705 000003BE 4889D6                      mov rsi, rdx  ; src -> rsi
   706 000003C1 5F                      	pop rdi		  ; dest -> rdi
   707 000003C2 4889C9                      mov rcx, rcx  ; 设置复制的字节数
   708 000003C5 F3A4                        rep movsb     ; 复制整个字符串
   709 000003C7 4889C8                      mov rax, rcx  ; 返回 dest
   710 000003CA C3                          ret
   711                                  
   712                                  ; int memcmp(const void *s1, const void *s2, size_t n)
   713                                  asm_memcmp:
   714 000003CB 4889CE                      mov rsi, rcx  ; s1 -> rsi
   715 000003CE 4889D7                      mov rdi, rdx  ; s2 -> rdi
   716 000003D1 4C89C1                      mov rcx, r8   ; n -> rcx
   717 000003D4 FC                          cld
   718 000003D5 F3A6                        repe cmpsb    ; 比较 n 字节
   719 000003D7 7503                        jne .diff
   720 000003D9 31C0                        xor eax, eax  ; 若相等，返回0
   721 000003DB C3                          ret
   722                                  .diff:
   723 000003DC 0FB646FF                    movzx eax, byte [rsi - 1]
   724 000003E0 0FB657FF                    movzx edx, byte [rdi - 1]
   725 000003E4 29D0                        sub eax, edx  ; 计算差值
   726 000003E6 C3                          ret
   727                                  
   728                                  ; void* memcpy(void *dest, const void *src, size_t n)
   729                                  asm_memcpy:
   730 000003E7 4889D6                      mov rsi, rdx  ; src -> rsi
   731 000003EA 4889CF                      mov rdi, rcx  ; dest -> rdi
   732 000003ED 4C89C1                      mov rcx, r8   ; n -> rcx
   733 000003F0 FC                          cld
   734 000003F1 F3A4                        rep movsb     ; 复制 n 字节
   735 000003F3 4889C8                      mov rax, rcx  ; 返回 dest
   736 000003F6 C3                          ret
   737                                  	
   738                                  asm_memset:	;void memset(char* s,int num,int longer)
   739 000003F7 57                      	push rdi
   740 000003F8 50                      	push rax
   741 000003F9 51                      	push rcx
   742 000003FA 488B7C2408              	mov rdi,[rsp+ip_size]
   743 000003FF 488B442410              	mov rax,[rsp+ip_size+gpr_size]
   744 00000404 488B4C2418              	mov rcx,[rsp+ip_size+gpr_size*2]
   745 00000409 F3AA                    	rep stosb
   746 0000040B 59                      	pop rcx
   747 0000040C 58                      	pop rax
   748 0000040D 5F                      	pop rdi
   749 0000040E C3                      	ret
   750                                  support_apic: ;int support_apic(void):
   751 0000040F 52                      	push rdx
   752 00000410 B801000000              	mov eax,1
   753                                  	;db 0x0f,0xa2 ;cpuid 
   754 00000415 0FA2                    	cpuid
   755 00000417 0FBAE209                	bt edx,9
   756 0000041B 0F92C0                  	setc al
   757 0000041E 480FB6C0                	movzx rax,al
   758 00000422 5A                      	pop rdx
   759 00000423 C3                      	ret
   760                                  io_rdmsr: ;void io_rdmsr(unsigned long long ecx,unsigned long long* edx,unsigned long long* eax)
   761                                  	;db 0x0f,0x32 ;rdmsr
   762 00000424 52                      	push rdx
   763 00000425 0F32                    	rdmsr
   764 00000427 418900                  	mov [r8],eax
   765 0000042A 58                      	pop rax
   766 0000042B 8910                    	mov [rax],edx
   767 0000042D C3                      	ret
   768                                  io_wrmsr: ;void io_wrmsr(unsigned long long ecx,unsigned long long edx,unsigned long long eax)
   769                                  	;db 0x0f,0x30 ;wrmsr
   770 0000042E 4C89C0                  	mov rax,r8
   771 00000431 0F30                    	wrmsr
   772 00000433 C3                      	ret
   773                                  test2: ;void test(int eax,int ebx)
   774 00000434 50                      	push rax
   775 00000435 53                      	push rbx
   776 00000436 8B442418                	mov eax,[rsp+ip_size+gpr_size*2]
   777 0000043A 8B5C2420                	mov ebx,[rsp+ip_size+gpr_size*3]
   778 0000043E 0F0B                    	db 0x0f,0x0b ;ud2
   779                                  .fin:
   780 00000440 FA                      	cli
   781 00000441 F4                      	hlt
   782 00000442 EBFC                    	jmp .fin
   783 00000444 5B                      	pop rbx
   784 00000445 58                      	pop rax
   785 00000446 C3                      	ret
   786                                  get_lock: ;int get_lock(int* lock,int bit)
   787 00000447 F00FAB11                	lock bts dword [rcx],edx
   788 0000044B 4831C0                  	xor rax,rax
   789 0000044E 11C0                    	adc eax,eax
   790 00000450 C3                      	ret
   791                                  store_gdt: ;void store_gdt(void* addr)
   792 00000451 0F0101                  	sgdt [rcx]
   793 00000454 C3                      	ret
   794                                  store_idt: ;void store_gdt(void* addr)
   795 00000455 0F0109                  	sidt [rcx]
   796 00000458 C3                      	ret
   797                                  sys_reboot: ;void sys_reboot(void)
   798 00000459 FA                      	cli
   799 0000045A 0F20C0                  	mov rax,cr0
   800 0000045D 66BA6400                	mov dx,0x64
   801 00000461 66B8FE00                	mov ax,0xfe
   802 00000465 66EF                    	out dx,ax
   803                                  .fin:
   804 00000467 F4                      	hlt
   805 00000468 EBFD                    	jmp .fin
   806                                  sys_call:
   807 0000046A 0F35                    	db 0x0f,0x35 ;sysexit
   808                                  test3:
   809 0000046C F4                      	db 0xf4
   810                                  .fin:
   811 0000046D EBFE                    	jmp .fin
   812                                  support_rand: ;int support_rand()
   813 0000046F 31C0                    	xor eax,eax
   814 00000471 FFC0                    	inc eax
   815 00000473 C3                      	ret
   816                                  	
   817 00000474 53                      	push rbx
   818 00000475 51                      	push rcx
   819 00000476 52                      	push rdx
   820 00000477 B801000000              	mov eax,1
   821 0000047C 0FA2                    	db 0x0f,0xa2 ;cpuid
   822 0000047E 81E100000040            	and ecx,0x40000000
   823 00000484 0F92C0                  	db 0x0f,0x92,0xc0;setc al
   824 00000487 5A                      	pop rdx
   825 00000488 59                      	pop rcx
   826 00000489 5B                      	pop rbx
   827 0000048A C3                      	ret
   828                                  rdrand: ;int rdrand()
   829 0000048B 0FC7F0                  	db 0x0f,0xc7,0xf0 ;rdrand eax
   830 0000048E 0FC7F0                  	rdrand eax
   831 00000491 C3                      	ret
   832                                  _invlpg:
   833 00000492 C3                      	ret
   834                                  tpm_init:
   835                                  	;初始化tpm
   836 00000493 50                      	push rax
   837 00000494 B800F00600                  mov eax, 0x6f000
   838 00000499 8904250000D4FE              mov dword [tpm_command], eax
   839          ******************       warning: dword data exceeds bounds
   840 000004A0 E802000000                  call tpm_wait_for_status
   841 000004A5 58                      	pop rax
   842 000004A6 C3                      	ret
   843                                  tpm_get_a_key:
   844                                  	
   845                                  tpm_wait_for_status:
   846                                          ;等待tpm状态就绪
   847 000004A7 8B04251400D4FE                  mov eax, dword [tpm_status]
   848          ******************       warning: dword data exceeds bounds
   849 000004AE 2500008001                      and eax, 0x01800000
   850 000004B3 3D00008000                      cmp eax, 0x00800000
   851 000004B8 75ED                            jne tpm_wait_for_status
   852 000004BA C3                      		ret
   853                                  sys_nop:
   854 000004BB 90                      	nop
   855 000004BC C3                      	ret
   856                                  ;unsigned int asm_sse_strcmp(char* str,char* str,unsigned,int longer)
   857                                  asm_sse_strcmp:
   858 000004BD 55                      	push rbp
   859 000004BE 4889E5                  	mov rbp,rsp
   860                                  	
   861 000004C1 4889C8                  	mov rax,rcx
   862                                  	;mov edx,rdx
   863 000004C4 4C89C1                  	mov rcx,r8
   864 000004C7 53                      	push rbx
   865 000004C8 56                      	push rsi
   866 000004C9 57                      	push rdi
   867 000004CA 4889C6                  	mov rsi,rax
   868 000004CD 4889D7                  	mov rdi,rdx
   869 000004D0 4889CA                  	mov rdx,rcx
   870                                  	;清零计数器
   871 000004D3 4831DB                  	xor rbx,rbx 
   872 000004D6 0F06                    	clts
   873 000004D8 660FEFD2                	pxor xmm2,xmm2
   874                                  .lp:
   875 000004DC 0F06                    	clts
   876                                  	;将字符串剩余长度读入
   877                                  	;lea eax,[edx-ebx]
   878 000004DE 4889D0                  	mov rax,rdx
   879 000004E1 4829D8                  	sub rax,rbx
   880 000004E4 4889C1                  	mov rcx,rax
   881 000004E7 F30F6F041E              	movdqu xmm0, [rsi+rbx]
   882 000004EC F30F6F0C1F              	movdqu xmm1, [rdi+rbx]
   883 000004F1 660F3A61C118            	pcmpestri xmm0,xmm1,0x18
   884                                  	;不是16证明有不一样的部分
   885 000004F7 4883F910                	cmp rcx,16
   886 000004FB 752E                    	jne .fin
   887                                  	
   888                                  	;检查两个字符串中是否有0 如果有 证明其中一个字符串已经结束
   889 000004FD 4889CB                  	mov rbx,rcx
   890 00000500 660F3A63C204            	pcmpistri xmm0,xmm2,0x04
   891                                  	;如果不是16 证明有一个字符是空字符 字符串结束
   892 00000506 4883F910                	cmp rcx,16
   893 0000050A 7517                    	jne .fin2
   894                                  	
   895 0000050C 660F3A63CA04            	pcmpistri xmm1,xmm2,0x04
   896                                  	;如果不是16 证明有一个字符是空字符 字符串结束
   897 00000512 4883F910                	cmp rcx,16
   898 00000516 750B                    	jne .fin2
   899                                  	
   900 00000518 4883C310                	add rbx,16
   901                                  	;最后 比较是否达到了界限值
   902 0000051C 4839DA                  	cmp rdx,rbx
   903 0000051F 7602                    	jbe .fin2
   904                                  	
   905 00000521 EBB9                    	jmp .lp
   906                                  .fin2:
   907                                  	;没有异常
   908 00000523 4831C0                  	xor rax,rax
   909 00000526 5F                      	pop rdi
   910 00000527 5E                      	pop rsi
   911 00000528 5B                      	pop rbx
   912 00000529 5D                      	pop rbp
   913 0000052A C3                      	ret
   914                                  .fin:
   915 0000052B 488D040B                	lea rax,[rbx+rcx]
   916 0000052F 48FFC0                  	inc rax
   917                                  	
   918 00000532 660F3A63C118            	pcmpistri xmm0,xmm1,0x18
   919                                  	;最后判断一次是不是遇到了字符串结尾
   920 00000538 4883F910                	cmp rcx,16
   921 0000053C 74E5                    	je .fin2
   922                                  	
   923 0000053E 5F                      	pop rdi
   924 0000053F 5E                      	pop rsi
   925 00000540 5B                      	pop rbx
   926 00000541 5D                      	pop rbp
   927 00000542 C3                      	ret
   928                                  ;asm_sse_strtest(char* str,char test[16])
   929                                  _asm_sse_strtest:
   930 00000543 55                      	push rbp
   931 00000544 4889E5                  	mov rbp,rsp
   932 00000547 4889C8                  	mov rax,rcx
   933                                  	;mov rdx,[rbp+gpr_size*3]
   934 0000054A 53                      	push rbx
   935 0000054B 56                      	push rsi
   936 0000054C 57                      	push rdi
   937 0000054D 67F30F6F0A              	movdqu xmm1,[edx]
   938                                  	;清零计数器
   939 00000552 4831C0                  	xor rax,rax 
   940 00000555 0F06                    	clts
   941 00000557 660FEFD2                	pxor xmm2,xmm2
   942                                  .lp:
   943 0000055B 0F06                    	clts
   944 0000055D 67F30F6F0406            	movdqu xmm0, [esi+eax]
   945 00000563 660F3A63C114            	pcmpistri xmm0,xmm1,0x14
   946 00000569 4883F910                	cmp rcx,16
   947                                  	;0
   948 0000056D 7518                    	jne .fin
   949                                  	
   950 0000056F 4889CB                  	mov rbx,rcx
   951 00000572 660F3A63C204            	pcmpistri xmm0,xmm2,0x04
   952                                  	;如果是16 证明没有任何一个字符是空字符 字符串没有结束
   953 00000578 4883F910                	cmp rcx,16
   954 0000057C 7506                    	jne .fin2
   955                                  	
   956 0000057E 4883C010                	add rax,16
   957 00000582 EBD7                    	jmp .lp
   958                                  .fin2:
   959 00000584 4889D8                  	mov rax,rbx
   960                                  .fin:
   961 00000587 4801C8                  	add rax,rcx
   962 0000058A 5F                      	pop rdi
   963 0000058B 5E                      	pop rsi
   964 0000058C 5B                      	pop rbx
   965 0000058D 5D                      	pop rbp
   966 0000058E C3                      	ret
   967                                  ;asm_task_switch32(unsigned int *old_esp,unsigned int *new_esp)
   968                                  asm_task_switch32:
   969 0000058F 55                      	push rbp
   970                                  	;mov ecx,[rbp+8]
   971                                  	;mov edx,[rbp+12]
   972 00000590 E802000000              	call .start
   973                                  	;恢复环境的代码
   974 00000595 5D                      	pop rbp
   975 00000596 C3                      	ret
   976                                  .start:
   977                                  	;保存环境的代码
   978 00000597 53                      	push rbx
   979 00000598 56                      	push rsi
   980 00000599 57                      	push rdi
   981 0000059A 55                      	push rbp
   982                                  	;cr3
   983 0000059B 0F20D8                  	mov rax,cr3
   984 0000059E 50                      	push rax
   985 0000059F 4831C0                  	xor rax,rax
   986                                  	;flags
   987 000005A2 9C                      	pushfq
   988                                  	;tr
   989 000005A3 50                      	push rax
   990 000005A4 0F000C24                	str [rsp]
   991                                  	;ldtr
   992 000005A8 50                      	push rax
   993 000005A9 0F000424                	sldt [rsp]
   994                                  	;64位被调用者寄存器
   995 000005AD 4154                    	push r12
   996 000005AF 4155                    	push r13
   997 000005B1 4156                    	push r14
   998 000005B3 4157                    	push r15
   999 000005B5 488921                  	mov [rcx],rsp
  1000                                  	;加载环境的代码
  1001 000005B8 488B22                  	mov rsp,[rdx]
  1002 000005BB 415F                    	pop r15
  1003 000005BD 415E                    	pop r14
  1004 000005BF 415D                    	pop r13
  1005 000005C1 415C                    	pop r12
  1006                                  	;ldtr
  1007 000005C3 0F001424                	lldt [rsp]
  1008 000005C7 58                      	pop rax
  1009                                  	;tr
  1010                                  	;ltr [esp]
  1011 000005C8 58                      	pop rax
  1012                                  	;flags
  1013 000005C9 9D                      	popfq
  1014                                  	;cr3
  1015 000005CA 58                      	pop rax
  1016 000005CB 0F22D8                  	mov cr3,rax
  1017 000005CE 5D                      	pop rbp
  1018 000005CF 5F                      	pop rdi
  1019 000005D0 5E                      	pop rsi
  1020 000005D1 5B                      	pop rbx
  1021 000005D2 C3                      	ret
  1022                                  bits 32
  1023                                  ;asm_task_switch32_2(unsigned int *old_esp,tss32 *new_esp)
  1024                                  asm_task_switch32_2:
  1025 000005D3 55                      	push ebp
  1026 000005D4 89E5                    	mov ebp,esp
  1027 000005D6 8B4D08                  	mov ecx,[ebp+8]
  1028 000005D9 8B550C                  	mov edx,[ebp+12]
  1029 000005DC E802000000              	call .start
  1030                                  	;恢复环境的代码
  1031 000005E1 5D                      	pop ebp
  1032 000005E2 C3                      	ret
  1033                                  .start:
  1034                                  	;保存环境的代码
  1035 000005E3 53                      	push ebx
  1036 000005E4 56                      	push esi
  1037 000005E5 57                      	push edi
  1038 000005E6 55                      	push ebp
  1039 000005E7 0F20D8                  	mov eax,cr3
  1040 000005EA 50                      	push eax
  1041 000005EB 9C                      	pushfd
  1042 000005EC 50                      	push eax
  1043 000005ED 8921                    	mov [ecx],esp
  1044                                  	;加载环境的代码
  1045 000005EF 8B02                    	mov eax,[edx]
  1046 000005F1 8B503C                  	mov edx,[eax+15*4]
  1047 000005F4 89D5                    	mov ebp,edx
  1048 000005F6 8B5040                  	mov edx,[eax+16*4]
  1049 000005F9 89D6                    	mov esi,edx
  1050 000005FB 8B5044                  	mov edx,[eax+17*4]
  1051 000005FE 89D7                    	mov edi,edx
  1052 00000600 8B5048                  	mov edx,[eax+18*4]
  1053 00000603 8EC2                    	mov es,edx
  1054 00000605 8B5058                  	mov edx,[eax+22*4]
  1055 00000608 8EE2                    	mov fs,edx
  1056 0000060A 8B505C                  	mov edx,[eax+23*4]
  1057 0000060D 8EEA                    	mov gs,edx
  1058 0000060F 89C4                    	mov esp,eax
  1059 00000611 61                      	popad
  1060 00000612 CB                      	retf
  1061 00000613 C3                      	ret
  1062                                  bits 64
  1063                                  ;void asm_vmptrld(unsigned int vmcs_point)
  1064                                  global asm_vmptrld
  1065                                  asm_vmptrld:
  1066 00000614 0FC731                  	vmptrld [rcx]
  1067 00000617 C3                      	ret
  1068                                  ;void asm_vmptrst(unsigned int* vmcs_point)
  1069                                  global asm_vmptrst
  1070                                  asm_vmptrst:
  1071 00000618 0FC739                  	vmptrst [rcx]
  1072 0000061B C3                      	ret
  1073                                  ;void asm_vmclear(unsigned int vmcs_point)
  1074                                  global asm_vmclear
  1075                                  asm_vmclear:
  1076 0000061C 660FC731                	vmclear [rcx]
  1077 00000620 C3                      	ret
  1078                                  ;unsigned long long asm_vmread(unsigned int index)
  1079                                  global asm_vmread
  1080                                  asm_vmread:
  1081 00000621 0F78C8                  	vmread rax,rcx
  1082 00000624 C3                      	ret
  1083                                  ;void asm_vmread(unsigned int index,void data)
  1084                                  global asm_vmwrite
  1085                                  asm_vmwrite:
  1086 00000625 0F79CA                  	vmwrite rcx,rdx
  1087 00000628 C3                      	ret
  1088                                  global asm_vmxon
  1089                                  asm_vmxon:
  1090 00000629 F30FC731                	vmxon [rcx]
  1091                                  asm_x64_cs_init:
  1092 0000062D 48                      	db 0x48
  1093 0000062E CB                      	retf
  1094                                  asm_get_cs:
  1095 0000062F 8CC8                    	mov rax,cs
  1096 00000631 C3                      	ret
  1097                                  global asm_vmlaunch
  1098                                  asm_vmlaunch:
  1099 00000632 0F01C2                  	vmlaunch
  1100 00000635 C3                      	ret
  1101                                  global asm_vmresume
  1102                                  asm_vmresume:
  1103 00000636 0F01C3                  	vmresume
  1104 00000639 C3                      	ret	
  1105                                  ;void asm_sheet_refreshsub32(void* struct SHEET_REFRESH_PACK_32 pack);
  1106                                  asm_sheet_refreshsub32:
  1107 0000063A FA                      	cli
  1108 0000063B 53                      	push rbx
  1109 0000063C 56                      	push rsi
  1110 0000063D 57                      	push rdi
  1111 0000063E 4154                    	push r12
  1112 00000640 4155                    	push r13
  1113 00000642 4156                    	push r14
  1114 00000644 4157                    	push r15
  1115 00000646 488B31                  	mov rsi,[rcx];源变址
  1116 00000649 488B7908                	mov rdi,[rcx+8];目的变址
  1117 0000064D 4C8B4110                	mov r8,[rcx+16];源图层宽度
  1118 00000651 4C8B4918                	mov r9,[rcx+24];目的图层宽度
  1119 00000655 4C8B5120                	mov r10,[rcx+32];刷新窗口宽度
  1120 00000659 4C8B5928                	mov r11,[rcx+40];刷新窗口高度
  1121 0000065D 4C8B6130                	mov r12,[rcx+48];sid_addr
  1122 00000661 4C8B6938                	mov r13,[rcx+56];sid
  1123 00000665 4489693C                	mov [rcx+56+4],r13d;低端32位sid数据复制到高32位
  1124 00000669 4C8B6938                	mov r13,[rcx+56];sid
  1125 0000066D 4C896940                	mov [rcx+64],r13;sid
  1126 00000671 F30F6F6138              	movdqu xmm4,[rcx+56]
  1127 00000676 4831C0                  	xor rax,rax
  1128 00000679 4831D2                  	xor rdx,rdx
  1129                                  	
  1130                                  .start:	
  1131 0000067C F30F6F0C86              	movdqu xmm1,[rsi+rax*4]
  1132 00000681 F30F6F1487              	movdqu xmm2,[rdi+rax*4]
  1133 00000686 F3410F6F1C84            	movdqu xmm3,[r12+rax*4];sid序列
  1134 0000068C 0FC2DC00                	cmpps xmm3,xmm4,0
  1135 00000690 660FDBCB                	pand xmm1,xmm3;清空无效数据
  1136 00000694 660FDFDA                	pandn xmm3,xmm2;清空无效数据
  1137 00000698 660FEBCB                	por xmm1,xmm3;混合
  1138 0000069C F30F7F0C87              	movdqu [rdi+rax*4],xmm1
  1139 000006A1 83C004                  	add eax,4
  1140 000006A4 4C39D0                  	cmp rax,r10
  1141 000006A7 72D3                    	jb .start
  1142 000006A9 7420                    	je .fin;正好相等
  1143 000006AB 83E804                  	sub eax,4
  1144                                  .continued:
  1145                                  	;这里说明本行剩下的不足4个像素
  1146 000006AE 8B1C86                  	mov ebx,[rsi+rax*4]
  1147 000006B1 448B3487                	mov r14d,[rdi+rax*4]
  1148 000006B5 458B3C84                	mov r15d,[r12+rax*4]
  1149 000006B9 4539EF                  	cmp r15d,r13d
  1150 000006BC 490F45DE                	cmovne rbx,r14
  1151 000006C0 891C87                  	mov [rdi+rax*4],ebx
  1152 000006C3 48FFC0                  	inc rax
  1153 000006C6 4C39D0                  	cmp rax,r10
  1154 000006C9 75E3                    	jne .continued
  1155                                  .fin:
  1156 000006CB 31C0                    	xor eax,eax
  1157 000006CD 48FFC2                  	inc rdx
  1158 000006D0 4A8D3486                	lea rsi,[rsi+r8*4]
  1159 000006D4 4A8D3C8F                	lea rdi,[rdi+r9*4]
  1160 000006D8 4F8D248C                	lea r12,[r12+r9*4]
  1161 000006DC 4C39DA                  	cmp rdx,r11
  1162 000006DF 729B                    	jb .start
  1163 000006E1 415F                    	pop r15
  1164 000006E3 415E                    	pop r14
  1165 000006E5 415D                    	pop r13
  1166 000006E7 415C                    	pop r12
  1167 000006E9 5F                      	pop rdi
  1168 000006EA 5E                      	pop rsi
  1169 000006EB 5B                      	pop rbx
  1170 000006EC FB                      	sti
  1171 000006ED C3                      	ret
  1172                                  
  1173                                  
  1174                                  ;void asm_sheet_refreshsub32a(void* struct SHEET_REFRESH_PACK_32 pack);
  1175                                  asm_sheet_refreshsub32a:
  1176 000006EE 53                      	push rbx
  1177 000006EF 56                      	push rsi
  1178 000006F0 57                      	push rdi
  1179 000006F1 4154                    	push r12
  1180 000006F3 4155                    	push r13
  1181 000006F5 4156                    	push r14
  1182 000006F7 4157                    	push r15
  1183 000006F9 488B31                  	mov rsi,[rcx];源变址
  1184 000006FC 488B7908                	mov rdi,[rcx+8];目的变址
  1185 00000700 4C8B4110                	mov r8,[rcx+16];源图层宽度
  1186 00000704 4C8B4918                	mov r9,[rcx+24];目的图层宽度
  1187 00000708 4C8B5120                	mov r10,[rcx+32];刷新窗口宽度
  1188 0000070C 4C8B5928                	mov r11,[rcx+40];刷新窗口高度
  1189 00000710 4C8B6130                	mov r12,[rcx+48];sid_addr
  1190 00000714 4C8B6938                	mov r13,[rcx+56];sid
  1191 00000718 660F126138              	movlpd xmm4,[rcx+56]
  1192 0000071D 660F70E400              	pshufd xmm4,xmm4,0;低端32位sid数据复制扩展到整个xmm
  1193 00000722 4831C0                  	xor rax,rax
  1194 00000725 4831D2                  	xor rdx,rdx
  1195                                  	
  1196                                  .start:	
  1197 00000728 660F6F0C86              	movdqa xmm1,[rsi+rax*4]
  1198 0000072D 660F6F1487              	movdqa xmm2,[rdi+rax*4]
  1199 00000732 66410F6F1C84            	movdqa xmm3,[r12+rax*4];sid序列
  1200 00000738 0FC2DC00                	cmpps xmm3,xmm4,0
  1201 0000073C 660FDBCB                	pand xmm1,xmm3;清空无效数据
  1202 00000740 660FDFDA                	pandn xmm3,xmm2;清空无效数据
  1203 00000744 660FEBCB                	por xmm1,xmm3;混合
  1204 00000748 660F7F0C87              	movdqa [rdi+rax*4],xmm1
  1205 0000074D 83C004                  	add eax,4
  1206 00000750 4C39D0                  	cmp rax,r10
  1207 00000753 72D3                    	jb .start
  1208 00000755 7420                    	je .fin;正好相等
  1209 00000757 83E804                  	sub eax,4
  1210                                  .continued:
  1211                                  	;这里说明本行剩下的不足4个像素
  1212 0000075A 8B1C86                  	mov ebx,[rsi+rax*4]
  1213 0000075D 448B3487                	mov r14d,[rdi+rax*4]
  1214 00000761 458B3C84                	mov r15d,[r12+rax*4]
  1215 00000765 4539EF                  	cmp r15d,r13d
  1216 00000768 490F45DE                	cmovne rbx,r14
  1217 0000076C 891C87                  	mov [rdi+rax*4],ebx
  1218 0000076F 48FFC0                  	inc rax
  1219 00000772 4C39D0                  	cmp rax,r10
  1220 00000775 75E3                    	jne .continued
  1221                                  .fin:
  1222 00000777 31C0                    	xor eax,eax
  1223 00000779 48FFC2                  	inc rdx
  1224 0000077C 4A8D3486                	lea rsi,[rsi+r8*4]
  1225 00000780 4A8D3C8F                	lea rdi,[rdi+r9*4]
  1226 00000784 4F8D248C                	lea r12,[r12+r9*4]
  1227 00000788 4C39DA                  	cmp rdx,r11
  1228 0000078B 729B                    	jb .start
  1229 0000078D 415F                    	pop r15
  1230 0000078F 415E                    	pop r14
  1231 00000791 415D                    	pop r13
  1232 00000793 415C                    	pop r12
  1233 00000795 5F                      	pop rdi
  1234 00000796 5E                      	pop rsi
  1235 00000797 5B                      	pop rbx
  1236 00000798 C3                      	ret
  1237                                  
  1238                                  extern console_task
  1239                                  global asm_console_task_start_64
  1240                                  ;这个函数的目的是因为x64架构下无法使用栈传递第一个和第二个参数 但是为了任务切换效率无法切换调用者保存寄存器 因此使用这个函数中转
  1241                                  asm_console_task_start_64:
  1242 00000799 488B4C2408              	mov rcx,[rsp+8]
  1243 0000079E 488B542410              	mov rdx,[rsp+16]
  1244 000007A3 E9(00000000)            	jmp console_task
