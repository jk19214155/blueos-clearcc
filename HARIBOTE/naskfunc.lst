     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_tr
    16 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    17 00000000                                 		GLOBAL	_asm_inthandler2c, _asm_inthandler0c
    18 00000000                                 		GLOBAL	_asm_inthandler0d, _asm_end_app
    19 00000000                                 		GLOBAL	_memtest_sub
    20 00000000                                 		GLOBAL	_farjmp, _farcall
    21 00000000                                 		GLOBAL	_asm_hrb_api, _start_app
    22 00000000                                 		;GLOBAL	_memset,_strcpy,_strcmp
    23 00000000                                 		global	_support_apic, _io_wrmsr, _io_rdmsr, _test2
    24 00000000                                 		EXTERN	_inthandler20, _inthandler21
    25 00000000                                 		EXTERN	_inthandler2c, _inthandler0d
    26 00000000                                 		EXTERN	_inthandler0c
    27 00000000                                 		EXTERN	_hrb_api
    28 00000000                                 
    29                                          [SECTION .text]
    30 00000000                                 
    31 00000000                                 _io_hlt:	; void io_hlt(void);
    32 00000000 F4                              		HLT
    33 00000001 C3                              		RET
    34 00000002                                 
    35 00000002                                 _io_cli:	; void io_cli(void);
    36 00000002 FA                              		CLI
    37 00000003 C3                              		RET
    38 00000004                                 
    39 00000004                                 _io_sti:	; void io_sti(void);
    40 00000004 FB                              		STI
    41 00000005 C3                              		RET
    42 00000006                                 
    43 00000006                                 _io_stihlt:	; void io_stihlt(void);
    44 00000006 FB                              		STI
    45 00000007 F4                              		HLT
    46 00000008 C3                              		RET
    47 00000009                                 
    48 00000009                                 _io_in8:	; int io_in8(int port);
    49 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    50 0000000D B8 00000000                     		MOV		EAX,0
    51 00000012 EC                              		IN		AL,DX
    52 00000013 C3                              		RET
    53 00000014                                 
    54 00000014                                 _io_in16:	; int io_in16(int port);
    55 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    56 00000018 B8 00000000                     		MOV		EAX,0
    57 0000001D 66 ED                           		IN		AX,DX
    58 0000001F C3                              		RET
    59 00000020                                 
    60 00000020                                 _io_in32:	; int io_in32(int port);
    61 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    62 00000024 ED                              		IN		EAX,DX
    63 00000025 C3                              		RET
    64 00000026                                 
    65 00000026                                 _io_out8:	; void io_out8(int port, int data);
    66 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    67 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    68 0000002E EE                              		OUT		DX,AL
    69 0000002F C3                              		RET
    70 00000030                                 
    71 00000030                                 _io_out16:	; void io_out16(int port, int data);
    72 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    73 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    74 00000038 66 EF                           		OUT		DX,AX
    75 0000003A C3                              		RET
    76 0000003B                                 
    77 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    78 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    79 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    80 00000043 EF                              		OUT		DX,EAX
    81 00000044 C3                              		RET
    82 00000045                                 
    83 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    84 00000045 9C                              		PUSHFD		; PUSH EFLAGS という意味
    85 00000046 58                              		POP		EAX
    86 00000047 C3                              		RET
    87 00000048                                 
    88 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    89 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    90 0000004C 50                              		PUSH	EAX
    91 0000004D 9D                              		POPFD		; POP EFLAGS という意味
    92 0000004E C3                              		RET
    93 0000004F                                 
    94 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    95 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    96 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    97 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    98 0000005E C3                              		RET
    99 0000005F                                 
   100 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
   101 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   102 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   103 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   104 0000006E C3                              		RET
   105 0000006F                                 
   106 0000006F                                 _load_cr0:		; int load_cr0(void);
   107 0000006F 0F 20 C0                        		MOV		EAX,CR0
   108 00000072 C3                              		RET
   109 00000073                                 
   110 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   111 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   112 00000077 0F 22 C0                        		MOV		CR0,EAX
   113 0000007A C3                              		RET
   114 0000007B                                 
   115 0000007B                                 _load_tr:		; void load_tr(int tr);
   116 0000007B 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   117 00000080 C3                              		RET
   118 00000081                                 
   119 00000081                                 _asm_inthandler20:
   120 00000081 06                              		PUSH	ES
   121 00000082 1E                              		PUSH	DS
   122 00000083 60                              		PUSHAD
   123 00000084 89 E0                           		MOV		EAX,ESP
   124 00000086 50                              		PUSH	EAX
   125 00000087 66 8C D0                        		MOV		AX,SS
   126 0000008A 8E D8                           		MOV		DS,AX
   127 0000008C 8E C0                           		MOV		ES,AX
   128 0000008E E8 [00000000]                   		CALL	_inthandler20
   129 00000093 58                              		POP		EAX
   130 00000094 61                              		POPAD
   131 00000095 1F                              		POP		DS
   132 00000096 07                              		POP		ES
   133 00000097 CF                              		IRETD
   134 00000098                                 
   135 00000098                                 _asm_inthandler21:
   136 00000098 06                              		PUSH	ES
   137 00000099 1E                              		PUSH	DS
   138 0000009A 60                              		PUSHAD
   139 0000009B 89 E0                           		MOV		EAX,ESP
   140 0000009D 50                              		PUSH	EAX
   141 0000009E 66 8C D0                        		MOV		AX,SS
   142 000000A1 8E D8                           		MOV		DS,AX
   143 000000A3 8E C0                           		MOV		ES,AX
   144 000000A5 E8 [00000000]                   		CALL	_inthandler21
   145 000000AA 58                              		POP		EAX
   146 000000AB 61                              		POPAD
   147 000000AC 1F                              		POP		DS
   148 000000AD 07                              		POP		ES
   149 000000AE CF                              		IRETD
   150 000000AF                                 
   151 000000AF                                 _asm_inthandler2c:
   152 000000AF 06                              		PUSH	ES
   153 000000B0 1E                              		PUSH	DS
   154 000000B1 60                              		PUSHAD
   155 000000B2 89 E0                           		MOV		EAX,ESP
   156 000000B4 50                              		PUSH	EAX
   157 000000B5 66 8C D0                        		MOV		AX,SS
   158 000000B8 8E D8                           		MOV		DS,AX
   159 000000BA 8E C0                           		MOV		ES,AX
   160 000000BC E8 [00000000]                   		CALL	_inthandler2c
   161 000000C1 58                              		POP		EAX
   162 000000C2 61                              		POPAD
   163 000000C3 1F                              		POP		DS
   164 000000C4 07                              		POP		ES
   165 000000C5 CF                              		IRETD
   166 000000C6                                 
   167 000000C6                                 _asm_inthandler0c:
   168 000000C6 FB                              		STI
   169 000000C7 06                              		PUSH	ES
   170 000000C8 1E                              		PUSH	DS
   171 000000C9 60                              		PUSHAD
   172 000000CA 89 E0                           		MOV		EAX,ESP
   173 000000CC 50                              		PUSH	EAX
   174 000000CD 66 8C D0                        		MOV		AX,SS
   175 000000D0 8E D8                           		MOV		DS,AX
   176 000000D2 8E C0                           		MOV		ES,AX
   177 000000D4 E8 [00000000]                   		CALL	_inthandler0c
   178 000000D9 83 F8 00                        		CMP		EAX,0
   179 000000DC 0F 85 00000091                  		JNE		_asm_end_app
   180 000000E2 58                              		POP		EAX
   181 000000E3 61                              		POPAD
   182 000000E4 1F                              		POP		DS
   183 000000E5 07                              		POP		ES
   184 000000E6 83 C4 04                        		ADD		ESP,4			; INT 0x0c でも、これが必要
   185 000000E9 CF                              		IRETD
   186 000000EA                                 
   187 000000EA                                 _asm_inthandler0d:
   188 000000EA FB                              		STI
   189 000000EB 06                              		PUSH	ES
   190 000000EC 1E                              		PUSH	DS
   191 000000ED 60                              		PUSHAD
   192 000000EE 89 E0                           		MOV		EAX,ESP
   193 000000F0 50                              		PUSH	EAX
   194 000000F1 66 8C D0                        		MOV		AX,SS
   195 000000F4 8E D8                           		MOV		DS,AX
   196 000000F6 8E C0                           		MOV		ES,AX
   197 000000F8 E8 [00000000]                   		CALL	_inthandler0d
   198 000000FD 83 F8 00                        		CMP		EAX,0			; ここだけ違う
   199 00000100 75 71                           		JNE		_asm_end_app	; ここだけ違う
   200 00000102 58                              		POP		EAX
   201 00000103 61                              		POPAD
   202 00000104 1F                              		POP		DS
   203 00000105 07                              		POP		ES
   204 00000106 83 C4 04                        		ADD		ESP,4			; INT 0x0d では、これが必要
   205 00000109 CF                              		IRETD
   206 0000010A                                 
   207 0000010A                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   208 0000010A 57                              		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   209 0000010B 56                              		PUSH	ESI
   210 0000010C 53                              		PUSH	EBX
   211 0000010D BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   212 00000112 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   213 00000117 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   214 0000011B                                 mts_loop:
   215 0000011B 89 C3                           		MOV		EBX,EAX
   216 0000011D 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   217 00000123 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   218 00000125 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   219 00000127 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   220 0000012A 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   221 0000012C 75 18                           		JNE		mts_fin
   222 0000012E 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   223 00000131 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   224 00000133 75 11                           		JNE		mts_fin
   225 00000135 89 13                           		MOV		[EBX],EDX				; *p = old;
   226 00000137 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   227 0000013C 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   228 00000140 76 D9                           		JBE		mts_loop
   229 00000142 5B                              		POP		EBX
   230 00000143 5E                              		POP		ESI
   231 00000144 5F                              		POP		EDI
   232 00000145 C3                              		RET
   233 00000146                                 mts_fin:
   234 00000146 89 13                           		MOV		[EBX],EDX				; *p = old;
   235 00000148 5B                              		POP		EBX
   236 00000149 5E                              		POP		ESI
   237 0000014A 5F                              		POP		EDI
   238 0000014B C3                              		RET
   239 0000014C                                 
   240 0000014C                                 _farjmp:		; void farjmp(int eip, int cs);
   241 0000014C FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   242 00000150 C3                              		RET
   243 00000151                                 
   244 00000151                                 _farcall:		; void farcall(int eip, int cs);
   245 00000151 FF 5C 24 04                     		CALL	FAR	[ESP+4]				; eip, cs
   246 00000155 C3                              		RET
   247 00000156                                 
   248 00000156                                 _asm_hrb_api:
   249 00000156 FB                              		STI
   250 00000157 1E                              		PUSH	DS
   251 00000158 06                              		PUSH	ES
   252 00000159 60                              		PUSHAD		; 保存のためのPUSH
   253 0000015A 60                              		PUSHAD		; hrb_apiにわたすためのPUSH
   254 0000015B 66 8C D0                        		MOV		AX,SS
   255 0000015E 8E D8                           		MOV		DS,AX		; OS用のセグメントをDSとESにも入れる
   256 00000160 8E C0                           		MOV		ES,AX
   257 00000162 E8 [00000000]                   		CALL	_hrb_api
   258 00000167 83 F8 00                        		CMP		EAX,0		; EAXが0でなければアプリ終了処理
   259 0000016A 75 07                           		JNE		_asm_end_app
   260 0000016C 83 C4 20                        		ADD		ESP,32
   261 0000016F 61                              		POPAD
   262 00000170 07                              		POP		ES
   263 00000171 1F                              		POP		DS
   264 00000172 CF                              		IRETD
   265 00000173                                 _asm_end_app:
   266 00000173                                 ;	EAXはtss.esp0の番地
   267 00000173 8B 20                           		MOV		ESP,[EAX]
   268 00000175 C7 40 04 00000000               		MOV		DWORD [EAX+4],0
   269 0000017C 61                              		POPAD
   270 0000017D C3                              		RET					; cmd_appへ帰る
   271 0000017E                                 
   272 0000017E                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   273 0000017E 60                              		PUSHAD		; 32ビットレジスタを全部保存しておく
   274 0000017F 8B 44 24 24                     		MOV		EAX,[ESP+36]	; アプリ用のEIP
   275 00000183 8B 4C 24 28                     		MOV		ECX,[ESP+40]	; アプリ用のCS
   276 00000187 8B 54 24 2C                     		MOV		EDX,[ESP+44]	; アプリ用のESP
   277 0000018B 8B 5C 24 30                     		MOV		EBX,[ESP+48]	; アプリ用のDS/SS
   278 0000018F 8B 6C 24 34                     		MOV		EBP,[ESP+52]	; tss.esp0の番地
   279 00000193 89 65 00                        		MOV		[EBP  ],ESP		; OS用のESPを保存
   280 00000196 8C 55 04                        		MOV		[EBP+4],SS		; OS用のSSを保存
   281 00000199 8E C3                           		MOV		ES,BX
   282 0000019B 8E DB                           		MOV		DS,BX
   283 0000019D 8E E3                           		MOV		FS,BX
   284 0000019F 8E EB                           		MOV		GS,BX
   285 000001A1                                 ;	以下はRETFでアプリに行かせるためのスタック調整
   286 000001A1 83 C9 03                        		OR		ECX,3			; アプリ用のセグメント番号に3をORする
   287 000001A4 83 CB 03                        		OR		EBX,3			; アプリ用のセグメント番号に3をORする
   288 000001A7 53                              		PUSH	EBX				; アプリのSS
   289 000001A8 52                              		PUSH	EDX				; アプリのESP
   290 000001A9 51                              		PUSH	ECX				; アプリのCS
   291 000001AA 50                              		PUSH	EAX				; アプリのEIP
   292 000001AB CB                              		RETF
   293 000001AC                                 ;	アプリが終了してもここには来ない
   294 000001AC                                 _strcmp:	;int strcmp(char* s,char* t,int longer);
   295 000001AC 56                              	push esi;
   296 000001AD 57                              	push edi;
   297 000001AE 51                              	push ecx;
   298 000001AF 8B 74 24 04                     	mov esi,[esp+4]
   299 000001B3 8B 7C 24 08                     	mov edi,[esp+8]
   300 000001B7 8B 4C 24 0C                     	mov ecx,[esp+12]
   301 000001BB F2 A6                           	repne cmpsb
   302 000001BD 89 C8                           	mov eax,ecx
   303 000001BF 59                              	pop ecx
   304 000001C0 5F                              	pop edi
   305 000001C1 5E                              	pop esi
   306 000001C2 C3                              	ret
   307 000001C3                                 _strcpy:	;void strcpy(char* s,char* t,int longer);
   308 000001C3 56                              	push esi;
   309 000001C4 57                              	push edi;
   310 000001C5 51                              	push ecx;
   311 000001C6 8B 74 24 04                     	mov esi,[esp+4]
   312 000001CA 8B 7C 24 08                     	mov edi,[esp+8]
   313 000001CE 8B 4C 24 0C                     	mov ecx,[esp+12]
   314 000001D2 F3 A4                           	rep movsb
   315 000001D4 59                              	pop ecx
   316 000001D5 5F                              	pop edi
   317 000001D6 5E                              	pop esi
   318 000001D7 C3                              	ret
   319 000001D8                                 _memset:	;void memset(char* s,int num,int longer)
   320 000001D8 57                              	push edi
   321 000001D9 50                              	push eax
   322 000001DA 51                              	push ecx
   323 000001DB 8B 7C 24 04                     	mov edi,[esp+4]
   324 000001DF 8B 44 24 08                     	mov eax,[esp+8]
   325 000001E3 8B 4C 24 0C                     	mov ecx,[esp+12]
   326 000001E7 F3 AA                           	rep stosb
   327 000001E9 59                              	pop ecx
   328 000001EA 58                              	pop eax
   329 000001EB 5F                              	pop edi
   330 000001EC C3                              	ret
   331 000001ED                                 _support_apic: ;int support_apic(void):
   332 000001ED 52                              	push edx
   333 000001EE B8 00000001                     	mov eax,1
   334 000001F3                                 	cpuid 
   335 000001F3 0F BA E2 09                     	bt edx,9
   336 000001F7 0F 92 C0                        	setc al
   337 000001FA 0F B6 C0                        	movzx eax,al
   338 000001FD 5A                              	pop edx
   339 000001FE C3                              	ret
   340 000001FF                                 _io_rdmsr: ;void io_rdmsr(int* edx,int* eax,int ecx)
   341 000001FF 52                              	push edx
   342 00000200 51                              	push ecx
   343 00000201 50                              	push eax
   344 00000202 8B 4C 24 18                     	mov ecx,[esp+24]
   345 00000206                                 	rdmsr
   346 00000206 8B 4C 24 10                     	mov ecx,[esp+16]
   347 0000020A 89 11                           	mov [ecx],edx
   348 0000020C 8B 4C 24 14                     	mov ecx,[esp+20]
   349 00000210 89 01                           	mov [ecx],eax
   350 00000212 58                              	pop eax
   351 00000213 59                              	pop ecx
   352 00000214 5A                              	pop edx
   353 00000215 C3                              	ret
   354 00000216                                 _io_wrmsr: ;void io_wrmsr(int edx,int eax,int ecx)
   355 00000216 52                              	push edx
   356 00000217 51                              	push ecx
   357 00000218 50                              	push eax
   358 00000219 8B 54 24 10                     	mov edx,[esp+16]
   359 0000021D 8B 44 24 14                     	mov eax,[esp+20]
   360 00000221 8B 4C 24 18                     	mov ecx,[esp+24]
   361 00000225                                 	wrmsr
   362 00000225 58                              	pop eax
   363 00000226 59                              	pop ecx
   364 00000227 5A                              	pop edx
   365 00000228 C3                              	ret
   366 00000229                                 _test2: ;void test(int eax,int ebx)
   367 00000229 50                              	push eax
   368 0000022A 53                              	push ebx
   369 0000022B 8B 44 24 0C                     	mov eax,[esp+12]
   370 0000022F 8B 5C 24 10                     	mov ebx,[esp+16]
   371 00000233                                 	ud2
   372 00000233 0F 0B                           	db 0x0f,0x0b
   373 00000235 5B                              	pop ebx
   374 00000236 58                              	pop eax
   375 00000237 C3                              	ret