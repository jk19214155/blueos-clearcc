     1                                  ; naskfunc
     2                                  ; tab=4
     3                                  
     4                                  ;format "wcoff"				; オブジェクトファイルを作るモーチe
     5                                  ;instrset "i486p"				; 486の命令まで使ぁe��ぁe��ぁe��記述
     6                                  bits 64						; 32ビットモード用の機械語を作らせる
     7                                  ;file "naskfunc.nas"			; ソースファイル名情報
     8                                  
     9                                  		global	io_hlt, io_cli, io_sti, io_stihlt
    10                                  		global	io_in8,  io_in16,  io_in32
    11                                  		global	io_out8, io_out16, io_out32
    12                                  		global	io_load_eflags, io_store_eflags
    13                                  		global	load_gdtr, load_idtr
    14                                  		global	load_cr0, store_cr0
    15                                  		global	load_cr3, store_cr3
    16                                  		global load_cr4, store_cr4
    17                                  		global	load_tr
    18                                  		global	asm_inthandler20, asm_inthandler21
    19                                  		global	asm_inthandler2c, asm_inthandler0c , asm_inthandler34, asm_inthandler0e
    20                                  		global	asm_inthandler0d, asm_end_app
    21                                  		global	memtest_sub
    22                                  		global	farjmp, farcall
    23                                  		global	asm_hrb_api, start_app
    24                                  		global sys_nop , asm_sse_strcmp
    25                                  		;global	_memset,_strcpy,_strcmp
    26                                  		global	support_apic, io_wrmsr, io_rdmsr, test2, get_lock, rdrand
    27                                  		global	store_gdt, store_idt,sys_reboot,sys_call, test3, asm_task_switch32
    28                                  		global asm_x64_cs_init,asm_get_cs
    29                                  		extern	inthandler20, inthandler21
    30                                  		extern	inthandler2c, inthandler0d
    31                                  		extern	inthandler0c, inthandler0e , inthandler34
    32                                  		extern	hrb_api 
    33                                  		tpm_command equ 0xfed40000      ;tpm命令寄存器地址
    34                                  		tpm_status equ 0xfed40014       ;tpm状态寄存器地址
    35                                  ; 一个接收指针参数的 vmxon 指令宏定义
    36                                  
    37                                  ;ip_size equ 4
    38                                  ;gpr_size equ 4
    39                                  ;rax equ <eax>
    40                                  ;rbx equ <ebx>
    41                                  ;rcx equ <ecx>
    42                                  ;rdx equ <edx>
    43                                  ;rsi equ <esi>
    44                                  ;rdi equ <edi>
    45                                  ;rsp equ <esp>
    46                                  ;rbp equ <ebp>
    47                                  
    48                                  
    49                                  ip_size equ 8
    50                                  gpr_size equ 8
    51                                  
    52                                  
    53                                  section .text
    54                                  
    55                                  io_hlt:	; void io_hlt(void);
    56 00000000 F4                      		hlt
    57 00000001 C3                      		ret
    58                                  
    59                                  io_cli:	; void io_cli(void);
    60 00000002 FA                      		cli
    61 00000003 C3                      		ret
    62                                  
    63                                  io_sti:	; void io_sti(void);
    64 00000004 FB                      		sti
    65 00000005 C3                      		ret
    66                                  
    67                                  io_stihlt:	; void io_stihlt(void);
    68 00000006 FB                      		sti
    69 00000007 F4                      		hlt
    70 00000008 C3                      		ret
    71                                  
    72                                  io_in8:	; int io_in8(int port);
    73 00000009 89CA                    		mov		edx,ecx		; port
    74 0000000B 31C0                    		xor		eax,eax
    75 0000000D EC                      		in		al,dx
    76 0000000E C3                      		ret
    77                                  
    78                                  io_in16:	; int io_in16(int port);
    79 0000000F 89CA                    		mov		edx,ecx		; port
    80 00000011 31C0                    		xor		eax,eax
    81 00000013 66ED                    		in		ax,dx
    82 00000015 C3                      		ret
    83                                  
    84                                  io_in32:	; int io_in32(int port);
    85 00000016 89CA                    		mov		edx,ecx		; port
    86 00000018 ED                      		in		eax,dx
    87 00000019 C3                      		ret
    88                                  
    89                                  io_out8:	; void io_out8(int port, int data);
    90 0000001A 89D0                    		mov		eax,edx		; data
    91 0000001C 89CA                    		mov		edx,ecx	; port
    92 0000001E EE                      		out		dx,al
    93 0000001F C3                      		ret
    94                                  
    95                                  io_out16:	; void io_out16(int port, int data);
    96 00000020 89D0                    		mov		eax,edx		; data
    97 00000022 89CA                    		mov		edx,ecx		; port
    98 00000024 66EF                    		out		dx,ax
    99 00000026 C3                      		ret
   100                                  
   101                                  io_out32:	; void io_out32(int port, int data);
   102 00000027 89D0                    		mov		eax,edx		; datas
   103 00000029 89CA                    		mov		edx,ecx		; port
   104 0000002B EF                      		out		dx,eax
   105 0000002C C3                      		ret
   106                                  
   107                                  io_load_eflags:	; int io_load_eflags(void);
   108 0000002D 9C                      		pushfq		; push eflags とぁe��意味
   109 0000002E 58                      		pop rax
   110 0000002F C3                      		ret
   111                                  io_store_eflags:	; void io_store_eflags(int eflags);
   112                                  		;push eax
   113 00000030 51                      		push rcx
   114 00000031 9D                      		popfq		; pop eflags とぁe��意味
   115                                  		;pop eax
   116 00000032 C3                      		ret
   117                                  
   118                                  load_gdtr:		; void load_gdtr(int limit, int addr);
   119                                  		;push eax
   120 00000033 52                      		push rdx
   121 00000034 6651                    		push cx
   122 00000036 0F011424                		lgdt [rsp]
   123 0000003A 4883C40A                		add rsp,10
   124                                  		;64位0特权级所有段寄存器清零
   125 0000003E 31C0                    		xor eax,eax
   126 00000040 8ED8                    		mov ds,eax
   127 00000042 8EC0                    		mov es,eax
   128 00000044 8ED0                    		mov ss,eax
   129 00000046 8EE8                    		mov gs,eax
   130 00000048 8EE0                    		mov fs,eax
   131                                  		;pop eax
   132 0000004A C3                      		ret
   133                                  
   134                                  load_idtr:		; void load_idtr(int limit, int addr);
   135 0000004B 52                      		push rdx
   136 0000004C 6651                    		push cx
   137 0000004E 0F011C24                		lidt [rsp]
   138 00000052 4883C40A                		add rsp,10
   139 00000056 C3                      		ret
   140                                  
   141                                  load_cr0:		; int load_cr0(void);
   142 00000057 0F20C0                  		mov		rax,cr0
   143 0000005A C3                      		ret
   144                                  
   145                                  store_cr0:		; void store_cr0(int cr0);
   146 0000005B 0F22C1                  		mov		cr0,rcx
   147 0000005E C3                      		ret
   148                                  		
   149                                  load_cr3:		; int load_cr3(void);
   150 0000005F 0F20D8                  		mov		rax,cr3
   151 00000062 C3                      		ret
   152                                  
   153                                  store_cr3:		; void store_cr3(int cr0);
   154 00000063 0F22D9                  		mov		cr3,rcx
   155 00000066 C3                      		ret
   156                                  
   157                                  load_tr:		; void load_tr(int tr);
   158 00000067 0F00D9                  		ltr		cx
   159 0000006A C3                      		ret
   160                                  load_cr4:
   161 0000006B 0F22E1                  		mov cr4,rcx
   162 0000006E C3                      		ret
   163                                  store_cr4:
   164 0000006F 0F20E0                  		mov rax,cr4
   165 00000072 C3                      		ret
   166                                  		
   167                                  asm_inthandler20:
   168 00000073 50                      		push rax
   169                                  		
   170 00000074 8CC0                    		mov eax,es
   171 00000076 50                      		push rax
   172 00000077 8CD8                    		mov eax,ds
   173 00000079 50                      		push rax
   174                                  		
   175 0000007A 50                      		push rax
   176 0000007B 51                      		push rcx
   177 0000007C 52                      		push rdx
   178 0000007D 53                      		push rbx
   179 0000007E 56                      		push rsi
   180 0000007F 57                      		push rdi
   181 00000080 55                      		push rbp
   182 00000081 4150                    		push r8
   183 00000083 4151                    		push r9
   184 00000085 4152                    		push r10
   185 00000087 4153                    		push r11
   186 00000089 4154                    		push r12
   187 0000008B 4155                    		push r13
   188 0000008D 4156                    		push r14
   189 0000008F 4157                    		push r15
   190                                  		
   191 00000091 4889E0                  		mov		rax,rsp
   192 00000094 4889C1                  		mov 	rcx,rax
   193 00000097 668CD0                  		mov		ax,ss
   194 0000009A 8ED8                    		mov		ds,ax
   195 0000009C 8EC0                    		mov		es,ax
   196 0000009E E8(00000000)            		call	inthandler20
   197                                  		
   198 000000A3 415F                    		pop r15
   199 000000A5 415E                    		pop r14
   200 000000A7 415D                    		pop r13
   201 000000A9 415C                    		pop r12
   202 000000AB 415B                    		pop r11
   203 000000AD 415A                    		pop r10
   204 000000AF 4159                    		pop r9
   205 000000B1 4158                    		pop r8
   206 000000B3 5D                      		pop rbp
   207 000000B4 5F                      		pop rdi
   208 000000B5 5E                      		pop rsi
   209 000000B6 5B                      		pop rbx
   210 000000B7 5A                      		pop rdx
   211 000000B8 59                      		pop rcx
   212 000000B9 58                      		pop rax
   213                                  		
   214 000000BA 58                      		pop rax
   215 000000BB 8ED8                    		mov ds,eax
   216 000000BD 58                      		pop rax
   217 000000BE 8EC0                    		mov es,eax
   218                                  		
   219 000000C0 58                      		pop rax
   220 000000C1 48                      		db 0x48
   221 000000C2 CF                      		iret
   222                                  
   223                                  asm_inthandler21:
   224 000000C3 50                      		push rax
   225                                  		
   226 000000C4 8CC0                    		mov eax,es
   227 000000C6 50                      		push rax
   228 000000C7 8CD8                    		mov eax,ds
   229 000000C9 50                      		push rax
   230                                  		
   231 000000CA 50                      		push rax
   232 000000CB 51                      		push rcx
   233 000000CC 52                      		push rdx
   234 000000CD 53                      		push rbx
   235 000000CE 56                      		push rsi
   236 000000CF 57                      		push rdi
   237 000000D0 55                      		push rbp
   238 000000D1 4150                    		push r8
   239 000000D3 4151                    		push r9
   240 000000D5 4152                    		push r10
   241 000000D7 4153                    		push r11
   242 000000D9 4154                    		push r12
   243 000000DB 4155                    		push r13
   244 000000DD 4156                    		push r14
   245 000000DF 4157                    		push r15
   246                                  		
   247 000000E1 4889E0                  		mov		rax,rsp
   248 000000E4 4889C1                  		mov		rcx,rax
   249 000000E7 668CD0                  		mov		ax,ss
   250 000000EA 8ED8                    		mov		ds,ax
   251 000000EC 8EC0                    		mov		es,ax
   252 000000EE E8(00000000)            		call	inthandler21
   253                                  		
   254 000000F3 415F                    		pop r15
   255 000000F5 415E                    		pop r14
   256 000000F7 415D                    		pop r13
   257 000000F9 415C                    		pop r12
   258 000000FB 415B                    		pop r11
   259 000000FD 415A                    		pop r10
   260 000000FF 4159                    		pop r9
   261 00000101 4158                    		pop r8
   262 00000103 5D                      		pop rbp
   263 00000104 5F                      		pop rdi
   264 00000105 5E                      		pop rsi
   265 00000106 5B                      		pop rbx
   266 00000107 5A                      		pop rdx
   267 00000108 59                      		pop rcx
   268 00000109 59                      		pop rcx
   269 0000010A 58                      		pop rax
   270                                  		
   271 0000010B 8ED8                    		mov ds,eax
   272 0000010D 58                      		pop rax
   273 0000010E 8EC0                    		mov es,eax
   274 00000110 58                      		pop rax
   275 00000111 48                      		db 0x48
   276 00000112 CF                      		iret
   277                                  
   278                                  asm_inthandler2c:
   279 00000113 50                      		push rax
   280 00000114 8CC0                    		mov eax,es
   281 00000116 50                      		push rax
   282 00000117 8CD8                    		mov eax,ds
   283 00000119 50                      		push rax
   284                                  		
   285 0000011A 50                      		push rax
   286 0000011B 51                      		push rcx
   287 0000011C 52                      		push rdx
   288 0000011D 53                      		push rbx
   289 0000011E 56                      		push rsi
   290 0000011F 57                      		push rdi
   291 00000120 55                      		push rbp
   292 00000121 4150                    		push r8
   293 00000123 4151                    		push r9
   294 00000125 4152                    		push r10
   295 00000127 4153                    		push r11
   296 00000129 4154                    		push r12
   297 0000012B 4155                    		push r13
   298 0000012D 4156                    		push r14
   299 0000012F 4157                    		push r15
   300                                  		
   301 00000131 4889E1                  		mov		rcx,rsp
   302 00000134 4831C0                  		xor		rax,rax
   303 00000137 8ED8                    		mov		ds,ax
   304 00000139 8EC0                    		mov		es,ax
   305 0000013B E8(00000000)            		call	inthandler2c
   306 00000140 415F                    		pop r15
   307 00000142 415E                    		pop r14
   308 00000144 415D                    		pop r13
   309 00000146 415C                    		pop r12
   310 00000148 415B                    		pop r11
   311 0000014A 415A                    		pop r10
   312 0000014C 4159                    		pop r9
   313 0000014E 4158                    		pop r8
   314 00000150 5D                      		pop rbp
   315 00000151 5F                      		pop rdi
   316 00000152 5E                      		pop rsi
   317 00000153 5B                      		pop rbx
   318 00000154 5A                      		pop rdx
   319 00000155 59                      		pop rcx
   320 00000156 58                      		pop rax
   321                                  		
   322 00000157 58                      		pop rax
   323 00000158 8ED8                    		mov ds,eax
   324 0000015A 58                      		pop rax
   325 0000015B 8EC0                    		mov es,eax
   326 0000015D 58                      		pop rax
   327 0000015E 48                      		db 0x48
   328 0000015F CF                      		iret
   329                                  
   330                                  asm_inthandler34:
   331 00000160 50                      		push rax
   332 00000161 8CC0                    		mov eax,es
   333 00000163 50                      		push rax
   334 00000164 8CD8                    		mov eax,ds
   335 00000166 50                      		push rax
   336                                  		
   337 00000167 50                      		push rax
   338 00000168 51                      		push rcx
   339 00000169 52                      		push rdx
   340 0000016A 53                      		push rbx
   341 0000016B 56                      		push rsi
   342 0000016C 57                      		push rdi
   343 0000016D 55                      		push rbp
   344 0000016E 4150                    		push r8
   345 00000170 4151                    		push r9
   346 00000172 4152                    		push r10
   347 00000174 4153                    		push r11
   348 00000176 4154                    		push r12
   349 00000178 4155                    		push r13
   350 0000017A 4156                    		push r14
   351 0000017C 4157                    		push r15
   352                                  		
   353 0000017E 4889E1                  		mov		rcx,rsp
   354 00000181 668CD0                  		mov		ax,ss
   355 00000184 8ED8                    		mov		ds,ax
   356 00000186 8EC0                    		mov		es,ax
   357 00000188 E8(00000000)            		call	inthandler34
   358 0000018D 415F                    		pop r15
   359 0000018F 415E                    		pop r14
   360 00000191 415D                    		pop r13
   361 00000193 415C                    		pop r12
   362 00000195 415B                    		pop r11
   363 00000197 415A                    		pop r10
   364 00000199 4159                    		pop r9
   365 0000019B 4158                    		pop r8
   366 0000019D 5D                      		pop rbp
   367 0000019E 5F                      		pop rdi
   368 0000019F 5E                      		pop rsi
   369 000001A0 5B                      		pop rbx
   370 000001A1 5A                      		pop rdx
   371 000001A2 59                      		pop rcx
   372 000001A3 58                      		pop rax
   373                                  		
   374 000001A4 58                      		pop rax
   375 000001A5 8ED8                    		mov ds,eax
   376 000001A7 58                      		pop rax
   377 000001A8 8EC0                    		mov es,eax
   378 000001AA 58                      		pop rax
   379 000001AB 48                      		db 0x48
   380 000001AC CF                      		iret
   381                                  
   382                                  asm_inthandler0c:
   383 000001AD 50                      		push rax
   384 000001AE 8CC0                    		mov eax,es
   385 000001B0 50                      		push rax
   386 000001B1 8CD8                    		mov eax,ds
   387 000001B3 50                      		push rax
   388                                  		
   389 000001B4 50                      		push rax
   390 000001B5 51                      		push rcx
   391 000001B6 52                      		push rdx
   392 000001B7 53                      		push rbx
   393 000001B8 56                      		push rsi
   394 000001B9 57                      		push rdi
   395 000001BA 55                      		push rbp
   396 000001BB 4150                    		push r8
   397 000001BD 4151                    		push r9
   398 000001BF 4152                    		push r10
   399 000001C1 4153                    		push r11
   400 000001C3 4154                    		push r12
   401 000001C5 4155                    		push r13
   402 000001C7 4156                    		push r14
   403 000001C9 4157                    		push r15
   404                                  		
   405 000001CB 4889E1                  		mov		rcx,rsp
   406 000001CE 668CD0                  		mov		ax,ss
   407 000001D1 8ED8                    		mov		ds,ax
   408 000001D3 8EC0                    		mov		es,ax
   409 000001D5 E8(00000000)            		call	inthandler0c
   410 000001DA 83F800                  		cmp		eax,0
   411 000001DD 0F856B010000            		jne		asm_end_app
   412 000001E3 415F                    		pop r15
   413 000001E5 415E                    		pop r14
   414 000001E7 415D                    		pop r13
   415 000001E9 415C                    		pop r12
   416 000001EB 415B                    		pop r11
   417 000001ED 415A                    		pop r10
   418 000001EF 4159                    		pop r9
   419 000001F1 4158                    		pop r8
   420 000001F3 5D                      		pop rbp
   421 000001F4 5F                      		pop rdi
   422 000001F5 5E                      		pop rsi
   423 000001F6 5B                      		pop rbx
   424 000001F7 5A                      		pop rdx
   425 000001F8 59                      		pop rcx
   426 000001F9 58                      		pop rax
   427                                  		
   428 000001FA 58                      		pop rax
   429 000001FB 8ED8                    		mov ds,eax
   430 000001FD 58                      		pop rax
   431 000001FE 8EC0                    		mov es,eax
   432 00000200 58                      		pop rax
   433 00000201 83C404                  		add		esp,4			; int 0x0c でも、これが忁e��e
   434 00000204 48                      		db 0x48
   435 00000205 CF                      		iret
   436                                  
   437                                  asm_inthandler0d:
   438 00000206 50                      		push rax
   439 00000207 8CC0                    		mov eax,es
   440 00000209 50                      		push rax
   441 0000020A 8CD8                    		mov eax,ds
   442 0000020C 50                      		push rax
   443                                  		
   444 0000020D 50                      		push rax
   445 0000020E 51                      		push rcx
   446 0000020F 52                      		push rdx
   447 00000210 53                      		push rbx
   448 00000211 56                      		push rsi
   449 00000212 57                      		push rdi
   450 00000213 55                      		push rbp
   451 00000214 4150                    		push r8
   452 00000216 4151                    		push r9
   453 00000218 4152                    		push r10
   454 0000021A 4153                    		push r11
   455 0000021C 4154                    		push r12
   456 0000021E 4155                    		push r13
   457 00000220 4156                    		push r14
   458 00000222 4157                    		push r15
   459                                  		
   460 00000224 4889E1                  		mov		rcx,rsp
   461 00000227 668CD0                  		mov		ax,ss
   462 0000022A 8ED8                    		mov		ds,ax
   463 0000022C 8EC0                    		mov		es,ax
   464 0000022E E8(00000000)            		call	inthandler0d
   465 00000233 83F800                  		cmp		eax,0			; ここだけ違ぁe
   466 00000236 0F8512010000            		jne		asm_end_app	; ここだけ違ぁe
   467 0000023C 415F                    		pop r15
   468 0000023E 415E                    		pop r14
   469 00000240 415D                    		pop r13
   470 00000242 415C                    		pop r12
   471 00000244 415B                    		pop r11
   472 00000246 415A                    		pop r10
   473 00000248 4159                    		pop r9
   474 0000024A 4158                    		pop r8
   475 0000024C 5D                      		pop rbp
   476 0000024D 5F                      		pop rdi
   477 0000024E 5E                      		pop rsi
   478 0000024F 5B                      		pop rbx
   479 00000250 5A                      		pop rdx
   480 00000251 59                      		pop rcx
   481 00000252 58                      		pop rax
   482                                  		
   483 00000253 58                      		pop rax
   484 00000254 8ED8                    		mov ds,eax
   485 00000256 58                      		pop rax
   486 00000257 8EC0                    		mov es,eax
   487 00000259 58                      		pop rax
   488 0000025A 83C404                  		add		esp,4			; int 0x0d では、これが忁e��e
   489 0000025D 48                      		db 0x48
   490 0000025E CF                      		iret
   491                                  
   492                                  asm_inthandler0e:
   493 0000025F FB                      		sti
   494 00000260 50                      		push rax
   495 00000261 8CC0                    		mov eax,es
   496 00000263 50                      		push rax
   497 00000264 8CD8                    		mov eax,ds
   498 00000266 50                      		push rax
   499                                  		
   500 00000267 50                      		push rax
   501 00000268 51                      		push rcx
   502 00000269 52                      		push rdx
   503 0000026A 53                      		push rbx
   504 0000026B 56                      		push rsi
   505 0000026C 57                      		push rdi
   506 0000026D 55                      		push rbp
   507 0000026E 4150                    		push r8
   508 00000270 4151                    		push r9
   509 00000272 4152                    		push r10
   510 00000274 4153                    		push r11
   511 00000276 4154                    		push r12
   512 00000278 4155                    		push r13
   513 0000027A 4156                    		push r14
   514 0000027C 4157                    		push r15
   515                                  		
   516 0000027E 4889E1                  		mov		rcx,rsp
   517 00000281 668CD0                  		mov		ax,ss
   518 00000284 8ED8                    		mov		ds,ax
   519 00000286 8EC0                    		mov		es,ax
   520 00000288 0F20D2                  		mov 	rdx,cr2 ;保存现场
   521 0000028B 50                      		push 	rax
   522 0000028C E8(00000000)            		call	inthandler0e
   523 00000291 83F800                  		cmp		eax,0
   524 00000294 0F85B4000000            		jne		asm_end_app
   525 0000029A 415F                    		pop r15
   526 0000029C 415E                    		pop r14
   527 0000029E 415D                    		pop r13
   528 000002A0 415C                    		pop r12
   529 000002A2 415B                    		pop r11
   530 000002A4 415A                    		pop r10
   531 000002A6 4159                    		pop r9
   532 000002A8 4158                    		pop r8
   533 000002AA 5D                      		pop rbp
   534 000002AB 5F                      		pop rdi
   535 000002AC 5E                      		pop rsi
   536 000002AD 5B                      		pop rbx
   537 000002AE 5A                      		pop rdx
   538 000002AF 59                      		pop rcx
   539 000002B0 58                      		pop rax
   540                                  		
   541 000002B1 58                      		pop rax
   542 000002B2 8ED8                    		mov ds,eax
   543 000002B4 58                      		pop rax
   544 000002B5 8EC0                    		mov es,eax
   545 000002B7 58                      		pop rax
   546 000002B8 83C404                  		add		esp,4
   547 000002BB 48                      		db 0x48
   548 000002BC CF                      		iret
   549                                  memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   550 000002BD 57                      		push	rdi						; �e�ebx, esi, edi も使ぁe��ぁe�eで�e�e
   551 000002BE 56                      		push	rsi
   552 000002BF 53                      		push	rbx
   553 000002C0 BE55AA55AA              		mov		esi,0xaa55aa55			; pat0 = 0xaa55aa55;
   554 000002C5 BFAA55AA55              		mov		edi,0x55aa55aa			; pat1 = 0x55aa55aa;
   555 000002CA 8B442410                		mov		eax,[rsp+12+4]			; i = start;
   556                                  mts_loop:
   557 000002CE 89C3                    		mov		ebx,eax
   558 000002D0 81C3FC0F0000            		add		ebx,0xffc				; p = i + 0xffc;
   559 000002D6 678B13                  		mov		edx,[ebx]				; old = *p;
   560 000002D9 678933                  		mov		[ebx],esi				; *p = pat0;
   561 000002DC 678333FF                		xor		dword [ebx],0xffffffff	; *p ^= 0xffffffff;
   562 000002E0 673B3B                  		cmp		edi,[ebx]				; if (*p != pat1) goto fin;
   563 000002E3 751B                    		jne		mts_fin
   564 000002E5 678333FF                		xor		dword [ebx],0xffffffff	; *p ^= 0xffffffff;
   565 000002E9 673B33                  		cmp		esi,[ebx]				; if (*p != pat0) goto fin;
   566 000002EC 7512                    		jne		mts_fin
   567 000002EE 678913                  		mov		[ebx],edx				; *p = old;
   568 000002F1 0500100000              		add		eax,0x1000				; i += 0x1000;
   569 000002F6 3B442414                		cmp		eax,[rsp+12+8]			; if (i <= end) goto mts_loop;
   570 000002FA 76D2                    		jbe		mts_loop
   571 000002FC 5B                      		pop		rbx
   572 000002FD 5E                      		pop		rsi
   573 000002FE 5F                      		pop		rdi
   574 000002FF C3                      		ret
   575                                  mts_fin:
   576 00000300 678913                  		mov		[ebx],edx				; *p = old;
   577 00000303 5B                      		pop		rbx
   578 00000304 5E                      		pop		rsi
   579 00000305 5F                      		pop		rdi
   580 00000306 C3                      		ret
   581                                  
   582                                  farjmp:		; void farjmp(int eip, int cs);
   583 00000307 48FF6C2408              		jmp		far	[rsp+ip_size]				; eip, cs
   584 0000030C C3                      		ret
   585                                  
   586                                  farcall:		; void farcall(int eip, int cs);
   587 0000030D 48FF5C2408              		call	far	[rsp+ip_size]				; eip, cs
   588 00000312 C3                      		ret
   589                                  
   590                                  asm_hrb_api:
   591 00000313 FB                      		sti
   592 00000314 8CC0                    		mov eax,es
   593 00000316 50                      		push rax
   594 00000317 8CD8                    		mov eax,ds
   595 00000319 50                      		push rax
   596                                  		
   597                                  
   598 0000031A 50                      		push rax
   599 0000031B 51                      		push rcx
   600 0000031C 52                      		push rdx
   601 0000031D 53                      		push rbx
   602 0000031E 56                      		push rsi
   603 0000031F 57                      		push rdi
   604 00000320 55                      		push rbp
   605 00000321 54                      		push rsp; 保存�eためのpush
   606                                  		
   607                                  
   608 00000322 50                      		push rax
   609 00000323 51                      		push rcx
   610 00000324 52                      		push rdx
   611 00000325 53                      		push rbx
   612 00000326 56                      		push rsi
   613 00000327 57                      		push rdi
   614 00000328 55                      		push rbp
   615 00000329 54                      		push rsp; hrb_apiにわたすため�epush
   616 0000032A 668CD0                  		mov		ax,ss
   617 0000032D 8ED8                    		mov		ds,ax		; os用のセグメントをdsとesにも�eれる
   618 0000032F 8EC0                    		mov		es,ax
   619 00000331 E8(00000000)            		call	hrb_api
   620 00000336 83F800                  		cmp		eax,0		; eaxぁeでなければアプリ終亁e�e琁e
   621 00000339 7513                    		jne		asm_end_app
   622 0000033B 83C420                  		add		esp,32
   623                                  		
   624 0000033E 5C                      		pop rsp
   625 0000033F 5D                      		pop rbp
   626 00000340 5F                      		pop rdi
   627 00000341 5E                      		pop rsi
   628 00000342 5B                      		pop rbx
   629 00000343 5A                      		pop rdx
   630 00000344 59                      		pop rcx
   631 00000345 58                      		pop rax
   632                                  		
   633 00000346 58                      		pop rax
   634 00000347 8ED8                    		mov ds,eax
   635 00000349 58                      		pop rax
   636 0000034A 8EC0                    		mov es,eax
   637 0000034C 48                      		db 0x48
   638 0000034D CF                      		iret
   639                                  asm_end_app:
   640                                  ;	eaxはtss.esp0の番地
   641 0000034E 488B20                  		mov		rsp,[rax]
   642 00000351 67C7400400000000        		mov		dword [eax+4],0
   643 00000359 5C                      		pop rsp
   644 0000035A 5D                      		pop rbp
   645 0000035B 5F                      		pop rdi
   646 0000035C 5E                      		pop rsi
   647 0000035D 5B                      		pop rbx
   648 0000035E 5A                      		pop rdx
   649 0000035F 59                      		pop rcx
   650 00000360 58                      		pop rax
   651 00000361 C3                      		ret					; cmd_appへ帰めe
   652                                  
   653                                  start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   654 00000362 50                      		push rax
   655 00000363 51                      		push rcx
   656 00000364 52                      		push rdx
   657 00000365 53                      		push rbx
   658 00000366 56                      		push rsi
   659 00000367 57                      		push rdi
   660 00000368 55                      		push rbp
   661 00000369 54                      		push rsp		; 32ビットレジスタを�e部保存しておく
   662                                  		
   663 0000036A 488B6C2448              		mov		rbp,[rsp+ip_size+gpr_size*8]	; tss.esp0の番地
   664 0000036F 48896500                		mov		[rbp  ],rsp		; os用のespを保孁e
   665 00000373 8C5504                  		mov		[rbp+4],ss		; os用のssを保孁e
   666 00000376 8EC3                    		mov		es,bx
   667 00000378 8EDB                    		mov		ds,bx
   668 0000037A 8EE3                    		mov		fs,bx
   669 0000037C 8EEB                    		mov		gs,bx
   670                                  		;db 0x0f,0x35;sys_ret
   671                                  ;	以下�eretfでアプリに行かせるためのスタチe��調整
   672 0000037E 83C803                  		or		eax,3			; アプリ用のセグメント番号に3をorする
   673 00000381 83CB03                  		or		ebx,3			; アプリ用のセグメント番号に3をorする
   674 00000384 4151                    		push	r9				; アプリのss
   675 00000386 4150                    		push	r8				; アプリのesp
   676 00000388 52                      		push	rdx				; アプリのcs
   677 00000389 51                      		push	rcx				; アプリのeip
   678 0000038A CB                      		retf
   679                                  ;	アプリが終亁e��てもここには来なぁe
   680                                  strcmp:	;int strcmp(char* s,char* t,int longer);
   681 0000038B 4889CE                  	mov rsi,rcx
   682 0000038E 4889D7                  	mov rdi,rdx
   683 00000391 4C89C1                  	mov rcx,r8
   684 00000394 F2A7                    	repne cmpsd
   685 00000396 89C8                    	mov eax,ecx
   686 00000398 C3                      	ret
   687                                  strcpy:	;void strcpy(char* s,char* t,int longer);
   688 00000399 4889CE                  	mov rsi,rcx
   689 0000039C 4889D7                  	mov rdi,rdx
   690 0000039F 4C89C1                  	mov rcx,r8
   691                                  	;db 0xf3,0xa5;rep movsb
   692 000003A2 F3A4                    	rep movsb
   693 000003A4 C3                      	ret
   694                                  memset:	;void memset(char* s,int num,int longer)
   695 000003A5 57                      	push rdi
   696 000003A6 50                      	push rax
   697 000003A7 51                      	push rcx
   698 000003A8 488B7C2408              	mov rdi,[rsp+ip_size]
   699 000003AD 488B442410              	mov rax,[rsp+ip_size+gpr_size]
   700 000003B2 488B4C2418              	mov rcx,[rsp+ip_size+gpr_size*2]
   701 000003B7 F3AA                    	rep stosb
   702 000003B9 59                      	pop rcx
   703 000003BA 58                      	pop rax
   704 000003BB 5F                      	pop rdi
   705 000003BC C3                      	ret
   706                                  support_apic: ;int support_apic(void):
   707 000003BD 52                      	push rdx
   708 000003BE B801000000              	mov eax,1
   709                                  	;db 0x0f,0xa2 ;cpuid 
   710 000003C3 0FA2                    	cpuid
   711 000003C5 0FBAE209                	bt edx,9
   712 000003C9 0F92C0                  	setc al
   713 000003CC 0FB6C0                  	movzx eax,al
   714 000003CF 5A                      	pop rdx
   715 000003D0 C3                      	ret
   716                                  io_rdmsr: ;void io_rdmsr(int* edx,int* eax,int ecx)
   717 000003D1 4989CF                  	mov r15,rcx
   718 000003D4 4C89C1                  	mov rcx,r8
   719                                  	;db 0x0f,0x32 ;rdmsr
   720 000003D7 0F32                    	rdmsr
   721 000003D9 418917                  	mov [r15],edx
   722 000003DC 8902                    	mov [rdx],eax
   723 000003DE C3                      	ret
   724                                  io_wrmsr: ;void io_wrmsr(int edx,int eax,int ecx)
   725 000003DF 4889D0                  	mov rax,rdx
   726 000003E2 4889CA                  	mov rdx,rcx
   727 000003E5 4C89C1                  	mov rcx,r8
   728                                  	;db 0x0f,0x30 ;wrmsr
   729 000003E8 0F30                    	wrmsr
   730 000003EA C3                      	ret
   731                                  test2: ;void test(int eax,int ebx)
   732 000003EB 50                      	push rax
   733 000003EC 53                      	push rbx
   734 000003ED 8B442418                	mov eax,[rsp+ip_size+gpr_size*2]
   735 000003F1 8B5C2420                	mov ebx,[rsp+ip_size+gpr_size*3]
   736 000003F5 0F0B                    	db 0x0f,0x0b ;ud2
   737                                  .fin:
   738 000003F7 FA                      	cli
   739 000003F8 F4                      	hlt
   740 000003F9 EBFC                    	jmp .fin
   741 000003FB 5B                      	pop rbx
   742 000003FC 58                      	pop rax
   743 000003FD C3                      	ret
   744                                  get_lock: ;int get_lock(int* lock,int bit)
   745 000003FE F00FAB11                	lock bts dword [rcx],edx
   746 00000402 4831C0                  	xor rax,rax
   747 00000405 11C0                    	adc eax,eax
   748 00000407 C3                      	ret
   749                                  store_gdt: ;void store_gdt(void* addr)
   750 00000408 0F0101                  	sgdt [rcx]
   751 0000040B C3                      	ret
   752                                  store_idt: ;void store_gdt(void* addr)
   753 0000040C 0F0109                  	sidt [rcx]
   754 0000040F C3                      	ret
   755                                  sys_reboot: ;void sys_reboot(void)
   756 00000410 FA                      	cli
   757 00000411 0F20C0                  	mov rax,cr0
   758 00000414 66BA6400                	mov dx,0x64
   759 00000418 66B8FE00                	mov ax,0xfe
   760 0000041C 66EF                    	out dx,ax
   761                                  .fin:
   762 0000041E F4                      	hlt
   763 0000041F EBFD                    	jmp .fin
   764                                  sys_call:
   765 00000421 0F35                    	db 0x0f,0x35 ;sysexit
   766                                  test3:
   767 00000423 F4                      	db 0xf4
   768                                  .fin:
   769 00000424 EBFE                    	jmp .fin
   770                                  support_rand: ;int support_rand()
   771 00000426 31C0                    	xor eax,eax
   772 00000428 FFC0                    	inc eax
   773 0000042A C3                      	ret
   774                                  	
   775 0000042B 53                      	push rbx
   776 0000042C 51                      	push rcx
   777 0000042D 52                      	push rdx
   778 0000042E B801000000              	mov eax,1
   779 00000433 0FA2                    	db 0x0f,0xa2 ;cpuid
   780 00000435 81E100000040            	and ecx,0x40000000
   781 0000043B 0F92C0                  	db 0x0f,0x92,0xc0;setc al
   782 0000043E 5A                      	pop rdx
   783 0000043F 59                      	pop rcx
   784 00000440 5B                      	pop rbx
   785 00000441 C3                      	ret
   786                                  rdrand: ;int rdrand()
   787 00000442 0FC7F0                  	db 0x0f,0xc7,0xf0 ;rdrand eax
   788                                  	;rdrand
   789 00000445 C3                      	ret
   790                                  _invlpg:
   791 00000446 C3                      	ret
   792                                  tpm_init:
   793                                  	;初始化tpm
   794 00000447 50                      	push rax
   795 00000448 B800F00600                  mov eax, 0x6f000
   796 0000044D 8904250000D4FE              mov dword [tpm_command], eax
   797          ******************       warning: dword data exceeds bounds
   798 00000454 E802000000                  call tpm_wait_for_status
   799 00000459 58                      	pop rax
   800 0000045A C3                      	ret
   801                                  tpm_get_a_key:
   802                                  	
   803                                  tpm_wait_for_status:
   804                                          ;等待tpm状态就绪
   805 0000045B 8B04251400D4FE                  mov eax, dword [tpm_status]
   806          ******************       warning: dword data exceeds bounds
   807 00000462 2500008001                      and eax, 0x01800000
   808 00000467 3D00008000                      cmp eax, 0x00800000
   809 0000046C 75ED                            jne tpm_wait_for_status
   810 0000046E C3                      		ret
   811                                  sys_nop:
   812 0000046F 90                      	nop
   813 00000470 C3                      	ret
   814                                  ;unsigned int asm_sse_strcmp(char* str,char* str,unsigned,int longer)
   815                                  asm_sse_strcmp:
   816 00000471 55                      	push rbp
   817 00000472 4889E5                  	mov rbp,rsp
   818                                  	
   819 00000475 4889C8                  	mov rax,rcx
   820                                  	;mov edx,rdx
   821 00000478 4C89C1                  	mov rcx,r8
   822 0000047B 53                      	push rbx
   823 0000047C 56                      	push rsi
   824 0000047D 57                      	push rdi
   825 0000047E 4889C6                  	mov rsi,rax
   826 00000481 4889D7                  	mov rdi,rdx
   827 00000484 4889CA                  	mov rdx,rcx
   828                                  	;清零计数器
   829 00000487 4831DB                  	xor rbx,rbx 
   830 0000048A 0F06                    	clts
   831 0000048C 660FEFD2                	pxor xmm2,xmm2
   832                                  .lp:
   833 00000490 0F06                    	clts
   834                                  	;将字符串剩余长度读入
   835                                  	;lea eax,[edx-ebx]
   836 00000492 4889D0                  	mov rax,rdx
   837 00000495 4829D8                  	sub rax,rbx
   838 00000498 4889C1                  	mov rcx,rax
   839 0000049B F30F6F041E              	movdqu xmm0, [rsi+rbx]
   840 000004A0 F30F6F0C1F              	movdqu xmm1, [rdi+rbx]
   841 000004A5 660F3A61C118            	pcmpestri xmm0,xmm1,0x18
   842                                  	;不是16证明有不一样的部分
   843 000004AB 4883F910                	cmp rcx,16
   844 000004AF 752E                    	jne .fin
   845                                  	
   846                                  	;检查两个字符串中是否有0 如果有 证明其中一个字符串已经结束
   847 000004B1 4889CB                  	mov rbx,rcx
   848 000004B4 660F3A63C204            	pcmpistri xmm0,xmm2,0x04
   849                                  	;如果不是16 证明有一个字符是空字符 字符串结束
   850 000004BA 4883F910                	cmp rcx,16
   851 000004BE 7517                    	jne .fin2
   852                                  	
   853 000004C0 660F3A63CA04            	pcmpistri xmm1,xmm2,0x04
   854                                  	;如果不是16 证明有一个字符是空字符 字符串结束
   855 000004C6 4883F910                	cmp rcx,16
   856 000004CA 750B                    	jne .fin2
   857                                  	
   858 000004CC 4883C310                	add rbx,16
   859                                  	;最后 比较是否达到了界限值
   860 000004D0 4839DA                  	cmp rdx,rbx
   861 000004D3 7602                    	jbe .fin2
   862                                  	
   863 000004D5 EBB9                    	jmp .lp
   864                                  .fin2:
   865                                  	;没有异常
   866 000004D7 4831C0                  	xor rax,rax
   867 000004DA 5F                      	pop rdi
   868 000004DB 5E                      	pop rsi
   869 000004DC 5B                      	pop rbx
   870 000004DD 5D                      	pop rbp
   871 000004DE C3                      	ret
   872                                  .fin:
   873 000004DF 488D040B                	lea rax,[rbx+rcx]
   874 000004E3 48FFC0                  	inc rax
   875                                  	
   876 000004E6 660F3A63C118            	pcmpistri xmm0,xmm1,0x18
   877                                  	;最后判断一次是不是遇到了字符串结尾
   878 000004EC 4883F910                	cmp rcx,16
   879 000004F0 74E5                    	je .fin2
   880                                  	
   881 000004F2 5F                      	pop rdi
   882 000004F3 5E                      	pop rsi
   883 000004F4 5B                      	pop rbx
   884 000004F5 5D                      	pop rbp
   885 000004F6 C3                      	ret
   886                                  ;asm_sse_strtest(char* str,char test[16])
   887                                  _asm_sse_strtest:
   888 000004F7 55                      	push rbp
   889 000004F8 4889E5                  	mov rbp,rsp
   890 000004FB 4889C8                  	mov rax,rcx
   891                                  	;mov rdx,[rbp+gpr_size*3]
   892 000004FE 53                      	push rbx
   893 000004FF 56                      	push rsi
   894 00000500 57                      	push rdi
   895 00000501 67F30F6F0A              	movdqu xmm1,[edx]
   896                                  	;清零计数器
   897 00000506 4831C0                  	xor rax,rax 
   898 00000509 0F06                    	clts
   899 0000050B 660FEFD2                	pxor xmm2,xmm2
   900                                  .lp:
   901 0000050F 0F06                    	clts
   902 00000511 67F30F6F0406            	movdqu xmm0, [esi+eax]
   903 00000517 660F3A63C114            	pcmpistri xmm0,xmm1,0x14
   904 0000051D 4883F910                	cmp rcx,16
   905                                  	;0
   906 00000521 7518                    	jne .fin
   907                                  	
   908 00000523 4889CB                  	mov rbx,rcx
   909 00000526 660F3A63C204            	pcmpistri xmm0,xmm2,0x04
   910                                  	;如果是16 证明没有任何一个字符是空字符 字符串没有结束
   911 0000052C 4883F910                	cmp rcx,16
   912 00000530 7506                    	jne .fin2
   913                                  	
   914 00000532 4883C010                	add rax,16
   915 00000536 EBD7                    	jmp .lp
   916                                  .fin2:
   917 00000538 4889D8                  	mov rax,rbx
   918                                  .fin:
   919 0000053B 4801C8                  	add rax,rcx
   920 0000053E 5F                      	pop rdi
   921 0000053F 5E                      	pop rsi
   922 00000540 5B                      	pop rbx
   923 00000541 5D                      	pop rbp
   924 00000542 C3                      	ret
   925                                  ;asm_task_switch32(unsigned int *old_esp,unsigned int *new_esp)
   926                                  asm_task_switch32:
   927 00000543 55                      	push rbp
   928                                  	;mov ecx,[rbp+8]
   929                                  	;mov edx,[rbp+12]
   930 00000544 E802000000              	call .start
   931                                  	;恢复环境的代码
   932 00000549 5D                      	pop rbp
   933 0000054A C3                      	ret
   934                                  .start:
   935                                  	;保存环境的代码
   936 0000054B 53                      	push rbx
   937 0000054C 56                      	push rsi
   938 0000054D 57                      	push rdi
   939 0000054E 55                      	push rbp
   940                                  	;cr3
   941 0000054F 0F20D8                  	mov rax,cr3
   942 00000552 50                      	push rax
   943 00000553 4831C0                  	xor rax,rax
   944                                  	;flags
   945 00000556 9C                      	pushfq
   946                                  	;tr
   947 00000557 50                      	push rax
   948 00000558 0F000C24                	str [rsp]
   949                                  	;ldtr
   950 0000055C 50                      	push rax
   951 0000055D 0F000424                	sldt [rsp]
   952                                  	;64位被调用者寄存器
   953 00000561 4154                    	push r12
   954 00000563 4155                    	push r13
   955 00000565 4156                    	push r14
   956 00000567 4157                    	push r15
   957 00000569 488921                  	mov [rcx],rsp
   958                                  	;加载环境的代码
   959 0000056C 488B22                  	mov rsp,[rdx]
   960 0000056F 415F                    	pop r15
   961 00000571 415E                    	pop r14
   962 00000573 415D                    	pop r13
   963 00000575 415C                    	pop r12
   964                                  	;ldtr
   965 00000577 0F001424                	lldt [rsp]
   966 0000057B 58                      	pop rax
   967                                  	;tr
   968                                  	;ltr [esp]
   969 0000057C 58                      	pop rax
   970                                  	;flags
   971 0000057D 9D                      	popfq
   972                                  	;cr3
   973 0000057E 58                      	pop rax
   974 0000057F 0F22D8                  	mov cr3,rax
   975 00000582 5D                      	pop rbp
   976 00000583 5F                      	pop rdi
   977 00000584 5E                      	pop rsi
   978 00000585 5B                      	pop rbx
   979 00000586 C3                      	ret
   980                                  bits 32
   981                                  ;asm_task_switch32_2(unsigned int *old_esp,tss32 *new_esp)
   982                                  asm_task_switch32_2:
   983 00000587 55                      	push ebp
   984 00000588 89E5                    	mov ebp,esp
   985 0000058A 8B4D08                  	mov ecx,[ebp+8]
   986 0000058D 8B550C                  	mov edx,[ebp+12]
   987 00000590 E802000000              	call .start
   988                                  	;恢复环境的代码
   989 00000595 5D                      	pop ebp
   990 00000596 C3                      	ret
   991                                  .start:
   992                                  	;保存环境的代码
   993 00000597 53                      	push ebx
   994 00000598 56                      	push esi
   995 00000599 57                      	push edi
   996 0000059A 55                      	push ebp
   997 0000059B 0F20D8                  	mov eax,cr3
   998 0000059E 50                      	push eax
   999 0000059F 9C                      	pushfd
  1000 000005A0 50                      	push eax
  1001 000005A1 8921                    	mov [ecx],esp
  1002                                  	;加载环境的代码
  1003 000005A3 8B02                    	mov eax,[edx]
  1004 000005A5 8B503C                  	mov edx,[eax+15*4]
  1005 000005A8 89D5                    	mov ebp,edx
  1006 000005AA 8B5040                  	mov edx,[eax+16*4]
  1007 000005AD 89D6                    	mov esi,edx
  1008 000005AF 8B5044                  	mov edx,[eax+17*4]
  1009 000005B2 89D7                    	mov edi,edx
  1010 000005B4 8B5048                  	mov edx,[eax+18*4]
  1011 000005B7 8EC2                    	mov es,edx
  1012 000005B9 8B5058                  	mov edx,[eax+22*4]
  1013 000005BC 8EE2                    	mov fs,edx
  1014 000005BE 8B505C                  	mov edx,[eax+23*4]
  1015 000005C1 8EEA                    	mov gs,edx
  1016 000005C3 89C4                    	mov esp,eax
  1017 000005C5 61                      	popad
  1018 000005C6 CB                      	retf
  1019 000005C7 C3                      	ret
  1020                                  bits 64
  1021                                  ;void asm_vmptrld(unsigned int vmcs_point)
  1022                                  asm_vmptrld:
  1023 000005C8 488B442408              	mov rax,[rsp+ip_size]
  1024 000005CD 0FC730                  	vmptrld [rax]
  1025 000005D0 C3                      	ret
  1026                                  ;void asm_vmptrst(unsigned int* vmcs_point)
  1027                                  asm_vmptrst:
  1028 000005D1 488B442408              	mov rax,[rsp+ip_size]
  1029 000005D6 0FC738                  	vmptrst [rax]
  1030 000005D9 C3                      	ret
  1031                                  ;void asm_vmclear(unsigned int vmcs_point)
  1032                                  asm_vmclear:
  1033 000005DA 488B442408              	mov rax,[rsp+ip_size]
  1034 000005DF 660FC730                	vmclear [rax]
  1035 000005E3 C3                      	ret
  1036                                  ;void asm_vmread(unsigned int index,void* data)
  1037                                  asm_vmread:
  1038 000005E4 488B442408              	mov rax,[rsp+ip_size]
  1039 000005E9 488B542410              	mov rdx,[rsp+ip_size+gpr_size]
  1040 000005EE 0F7802                  	vmread [rdx],rax
  1041 000005F1 C3                      	ret
  1042                                  ;void asm_vmread(unsigned int index,void data)
  1043                                  asm_vmwrite:
  1044 000005F2 488B442408              	mov rax,[rsp+ip_size]
  1045 000005F7 488B542410              	mov rdx,[rsp+ip_size+gpr_size]
  1046 000005FC 0F79C2                  	vmwrite rax,rdx
  1047 000005FF C3                      	ret
  1048                                  asm_vmxon:
  1049                                  	
  1050                                  asm_x64_cs_init:
  1051 00000600 48                      	db 0x48
  1052 00000601 CB                      	retf
  1053                                  asm_get_cs:
  1054 00000602 8CC8                    	mov rax,cs
  1055 00000604 C3                      	ret
