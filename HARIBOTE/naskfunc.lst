     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  ;FORMAT "WCOFF"				; „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Éï„Ç°„Ç§„É´„Çí‰Ωú„Çã„É¢„Éº„ÉÅE
     5                                  ;INSTRSET "i486p"				; 486„ÅÆÂëΩ‰ª§„Åæ„Åß‰Ωø„ÅÅEÅü„ÅÅEÅ®„ÅÅEÅÜË®òËø∞
     6                                  BITS 32						; 32„Éì„ÉÉ„Éà„É¢„Éº„ÉâÁî®„ÅÆÊ©üÊ¢∞Ë™û„Çí‰Ωú„Çâ„Åõ„Çã
     7                                  ;FILE "naskfunc.nas"			; „ÇΩ„Éº„Çπ„Éï„Ç°„Ç§„É´ÂêçÊÉÖÂ†±
     8                                  
     9                                  		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10                                  		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11                                  		GLOBAL	_io_out8, _io_out16, _io_out32
    12                                  		GLOBAL	_io_load_eflags, _io_store_eflags
    13                                  		GLOBAL	_load_gdtr, _load_idtr
    14                                  		GLOBAL	_load_cr0, _store_cr0
    15                                  		GLOBAL	_load_cr3, _store_cr3
    16                                  		GLOBAL _load_cr4, _store_cr4
    17                                  		GLOBAL	_load_tr
    18                                  		GLOBAL	_asm_inthandler20, _asm_inthandler21
    19                                  		GLOBAL	_asm_inthandler2c, _asm_inthandler0c , _asm_inthandler34, _asm_inthandler0e
    20                                  		GLOBAL	_asm_inthandler0d, _asm_end_app
    21                                  		GLOBAL	_memtest_sub
    22                                  		GLOBAL	_farjmp, _farcall
    23                                  		GLOBAL	_asm_hrb_api, _start_app
    24                                  		GLOBAL _sys_nop , _asm_sse_strcmp
    25                                  		;GLOBAL	_memset,_strcpy,_strcmp
    26                                  		global	_support_apic, _io_wrmsr, _io_rdmsr, _test2, _get_lock, _rdrand
    27                                  		global	_store_gdt, _store_idt,_sys_reboot,_sys_call,_test3
    28                                  		EXTERN	_inthandler20, _inthandler21
    29                                  		EXTERN	_inthandler2c, _inthandler0d
    30                                  		EXTERN	_inthandler0c, _inthandler0e , _inthandler34
    31                                  		EXTERN	_hrb_api
    32                                  		tpm_command equ 0xfed40000      ;TPMÂëΩ‰ª§ÂØÑÂ≠òÂô®Âú∞ÂùÄ
    33                                  		tpm_status equ 0xfed40014       ;TPMÁä∂ÊÄÅÂØÑÂ≠òÂô®Âú∞ÂùÄ
    34                                  ; ‰∏Ä‰∏™Êé•Êî∂ÊåáÈíàÂèÇÊï∞ÁöÑ VMXON Êåá‰ª§ÂÆèÂÆö‰πâ
    35                                  
    36                                  SECTION .text
    37                                  
    38                                  _io_hlt:	; void io_hlt(void);
    39 00000000 F4                      		HLT
    40 00000001 C3                      		RET
    41                                  
    42                                  _io_cli:	; void io_cli(void);
    43 00000002 FA                      		CLI
    44 00000003 C3                      		RET
    45                                  
    46                                  _io_sti:	; void io_sti(void);
    47 00000004 FB                      		STI
    48 00000005 C3                      		RET
    49                                  
    50                                  _io_stihlt:	; void io_stihlt(void);
    51 00000006 FB                      		STI
    52 00000007 F4                      		HLT
    53 00000008 C3                      		RET
    54                                  
    55                                  _io_in8:	; int io_in8(int port);
    56 00000009 8B542404                		MOV		EDX,[ESP+4]		; port
    57 0000000D B800000000              		MOV		EAX,0
    58 00000012 EC                      		IN		AL,DX
    59 00000013 C3                      		RET
    60                                  
    61                                  _io_in16:	; int io_in16(int port);
    62 00000014 8B542404                		MOV		EDX,[ESP+4]		; port
    63 00000018 B800000000              		MOV		EAX,0
    64 0000001D 66ED                    		IN		AX,DX
    65 0000001F C3                      		RET
    66                                  
    67                                  _io_in32:	; int io_in32(int port);
    68 00000020 8B542404                		MOV		EDX,[ESP+4]		; port
    69 00000024 ED                      		IN		EAX,DX
    70 00000025 C3                      		RET
    71                                  
    72                                  _io_out8:	; void io_out8(int port, int data);
    73 00000026 8B542404                		MOV		EDX,[ESP+4]		; port
    74 0000002A 8A442408                		MOV		AL,[ESP+8]		; data
    75 0000002E EE                      		OUT		DX,AL
    76 0000002F C3                      		RET
    77                                  
    78                                  _io_out16:	; void io_out16(int port, int data);
    79 00000030 8B542404                		MOV		EDX,[ESP+4]		; port
    80 00000034 8B442408                		MOV		EAX,[ESP+8]		; data
    81 00000038 66EF                    		OUT		DX,AX
    82 0000003A C3                      		RET
    83                                  
    84                                  _io_out32:	; void io_out32(int port, int data);
    85 0000003B 8B542404                		MOV		EDX,[ESP+4]		; port
    86 0000003F 8B442408                		MOV		EAX,[ESP+8]		; data
    87 00000043 EF                      		OUT		DX,EAX
    88 00000044 C3                      		RET
    89                                  
    90                                  _io_load_eflags:	; int io_load_eflags(void);
    91 00000045 9C                      		PUSHFD		; PUSH EFLAGS „Å®„ÅÅEÅÜÊÑèÂë≥
    92 00000046 58                      		POP		EAX
    93 00000047 C3                      		RET
    94                                  
    95                                  _io_store_eflags:	; void io_store_eflags(int eflags);
    96                                  		;push eax
    97 00000048 8B442404                		MOV		EAX,[ESP+4]
    98 0000004C 50                      		PUSH	EAX
    99 0000004D 9D                      		POPFD		; POP EFLAGS „Å®„ÅÅEÅÜÊÑèÂë≥
   100                                  		;pop eax
   101 0000004E C3                      		RET
   102                                  
   103                                  _load_gdtr:		; void load_gdtr(int limit, int addr);
   104                                  		;push eax
   105 0000004F 668B442404              		MOV		AX,[ESP+4]		; limit
   106 00000054 6689442406              		MOV		[ESP+6],AX
   107 00000059 0F01542406              		LGDT	[ESP+6]
   108                                  		;pop eax
   109 0000005E C3                      		RET
   110                                  
   111                                  _load_idtr:		; void load_idtr(int limit, int addr);
   112                                  		;push eax
   113 0000005F 668B442404              		MOV		AX,[ESP+4]		; limit
   114 00000064 6689442406              		MOV		[ESP+6],AX
   115 00000069 0F015C2406              		LIDT	[ESP+6]
   116                                  		;pop eax
   117 0000006E C3                      		RET
   118                                  
   119                                  _load_cr0:		; int load_cr0(void);
   120 0000006F 0F20C0                  		MOV		EAX,CR0
   121 00000072 C3                      		RET
   122                                  
   123                                  _store_cr0:		; void store_cr0(int cr0);
   124                                  		;push eax
   125 00000073 8B442404                		MOV		EAX,[ESP+4]
   126 00000077 0F22C0                  		MOV		CR0,EAX
   127                                  		;pop eax
   128 0000007A 90                      		nop
   129 0000007B 90                      		nop
   130 0000007C C3                      		RET
   131                                  		
   132                                  _load_cr3:		; int load_cr3(void);
   133 0000007D 0F20D8                  		MOV		EAX,CR3
   134 00000080 C3                      		RET
   135                                  
   136                                  _store_cr3:		; void store_cr3(int cr0);
   137                                  		;push eax 
   138 00000081 8B442404                		MOV		EAX,[ESP+4]
   139 00000085 0F22D8                  		MOV		CR3,EAX
   140                                  		;pop eax
   141 00000088 C3                      		RET
   142                                  
   143                                  _load_tr:		; void load_tr(int tr);
   144 00000089 0F005C2404              		LTR		[ESP+4]			; tr
   145 0000008E C3                      		RET
   146                                  _load_cr4:
   147 0000008F 8B442404                		mov eax,[esp+4]
   148 00000093 0F22E0                  		mov cr4,eax
   149 00000096 C3                      		ret
   150                                  _store_cr4:
   151 00000097 0F20E0                  		mov eax,cr4
   152 0000009A C3                      		ret
   153                                  		
   154                                  _asm_inthandler20:
   155 0000009B 06                      		PUSH	ES
   156 0000009C 1E                      		PUSH	DS
   157 0000009D 60                      		PUSHAD
   158 0000009E 89E0                    		MOV		EAX,ESP
   159 000000A0 50                      		PUSH	EAX
   160 000000A1 668CD0                  		MOV		AX,SS
   161 000000A4 8ED8                    		MOV		DS,AX
   162 000000A6 8EC0                    		MOV		ES,AX
   163 000000A8 E8(00000000)            		CALL	_inthandler20
   164 000000AD 58                      		POP		EAX
   165 000000AE 61                      		POPAD
   166 000000AF 1F                      		POP		DS
   167 000000B0 07                      		POP		ES
   168 000000B1 CF                      		IRETD
   169                                  
   170                                  _asm_inthandler21:
   171 000000B2 06                      		PUSH	ES
   172 000000B3 1E                      		PUSH	DS
   173 000000B4 60                      		PUSHAD
   174 000000B5 89E0                    		MOV		EAX,ESP
   175 000000B7 50                      		PUSH	EAX
   176 000000B8 668CD0                  		MOV		AX,SS
   177 000000BB 8ED8                    		MOV		DS,AX
   178 000000BD 8EC0                    		MOV		ES,AX
   179 000000BF E8(00000000)            		CALL	_inthandler21
   180 000000C4 58                      		POP		EAX
   181 000000C5 61                      		POPAD
   182 000000C6 1F                      		POP		DS
   183 000000C7 07                      		POP		ES
   184 000000C8 CF                      		IRETD
   185                                  
   186                                  _asm_inthandler2c:
   187 000000C9 06                      		PUSH	ES
   188 000000CA 1E                      		PUSH	DS
   189 000000CB 60                      		PUSHAD
   190 000000CC 89E0                    		MOV		EAX,ESP
   191 000000CE 50                      		PUSH	EAX
   192 000000CF 668CD0                  		MOV		AX,SS
   193 000000D2 8ED8                    		MOV		DS,AX
   194 000000D4 8EC0                    		MOV		ES,AX
   195 000000D6 E8(00000000)            		CALL	_inthandler2c
   196 000000DB 58                      		POP		EAX
   197 000000DC 61                      		POPAD
   198 000000DD 1F                      		POP		DS
   199 000000DE 07                      		POP		ES
   200 000000DF CF                      		IRETD
   201                                  
   202                                  _asm_inthandler34:
   203 000000E0 06                      		PUSH	ES
   204 000000E1 1E                      		PUSH	DS
   205 000000E2 60                      		PUSHAD
   206 000000E3 89E0                    		MOV		EAX,ESP
   207 000000E5 50                      		PUSH	EAX
   208 000000E6 668CD0                  		MOV		AX,SS
   209 000000E9 8ED8                    		MOV		DS,AX
   210 000000EB 8EC0                    		MOV		ES,AX
   211 000000ED E8(00000000)            		CALL	_inthandler34
   212 000000F2 58                      		POP		EAX
   213 000000F3 61                      		POPAD
   214 000000F4 1F                      		POP		DS
   215 000000F5 07                      		POP		ES
   216 000000F6 CF                      		IRETD
   217                                  
   218                                  _asm_inthandler0c:
   219 000000F7 FB                      		STI
   220 000000F8 06                      		PUSH	ES
   221 000000F9 1E                      		PUSH	DS
   222 000000FA 60                      		PUSHAD
   223 000000FB 89E0                    		MOV		EAX,ESP
   224 000000FD 50                      		PUSH	EAX
   225 000000FE 668CD0                  		MOV		AX,SS
   226 00000101 8ED8                    		MOV		DS,AX
   227 00000103 8EC0                    		MOV		ES,AX
   228 00000105 E8(00000000)            		CALL	_inthandler0c
   229 0000010A 83F800                  		CMP		EAX,0
   230 0000010D 0F85BC000000            		JNE		_asm_end_app
   231 00000113 58                      		POP		EAX
   232 00000114 61                      		POPAD
   233 00000115 1F                      		POP		DS
   234 00000116 07                      		POP		ES
   235 00000117 83C404                  		ADD		ESP,4			; INT 0x0c „Åß„ÇÇ„ÄÅ„Åì„Çå„ÅåÂøÅE¶ÅE
   236 0000011A CF                      		IRETD
   237                                  
   238                                  _asm_inthandler0d:
   239 0000011B FB                      		STI
   240 0000011C 06                      		PUSH	ES
   241 0000011D 1E                      		PUSH	DS
   242 0000011E 60                      		PUSHAD
   243 0000011F 89E0                    		MOV		EAX,ESP
   244 00000121 50                      		PUSH	EAX
   245 00000122 668CD0                  		MOV		AX,SS
   246 00000125 8ED8                    		MOV		DS,AX
   247 00000127 8EC0                    		MOV		ES,AX
   248 00000129 E8(00000000)            		CALL	_inthandler0d
   249 0000012E 83F800                  		CMP		EAX,0			; „Åì„Åì„Å†„ÅëÈÅï„ÅÅE
   250 00000131 0F8598000000            		JNE		_asm_end_app	; „Åì„Åì„Å†„ÅëÈÅï„ÅÅE
   251 00000137 58                      		POP		EAX
   252 00000138 61                      		POPAD
   253 00000139 1F                      		POP		DS
   254 0000013A 07                      		POP		ES
   255 0000013B 83C404                  		ADD		ESP,4			; INT 0x0d „Åß„ÅØ„ÄÅ„Åì„Çå„ÅåÂøÅE¶ÅE
   256 0000013E CF                      		IRETD
   257                                  
   258                                  _asm_inthandler0e:
   259 0000013F FB                      		STI
   260 00000140 06                      		PUSH	ES
   261 00000141 1E                      		PUSH	DS
   262 00000142 60                      		PUSHAD
   263 00000143 89E0                    		MOV		EAX,ESP
   264 00000145 50                      		PUSH	EAX
   265 00000146 668CD0                  		MOV		AX,SS
   266 00000149 8ED8                    		MOV		DS,AX
   267 0000014B 8EC0                    		MOV		ES,AX
   268 0000014D 0F20D0                  		MOV 	eax,cr2 ;‰øùÂ≠òÁé∞Âú∫
   269 00000150 50                      		PUSH 	eax
   270 00000151 E8(00000000)            		CALL	_inthandler0e
   271 00000156 83F800                  		CMP		EAX,0
   272 00000159 7574                    		JNE		_asm_end_app
   273 0000015B 83C404                  		ADD 	ESP,4 ;Ê∏ÅEô§Ê†à‰∏≠ÁöÅEr2
   274 0000015E 58                      		POP		EAX
   275 0000015F 61                      		POPAD
   276 00000160 1F                      		POP		DS
   277 00000161 07                      		POP		ES
   278 00000162 83C404                  		ADD		ESP,4
   279 00000165 CF                      		IRETD
   280                                  _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   281 00000166 57                      		PUSH	EDI						; ÅEÅEBX, ESI, EDI „ÇÇ‰Ωø„ÅÅEÅü„ÅÅEÅE„ÅßÅEÅE
   282 00000167 56                      		PUSH	ESI
   283 00000168 53                      		PUSH	EBX
   284 00000169 BE55AA55AA              		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   285 0000016E BFAA55AA55              		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   286 00000173 8B442410                		MOV		EAX,[ESP+12+4]			; i = start;
   287                                  mts_loop:
   288 00000177 89C3                    		MOV		EBX,EAX
   289 00000179 81C3FC0F0000            		ADD		EBX,0xffc				; p = i + 0xffc;
   290 0000017F 8B13                    		MOV		EDX,[EBX]				; old = *p;
   291 00000181 8933                    		MOV		[EBX],ESI				; *p = pat0;
   292 00000183 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   293 00000186 3B3B                    		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   294 00000188 7518                    		JNE		mts_fin
   295 0000018A 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   296 0000018D 3B33                    		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   297 0000018F 7511                    		JNE		mts_fin
   298 00000191 8913                    		MOV		[EBX],EDX				; *p = old;
   299 00000193 0500100000              		ADD		EAX,0x1000				; i += 0x1000;
   300 00000198 3B442414                		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   301 0000019C 76D9                    		JBE		mts_loop
   302 0000019E 5B                      		POP		EBX
   303 0000019F 5E                      		POP		ESI
   304 000001A0 5F                      		POP		EDI
   305 000001A1 C3                      		RET
   306                                  mts_fin:
   307 000001A2 8913                    		MOV		[EBX],EDX				; *p = old;
   308 000001A4 5B                      		POP		EBX
   309 000001A5 5E                      		POP		ESI
   310 000001A6 5F                      		POP		EDI
   311 000001A7 C3                      		RET
   312                                  
   313                                  _farjmp:		; void farjmp(int eip, int cs);
   314 000001A8 FF6C2404                		JMP		FAR	[ESP+4]				; eip, cs
   315 000001AC C3                      		RET
   316                                  
   317                                  _farcall:		; void farcall(int eip, int cs);
   318 000001AD FF5C2404                		CALL	FAR	[ESP+4]				; eip, cs
   319 000001B1 C3                      		RET
   320                                  
   321                                  _asm_hrb_api:
   322 000001B2 FB                      		STI
   323 000001B3 1E                      		PUSH	DS
   324 000001B4 06                      		PUSH	ES
   325 000001B5 60                      		PUSHAD		; ‰øùÂ≠ò„ÅE„Åü„ÇÅ„ÅÆPUSH
   326 000001B6 60                      		PUSHAD		; hrb_api„Å´„Çè„Åü„Åô„Åü„ÇÅ„ÅEPUSH
   327 000001B7 668CD0                  		MOV		AX,SS
   328 000001BA 8ED8                    		MOV		DS,AX		; OSÁî®„ÅÆ„Çª„Ç∞„É°„É≥„Éà„ÇíDS„Å®ES„Å´„ÇÇÂÅE„Çå„Çã
   329 000001BC 8EC0                    		MOV		ES,AX
   330 000001BE E8(00000000)            		CALL	_hrb_api
   331 000001C3 83F800                  		CMP		EAX,0		; EAX„ÅÅE„Åß„Å™„Åë„Çå„Å∞„Ç¢„Éó„É™ÁµÇ‰∫ÅEÅEÁêÅE
   332 000001C6 7507                    		JNE		_asm_end_app
   333 000001C8 83C420                  		ADD		ESP,32
   334 000001CB 61                      		POPAD
   335 000001CC 07                      		POP		ES
   336 000001CD 1F                      		POP		DS
   337 000001CE CF                      		IRETD
   338                                  _asm_end_app:
   339                                  ;	EAX„ÅØtss.esp0„ÅÆÁï™Âú∞
   340 000001CF 8B20                    		MOV		ESP,[EAX]
   341 000001D1 C7400400000000          		MOV		DWORD [EAX+4],0
   342 000001D8 61                      		POPAD
   343 000001D9 C3                      		RET					; cmd_app„Å∏Â∏∞„ÇÅE
   344                                  
   345                                  _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   346 000001DA 60                      		PUSHAD		; 32„Éì„ÉÉ„Éà„É¨„Ç∏„Çπ„Çø„ÇíÂÅEÈÉ®‰øùÂ≠ò„Åó„Å¶„Åä„Åè
   347 000001DB 8B542424                		MOV		EDX,[ESP+36]	; „Ç¢„Éó„É™Áî®„ÅÆEIP
   348 000001DF 8B442428                		MOV		EAX,[ESP+40]	; „Ç¢„Éó„É™Áî®„ÅÆCS
   349 000001E3 8B4C242C                		MOV		ECX,[ESP+44]	; „Ç¢„Éó„É™Áî®„ÅÆESP
   350 000001E7 8B5C2430                		MOV		EBX,[ESP+48]	; „Ç¢„Éó„É™Áî®„ÅÆDS/SS
   351 000001EB 8B6C2434                		MOV		EBP,[ESP+52]	; tss.esp0„ÅÆÁï™Âú∞
   352 000001EF 896500                  		MOV		[EBP  ],ESP		; OSÁî®„ÅÆESP„Çí‰øùÂ≠ÅE
   353 000001F2 8C5504                  		MOV		[EBP+4],SS		; OSÁî®„ÅÆSS„Çí‰øùÂ≠ÅE
   354 000001F5 8EC3                    		MOV		ES,BX
   355 000001F7 8EDB                    		MOV		DS,BX
   356 000001F9 8EE3                    		MOV		FS,BX
   357 000001FB 8EEB                    		MOV		GS,BX
   358                                  		;db 0x0f,0x35;sys_ret
   359                                  ;	‰ª•‰∏ã„ÅERETF„Åß„Ç¢„Éó„É™„Å´Ë°å„Åã„Åõ„Çã„Åü„ÇÅ„ÅÆ„Çπ„Çø„ÉÅEÇØË™øÊï¥
   360 000001FD 83C803                  		OR		EAX,3			; „Ç¢„Éó„É™Áî®„ÅÆ„Çª„Ç∞„É°„É≥„ÉàÁï™Âè∑„Å´3„ÇíOR„Åô„Çã
   361 00000200 83CB03                  		OR		EBX,3			; „Ç¢„Éó„É™Áî®„ÅÆ„Çª„Ç∞„É°„É≥„ÉàÁï™Âè∑„Å´3„ÇíOR„Åô„Çã
   362 00000203 53                      		PUSH	EBX				; „Ç¢„Éó„É™„ÅÆSS
   363 00000204 51                      		PUSH	ECX				; „Ç¢„Éó„É™„ÅÆESP
   364 00000205 50                      		PUSH	EAX				; „Ç¢„Éó„É™„ÅÆCS
   365 00000206 52                      		PUSH	EDX				; „Ç¢„Éó„É™„ÅÆEIP
   366 00000207 CB                      		RETF
   367                                  ;	„Ç¢„Éó„É™„ÅåÁµÇ‰∫ÅEÅó„Å¶„ÇÇ„Åì„Åì„Å´„ÅØÊù•„Å™„ÅÅE
   368                                  _strcmp:	;int strcmp(char* s,char* t,int longer);
   369 00000208 56                      	push esi;
   370 00000209 57                      	push edi;
   371 0000020A 51                      	push ecx;
   372 0000020B 8B742404                	mov esi,[esp+4]
   373 0000020F 8B7C2408                	mov edi,[esp+8]
   374 00000213 8B4C240C                	mov ecx,[esp+12]
   375 00000217 F2A7                    	repne cmpsd
   376 00000219 89C8                    	mov eax,ecx
   377 0000021B 59                      	pop ecx
   378 0000021C 5F                      	pop edi
   379 0000021D 5E                      	pop esi
   380 0000021E C3                      	ret
   381                                  _strcpy:	;void strcpy(char* s,char* t,int longer);
   382 0000021F 56                      	push esi;
   383 00000220 57                      	push edi;
   384 00000221 51                      	push ecx;
   385 00000222 8B742404                	mov esi,[esp+4]
   386 00000226 8B7C2408                	mov edi,[esp+8]
   387 0000022A 8B4C240C                	mov ecx,[esp+12]
   388                                  	;db 0xf3,0xa5;rep movsb
   389 0000022E F3A4                    	rep movsb
   390 00000230 59                      	pop ecx
   391 00000231 5F                      	pop edi
   392 00000232 5E                      	pop esi
   393 00000233 C3                      	ret
   394                                  _memset:	;void memset(char* s,int num,int longer)
   395 00000234 57                      	push edi
   396 00000235 50                      	push eax
   397 00000236 51                      	push ecx
   398 00000237 8B7C2404                	mov edi,[esp+4]
   399 0000023B 8B442408                	mov eax,[esp+8]
   400 0000023F 8B4C240C                	mov ecx,[esp+12]
   401 00000243 F3AA                    	rep stosb
   402 00000245 59                      	pop ecx
   403 00000246 58                      	pop eax
   404 00000247 5F                      	pop edi
   405 00000248 C3                      	ret
   406                                  _support_apic: ;int support_apic(void):
   407 00000249 52                      	push edx
   408 0000024A B801000000              	mov eax,1
   409                                  	;db 0x0f,0xa2 ;cpuid 
   410 0000024F 0FA2                    	cpuid
   411 00000251 0FBAE209                	bt edx,9
   412 00000255 0F92C0                  	setc al
   413 00000258 0FB6C0                  	movzx eax,al
   414 0000025B 5A                      	pop edx
   415 0000025C C3                      	ret
   416                                  _io_rdmsr: ;void io_rdmsr(int* edx,int* eax,int ecx)
   417 0000025D 52                      	push edx
   418 0000025E 51                      	push ecx
   419 0000025F 50                      	push eax
   420 00000260 8B4C2418                	mov ecx,[esp+24]
   421                                  	;db 0x0f,0x32 ;rdmsr
   422 00000264 0F32                    	rdmsr
   423 00000266 8B4C2410                	mov ecx,[esp+16]
   424 0000026A 8911                    	mov [ecx],edx
   425 0000026C 8B4C2414                	mov ecx,[esp+20]
   426 00000270 8901                    	mov [ecx],eax
   427 00000272 58                      	pop eax
   428 00000273 59                      	pop ecx
   429 00000274 5A                      	pop edx
   430 00000275 C3                      	ret
   431                                  _io_wrmsr: ;void io_wrmsr(int edx,int eax,int ecx)
   432 00000276 52                      	push edx
   433 00000277 51                      	push ecx
   434 00000278 50                      	push eax
   435 00000279 8B542410                	mov edx,[esp+16]
   436 0000027D 8B442414                	mov eax,[esp+20]
   437 00000281 8B4C2418                	mov ecx,[esp+24]
   438                                  	;db 0x0f,0x30 ;wrmsr
   439 00000285 0F30                    	wrmsr
   440 00000287 58                      	pop eax
   441 00000288 59                      	pop ecx
   442 00000289 5A                      	pop edx
   443 0000028A C3                      	ret
   444                                  _test2: ;void test(int eax,int ebx)
   445 0000028B 50                      	push eax
   446 0000028C 53                      	push ebx
   447 0000028D 8B44240C                	mov eax,[esp+12]
   448 00000291 8B5C2410                	mov ebx,[esp+16]
   449 00000295 0F0B                    	db 0x0f,0x0b ;ud2
   450                                  .fin:
   451 00000297 FA                      	cli
   452 00000298 F4                      	hlt
   453 00000299 EBFC                    	jmp .fin
   454 0000029B 5B                      	pop ebx
   455 0000029C 58                      	pop eax
   456 0000029D C3                      	ret
   457                                  _get_lock: ;int get_lock(int* lock,int bit)
   458 0000029E 55                      	push ebp
   459 0000029F 89E5                    	mov ebp,esp
   460 000002A1 51                      	push ecx
   461 000002A2 52                      	push edx
   462 000002A3 8B5D08                  	mov ebx,[ebp+8]
   463 000002A6 8B4D0C                  	mov ecx,[ebp+12]
   464 000002A9 F00FAB0B                	lock bts dword [ebx],ecx
   465 000002AD 31C0                    	xor eax,eax
   466 000002AF 11C0                    	adc eax,eax
   467 000002B1 5A                      	pop edx
   468 000002B2 59                      	pop ecx
   469 000002B3 89EC                    	mov esp,ebp
   470 000002B5 5D                      	pop ebp
   471 000002B6 C3                      	ret
   472                                  _store_gdt: ;void store_gdt(void* addr)
   473 000002B7 50                      	push eax
   474 000002B8 8B442408                	mov eax,[esp+8]
   475 000002BC 0F0100                  	sgdt [eax]
   476 000002BF 58                      	pop eax
   477 000002C0 C3                      	ret
   478                                  _store_idt: ;void store_gdt(void* addr)
   479 000002C1 50                      	push eax
   480 000002C2 8B442408                	mov eax,[esp+8]
   481 000002C6 0F0108                  	sidt [eax]
   482 000002C9 58                      	pop eax
   483 000002CA C3                      	ret
   484                                  _sys_reboot: ;void sys_reboot(void)
   485 000002CB FA                      	cli
   486 000002CC 0F20C0                  	mov eax,cr0
   487 000002CF 66BA6400                	mov dx,0x64
   488 000002D3 66B8FE00                	mov ax,0xfe
   489 000002D7 66EF                    	out dx,ax
   490                                  .fin:
   491 000002D9 F4                      	hlt
   492 000002DA EBFD                    	jmp .fin
   493                                  _sys_call:
   494 000002DC 0F35                    	db 0x0f,0x35 ;sysexit
   495                                  _test3:
   496 000002DE F4                      	db 0xf4
   497                                  .fin:
   498 000002DF EBFE                    	jmp .fin
   499                                  _support_rand: ;int support_rand()
   500                                  	
   501 000002E1 53                      	push ebx
   502 000002E2 51                      	push ecx
   503 000002E3 52                      	push edx
   504 000002E4 B801000000              	mov eax,1
   505 000002E9 0FA2                    	db 0x0f,0xa2 ;cpuid
   506 000002EB 83E100                  	and ecx,0x400000000
   507          ******************       warning: dword value exceeds bounds
   508 000002EE 0F92C0                  	db 0x0f,0x92,0xc0;setc al
   509 000002F1 5A                      	pop edx
   510 000002F2 59                      	pop ecx
   511 000002F3 5B                      	pop ebx
   512 000002F4 C3                      	ret
   513                                  _rdrand: ;int rdrand()
   514 000002F5 0FC7F0                  	db 0x0f,0xc7,0xf0 ;rnrand eax
   515                                  	;rdrand
   516 000002F8 C3                      	ret
   517                                  _invlpg:
   518 000002F9 C3                      	ret
   519                                  _tpm_init:
   520                                  	;ÂàùÂßãÂåñTPM
   521 000002FA 50                      	push eax
   522 000002FB B800F00600                  mov eax, 0x6f000
   523 00000300 A30000D4FE                  mov dword [tpm_command], eax
   524 00000305 E802000000                  call _tpm_wait_for_status
   525 0000030A 58                      	pop eax
   526 0000030B C3                      	ret
   527                                  _tpm_get_a_key:
   528                                  	
   529                                  _tpm_wait_for_status:
   530                                          ;Á≠âÂæÖTPMÁä∂ÊÄÅÂ∞±Áª™
   531 0000030C A11400D4FE                      mov eax, dword [tpm_status]
   532 00000311 2500008001                      and eax, 0x01800000
   533 00000316 3D00008000                      cmp eax, 0x00800000
   534 0000031B 75EF                            jne _tpm_wait_for_status
   535 0000031D C3                      		ret
   536                                  _sys_nop:
   537 0000031E 90                      	nop
   538 0000031F C3                      	ret
   539                                  ;unsigned int asm_sse_strcmp(char* str,char* str,unsigned,int longer)
   540                                  _asm_sse_strcmp:
   541 00000320 55                      	push ebp
   542 00000321 89E5                    	mov ebp,esp
   543                                  	
   544 00000323 8B4508                  	mov eax,[ebp+8]
   545 00000326 8B550C                  	mov edx,[ebp+12]
   546 00000329 8B4D10                  	mov ecx,[ebp+16]
   547 0000032C 53                      	push ebx
   548 0000032D 56                      	push esi
   549 0000032E 57                      	push edi
   550 0000032F 89C6                    	mov esi,eax
   551 00000331 89D7                    	mov edi,edx
   552 00000333 89CA                    	mov edx,ecx
   553                                  	;Ê∏ÖÈõ∂ËÆ°Êï∞Âô®
   554 00000335 31C0                    	xor eax,eax 
   555 00000337 0F06                    	clts
   556 00000339 660FEFD2                	pxor xmm2,xmm2
   557                                  .lp:
   558 0000033D 0F06                    	clts
   559 0000033F F30F6F0406              	movdqu xmm0, [esi+eax]
   560 00000344 F30F6F0C07              	movdqu xmm1, [edi+eax]
   561 00000349 660F3A63C118            	pcmpistri xmm0,xmm1,0x18
   562                                  	
   563 0000034F 83F910                  	cmp ecx,16
   564 00000352 751F                    	jne .fin
   565                                  	
   566                                  	;Ê£ÄÊü•‰∏§‰∏™Â≠óÁ¨¶‰∏≤‰∏≠ÊòØÂê¶Êúâ0 Â¶ÇÊûúÊúâ ËØÅÊòéÂÖ∂‰∏≠‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤Â∑≤ÁªèÁªìÊùü
   567 00000354 89CB                    	mov ebx,ecx
   568 00000356 660F3A63C204            	pcmpistri xmm0,xmm2,0x04
   569                                  	;Â¶ÇÊûúÊòØ16 ËØÅÊòéÊ≤°Êúâ‰ªª‰Ωï‰∏Ä‰∏™Â≠óÁ¨¶ÊòØÁ©∫Â≠óÁ¨¶ Â≠óÁ¨¶‰∏≤Ê≤°ÊúâÁªìÊùü
   570 0000035C 83F910                  	cmp ecx,16
   571 0000035F 7510                    	jne .fin2
   572                                  	
   573 00000361 660F3A63C204            	pcmpistri xmm0,xmm2,0x04
   574                                  	;Â¶ÇÊûúÊòØ16 ËØÅÊòéÊ≤°Êúâ‰ªª‰Ωï‰∏Ä‰∏™Â≠óÁ¨¶ÊòØÁ©∫Â≠óÁ¨¶ Â≠óÁ¨¶‰∏≤Ê≤°ÊúâÁªìÊùü
   575 00000367 83F910                  	cmp ecx,16
   576 0000036A 7505                    	jne .fin2
   577                                  	
   578 0000036C 83C010                  	add eax,16
   579 0000036F EBCC                    	jmp .lp
   580                                  .fin2:
   581 00000371 89D9                    	mov ecx,ebx
   582                                  .fin:
   583 00000373 01C8                    	add eax,ecx
   584 00000375 5F                      	pop edi
   585 00000376 5E                      	pop esi
   586 00000377 5B                      	pop ebx
   587 00000378 5D                      	pop ebp
   588 00000379 C3                      	ret
