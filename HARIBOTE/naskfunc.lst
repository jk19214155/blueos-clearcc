     1                                  ; naskfunc
     2                                  ; tab=4
     3                                  
     4                                  ;format "wcoff"				; オブジェクトファイルを作るモーチe
     5                                  ;instrset "i486p"				; 486の命令まで使ぁe��ぁe��ぁe��記述
     6                                  bits 64						; 32ビットモード用の機械語を作らせる
     7                                  ;file "naskfunc.nas"			; ソースファイル名情報
     8                                  
     9                                  		global	io_hlt, io_cli, io_sti, io_stihlt
    10                                  		global	io_in8,  io_in16,  io_in32
    11                                  		global	io_out8, io_out16, io_out32
    12                                  		global	io_load_eflags, io_store_eflags
    13                                  		global	load_gdtr, load_idtr
    14                                  		global	load_cr0, store_cr0
    15                                  		global	load_cr3, store_cr3
    16                                  		global load_cr4, store_cr4
    17                                  		global	load_tr
    18                                  		global	asm_inthandler20, asm_inthandler21
    19                                  		global	asm_inthandler2c, asm_inthandler0c , asm_inthandler34, asm_inthandler0e
    20                                  		global	asm_inthandler0d, asm_end_app
    21                                  		global	memtest_sub
    22                                  		global	farjmp, farcall
    23                                  		global	asm_hrb_api, start_app
    24                                  		global sys_nop , asm_sse_strcmp
    25                                  		;global	_memset,_strcpy,_strcmp
    26                                  		global	support_apic, io_wrmsr, io_rdmsr, test2, get_lock, rdrand
    27                                  		global	store_gdt, store_idt,sys_reboot,sys_call, test3, asm_task_switch32
    28                                  		global asm_x64_cs_init,asm_get_cs,asm_sheet_refreshsub32
    29                                  		extern	inthandler20, inthandler21
    30                                  		extern	inthandler2c, inthandler0d
    31                                  		extern	inthandler0c, inthandler0e , inthandler34
    32                                  		extern	hrb_api 
    33                                  		tpm_command equ 0xfed40000      ;tpm命令寄存器地址
    34                                  		tpm_status equ 0xfed40014       ;tpm状态寄存器地址
    35                                  ; 一个接收指针参数的 vmxon 指令宏定义
    36                                  
    37                                  ;ip_size equ 4
    38                                  ;gpr_size equ 4
    39                                  ;rax equ <eax>
    40                                  ;rbx equ <ebx>
    41                                  ;rcx equ <ecx>
    42                                  ;rdx equ <edx>
    43                                  ;rsi equ <esi>
    44                                  ;rdi equ <edi>
    45                                  ;rsp equ <esp>
    46                                  ;rbp equ <ebp>
    47                                  
    48                                  
    49                                  ip_size equ 8
    50                                  gpr_size equ 8
    51                                  
    52                                  
    53                                  section .text
    54                                  
    55                                  io_hlt:	; void io_hlt(void);
    56 00000000 F4                      		hlt
    57 00000001 C3                      		ret
    58                                  
    59                                  io_cli:	; void io_cli(void);
    60                                  
    61 00000002 FA                      		cli
    62 00000003 C3                      		ret
    63                                  
    64                                  io_sti:	; void io_sti(void);
    65                                  	
    66 00000004 FB                      		sti
    67 00000005 C3                      		ret
    68                                  
    69                                  io_stihlt:	; void io_stihlt(void);
    70 00000006 FB                      		sti
    71 00000007 F4                      		hlt
    72 00000008 C3                      		ret
    73                                  
    74                                  io_in8:	; int io_in8(int port);
    75 00000009 89CA                    		mov		edx,ecx		; port
    76 0000000B 31C0                    		xor		eax,eax
    77 0000000D EC                      		in		al,dx
    78 0000000E C3                      		ret
    79                                  
    80                                  io_in16:	; int io_in16(int port);
    81 0000000F 89CA                    		mov		edx,ecx		; port
    82 00000011 31C0                    		xor		eax,eax
    83 00000013 66ED                    		in		ax,dx
    84 00000015 C3                      		ret
    85                                  
    86                                  io_in32:	; int io_in32(int port);
    87 00000016 89CA                    		mov		edx,ecx		; port
    88 00000018 ED                      		in		eax,dx
    89 00000019 C3                      		ret
    90                                  
    91                                  io_out8:	; void io_out8(int port, int data);
    92 0000001A 89D0                    		mov		eax,edx		; data
    93 0000001C 89CA                    		mov		edx,ecx	; port
    94 0000001E EE                      		out		dx,al
    95 0000001F C3                      		ret
    96                                  
    97                                  io_out16:	; void io_out16(int port, int data);
    98 00000020 89D0                    		mov		eax,edx		; data
    99 00000022 89CA                    		mov		edx,ecx		; port
   100 00000024 66EF                    		out		dx,ax
   101 00000026 C3                      		ret
   102                                  
   103                                  io_out32:	; void io_out32(int port, int data);
   104 00000027 89D0                    		mov		eax,edx		; datas
   105 00000029 89CA                    		mov		edx,ecx		; port
   106 0000002B EF                      		out		dx,eax
   107 0000002C C3                      		ret
   108                                  
   109                                  io_load_eflags:	; int io_load_eflags(void);
   110 0000002D 9C                      		pushfq		; push eflags とぁe��意味
   111 0000002E 58                      		pop rax
   112 0000002F C3                      		ret
   113                                  io_store_eflags:	; void io_store_eflags(int eflags);
   114                                  		;push eax
   115 00000030 51                      		push rcx
   116 00000031 9D                      		popfq		; pop eflags とぁe��意味
   117                                  		;pop eax
   118 00000032 C3                      		ret
   119                                  
   120                                  load_gdtr:		; void load_gdtr(int limit, int addr);
   121                                  		;push eax
   122 00000033 52                      		push rdx
   123 00000034 6651                    		push cx
   124 00000036 0F011424                		lgdt [rsp]
   125 0000003A 4883C40A                		add rsp,10
   126                                  		;64位0特权级所有段寄存器清零
   127 0000003E 31C0                    		xor eax,eax
   128 00000040 8ED8                    		mov ds,eax
   129 00000042 8EC0                    		mov es,eax
   130 00000044 8ED0                    		mov ss,eax
   131 00000046 8EE8                    		mov gs,eax
   132 00000048 8EE0                    		mov fs,eax
   133                                  		;pop eax
   134 0000004A C3                      		ret
   135                                  
   136                                  load_idtr:		; void load_idtr(int limit, int addr);
   137 0000004B 52                      		push rdx
   138 0000004C 6651                    		push cx
   139 0000004E 0F011C24                		lidt [rsp]
   140 00000052 4883C40A                		add rsp,10
   141 00000056 C3                      		ret
   142                                  
   143                                  load_cr0:		; int load_cr0(void);
   144 00000057 0F20C0                  		mov		rax,cr0
   145 0000005A C3                      		ret
   146                                  
   147                                  store_cr0:		; void store_cr0(int cr0);
   148 0000005B 0F22C1                  		mov		cr0,rcx
   149 0000005E C3                      		ret
   150                                  		
   151                                  load_cr3:		; int load_cr3(void);
   152 0000005F 0F20D8                  		mov		rax,cr3
   153 00000062 C3                      		ret
   154                                  
   155                                  store_cr3:		; void store_cr3(int cr0);
   156 00000063 0F22D9                  		mov		cr3,rcx
   157 00000066 C3                      		ret
   158                                  
   159                                  load_tr:		; void load_tr(int tr);
   160 00000067 0F00D9                  		ltr		cx
   161 0000006A C3                      		ret
   162                                  load_cr4:
   163 0000006B 0F22E1                  		mov cr4,rcx
   164 0000006E C3                      		ret
   165                                  store_cr4:
   166 0000006F 0F20E0                  		mov rax,cr4
   167 00000072 C3                      		ret
   168                                  		
   169                                  asm_inthandler20:
   170 00000073 50                      		push rax
   171                                  		
   172 00000074 8CC0                    		mov eax,es
   173 00000076 50                      		push rax
   174 00000077 8CD8                    		mov eax,ds
   175 00000079 50                      		push rax
   176                                  		
   177 0000007A 50                      		push rax
   178 0000007B 51                      		push rcx
   179 0000007C 52                      		push rdx
   180 0000007D 53                      		push rbx
   181 0000007E 56                      		push rsi
   182 0000007F 57                      		push rdi
   183 00000080 55                      		push rbp
   184 00000081 4150                    		push r8
   185 00000083 4151                    		push r9
   186 00000085 4152                    		push r10
   187 00000087 4153                    		push r11
   188 00000089 4154                    		push r12
   189 0000008B 4155                    		push r13
   190 0000008D 4156                    		push r14
   191 0000008F 4157                    		push r15
   192                                  		
   193 00000091 4889E0                  		mov		rax,rsp
   194 00000094 4889C1                  		mov 	rcx,rax
   195 00000097 668CD0                  		mov		ax,ss
   196 0000009A 8ED8                    		mov		ds,ax
   197 0000009C 8EC0                    		mov		es,ax
   198 0000009E E8(00000000)            		call	inthandler20
   199                                  		
   200 000000A3 415F                    		pop r15
   201 000000A5 415E                    		pop r14
   202 000000A7 415D                    		pop r13
   203 000000A9 415C                    		pop r12
   204 000000AB 415B                    		pop r11
   205 000000AD 415A                    		pop r10
   206 000000AF 4159                    		pop r9
   207 000000B1 4158                    		pop r8
   208 000000B3 5D                      		pop rbp
   209 000000B4 5F                      		pop rdi
   210 000000B5 5E                      		pop rsi
   211 000000B6 5B                      		pop rbx
   212 000000B7 5A                      		pop rdx
   213 000000B8 59                      		pop rcx
   214 000000B9 58                      		pop rax
   215                                  		
   216 000000BA 58                      		pop rax
   217 000000BB 8ED8                    		mov ds,eax
   218 000000BD 58                      		pop rax
   219 000000BE 8EC0                    		mov es,eax
   220                                  		
   221 000000C0 58                      		pop rax
   222 000000C1 48                      		db 0x48
   223 000000C2 CF                      		iret
   224                                  
   225                                  asm_inthandler21:
   226 000000C3 50                      		push rax
   227                                  		
   228 000000C4 8CC0                    		mov eax,es
   229 000000C6 50                      		push rax
   230 000000C7 8CD8                    		mov eax,ds
   231 000000C9 50                      		push rax
   232                                  		
   233 000000CA 50                      		push rax
   234 000000CB 51                      		push rcx
   235 000000CC 52                      		push rdx
   236 000000CD 53                      		push rbx
   237 000000CE 56                      		push rsi
   238 000000CF 57                      		push rdi
   239 000000D0 55                      		push rbp
   240 000000D1 4150                    		push r8
   241 000000D3 4151                    		push r9
   242 000000D5 4152                    		push r10
   243 000000D7 4153                    		push r11
   244 000000D9 4154                    		push r12
   245 000000DB 4155                    		push r13
   246 000000DD 4156                    		push r14
   247 000000DF 4157                    		push r15
   248                                  		
   249 000000E1 4889E0                  		mov		rax,rsp
   250 000000E4 4889C1                  		mov		rcx,rax
   251 000000E7 668CD0                  		mov		ax,ss
   252 000000EA 8ED8                    		mov		ds,ax
   253 000000EC 8EC0                    		mov		es,ax
   254 000000EE E8(00000000)            		call	inthandler21
   255                                  		
   256 000000F3 415F                    		pop r15
   257 000000F5 415E                    		pop r14
   258 000000F7 415D                    		pop r13
   259 000000F9 415C                    		pop r12
   260 000000FB 415B                    		pop r11
   261 000000FD 415A                    		pop r10
   262 000000FF 4159                    		pop r9
   263 00000101 4158                    		pop r8
   264 00000103 5D                      		pop rbp
   265 00000104 5F                      		pop rdi
   266 00000105 5E                      		pop rsi
   267 00000106 5B                      		pop rbx
   268 00000107 5A                      		pop rdx
   269 00000108 59                      		pop rcx
   270 00000109 59                      		pop rcx
   271 0000010A 58                      		pop rax
   272                                  		
   273 0000010B 8ED8                    		mov ds,eax
   274 0000010D 58                      		pop rax
   275 0000010E 8EC0                    		mov es,eax
   276 00000110 58                      		pop rax
   277 00000111 48                      		db 0x48
   278 00000112 CF                      		iret
   279                                  
   280                                  asm_inthandler2c:
   281 00000113 50                      		push rax
   282 00000114 8CC0                    		mov eax,es
   283 00000116 50                      		push rax
   284 00000117 8CD8                    		mov eax,ds
   285 00000119 50                      		push rax
   286                                  		
   287 0000011A 50                      		push rax
   288 0000011B 51                      		push rcx
   289 0000011C 52                      		push rdx
   290 0000011D 53                      		push rbx
   291 0000011E 56                      		push rsi
   292 0000011F 57                      		push rdi
   293 00000120 55                      		push rbp
   294 00000121 4150                    		push r8
   295 00000123 4151                    		push r9
   296 00000125 4152                    		push r10
   297 00000127 4153                    		push r11
   298 00000129 4154                    		push r12
   299 0000012B 4155                    		push r13
   300 0000012D 4156                    		push r14
   301 0000012F 4157                    		push r15
   302                                  		
   303 00000131 4889E1                  		mov		rcx,rsp
   304 00000134 4831C0                  		xor		rax,rax
   305 00000137 8ED8                    		mov		ds,ax
   306 00000139 8EC0                    		mov		es,ax
   307 0000013B E8(00000000)            		call	inthandler2c
   308 00000140 415F                    		pop r15
   309 00000142 415E                    		pop r14
   310 00000144 415D                    		pop r13
   311 00000146 415C                    		pop r12
   312 00000148 415B                    		pop r11
   313 0000014A 415A                    		pop r10
   314 0000014C 4159                    		pop r9
   315 0000014E 4158                    		pop r8
   316 00000150 5D                      		pop rbp
   317 00000151 5F                      		pop rdi
   318 00000152 5E                      		pop rsi
   319 00000153 5B                      		pop rbx
   320 00000154 5A                      		pop rdx
   321 00000155 59                      		pop rcx
   322 00000156 58                      		pop rax
   323                                  		
   324 00000157 58                      		pop rax
   325 00000158 8ED8                    		mov ds,eax
   326 0000015A 58                      		pop rax
   327 0000015B 8EC0                    		mov es,eax
   328 0000015D 58                      		pop rax
   329 0000015E 48                      		db 0x48
   330 0000015F CF                      		iret
   331                                  
   332                                  asm_inthandler34:
   333 00000160 50                      		push rax
   334 00000161 8CC0                    		mov eax,es
   335 00000163 50                      		push rax
   336 00000164 8CD8                    		mov eax,ds
   337 00000166 50                      		push rax
   338                                  		
   339 00000167 50                      		push rax
   340 00000168 51                      		push rcx
   341 00000169 52                      		push rdx
   342 0000016A 53                      		push rbx
   343 0000016B 56                      		push rsi
   344 0000016C 57                      		push rdi
   345 0000016D 55                      		push rbp
   346 0000016E 4150                    		push r8
   347 00000170 4151                    		push r9
   348 00000172 4152                    		push r10
   349 00000174 4153                    		push r11
   350 00000176 4154                    		push r12
   351 00000178 4155                    		push r13
   352 0000017A 4156                    		push r14
   353 0000017C 4157                    		push r15
   354                                  		
   355 0000017E 4889E1                  		mov		rcx,rsp
   356 00000181 668CD0                  		mov		ax,ss
   357 00000184 8ED8                    		mov		ds,ax
   358 00000186 8EC0                    		mov		es,ax
   359 00000188 E8(00000000)            		call	inthandler34
   360 0000018D 415F                    		pop r15
   361 0000018F 415E                    		pop r14
   362 00000191 415D                    		pop r13
   363 00000193 415C                    		pop r12
   364 00000195 415B                    		pop r11
   365 00000197 415A                    		pop r10
   366 00000199 4159                    		pop r9
   367 0000019B 4158                    		pop r8
   368 0000019D 5D                      		pop rbp
   369 0000019E 5F                      		pop rdi
   370 0000019F 5E                      		pop rsi
   371 000001A0 5B                      		pop rbx
   372 000001A1 5A                      		pop rdx
   373 000001A2 59                      		pop rcx
   374 000001A3 58                      		pop rax
   375                                  		
   376 000001A4 58                      		pop rax
   377 000001A5 8ED8                    		mov ds,eax
   378 000001A7 58                      		pop rax
   379 000001A8 8EC0                    		mov es,eax
   380 000001AA 58                      		pop rax
   381 000001AB 48                      		db 0x48
   382 000001AC CF                      		iret
   383                                  
   384                                  asm_inthandler0c:
   385 000001AD 50                      		push rax
   386 000001AE 8CC0                    		mov eax,es
   387 000001B0 50                      		push rax
   388 000001B1 8CD8                    		mov eax,ds
   389 000001B3 50                      		push rax
   390                                  		
   391 000001B4 50                      		push rax
   392 000001B5 51                      		push rcx
   393 000001B6 52                      		push rdx
   394 000001B7 53                      		push rbx
   395 000001B8 56                      		push rsi
   396 000001B9 57                      		push rdi
   397 000001BA 55                      		push rbp
   398 000001BB 4150                    		push r8
   399 000001BD 4151                    		push r9
   400 000001BF 4152                    		push r10
   401 000001C1 4153                    		push r11
   402 000001C3 4154                    		push r12
   403 000001C5 4155                    		push r13
   404 000001C7 4156                    		push r14
   405 000001C9 4157                    		push r15
   406                                  		
   407 000001CB 4889E1                  		mov		rcx,rsp
   408 000001CE 668CD0                  		mov		ax,ss
   409 000001D1 8ED8                    		mov		ds,ax
   410 000001D3 8EC0                    		mov		es,ax
   411 000001D5 E8(00000000)            		call	inthandler0c
   412 000001DA 83F800                  		cmp		eax,0
   413 000001DD 0F856B010000            		jne		asm_end_app
   414 000001E3 415F                    		pop r15
   415 000001E5 415E                    		pop r14
   416 000001E7 415D                    		pop r13
   417 000001E9 415C                    		pop r12
   418 000001EB 415B                    		pop r11
   419 000001ED 415A                    		pop r10
   420 000001EF 4159                    		pop r9
   421 000001F1 4158                    		pop r8
   422 000001F3 5D                      		pop rbp
   423 000001F4 5F                      		pop rdi
   424 000001F5 5E                      		pop rsi
   425 000001F6 5B                      		pop rbx
   426 000001F7 5A                      		pop rdx
   427 000001F8 59                      		pop rcx
   428 000001F9 58                      		pop rax
   429                                  		
   430 000001FA 58                      		pop rax
   431 000001FB 8ED8                    		mov ds,eax
   432 000001FD 58                      		pop rax
   433 000001FE 8EC0                    		mov es,eax
   434 00000200 58                      		pop rax
   435 00000201 83C404                  		add		esp,4			; int 0x0c でも、これが忁e��e
   436 00000204 48                      		db 0x48
   437 00000205 CF                      		iret
   438                                  
   439                                  asm_inthandler0d:
   440 00000206 50                      		push rax
   441 00000207 8CC0                    		mov eax,es
   442 00000209 50                      		push rax
   443 0000020A 8CD8                    		mov eax,ds
   444 0000020C 50                      		push rax
   445                                  		
   446 0000020D 50                      		push rax
   447 0000020E 51                      		push rcx
   448 0000020F 52                      		push rdx
   449 00000210 53                      		push rbx
   450 00000211 56                      		push rsi
   451 00000212 57                      		push rdi
   452 00000213 55                      		push rbp
   453 00000214 4150                    		push r8
   454 00000216 4151                    		push r9
   455 00000218 4152                    		push r10
   456 0000021A 4153                    		push r11
   457 0000021C 4154                    		push r12
   458 0000021E 4155                    		push r13
   459 00000220 4156                    		push r14
   460 00000222 4157                    		push r15
   461                                  		
   462 00000224 4889E1                  		mov		rcx,rsp
   463 00000227 668CD0                  		mov		ax,ss
   464 0000022A 8ED8                    		mov		ds,ax
   465 0000022C 8EC0                    		mov		es,ax
   466 0000022E E8(00000000)            		call	inthandler0d
   467 00000233 83F800                  		cmp		eax,0			; ここだけ違ぁe
   468 00000236 0F8512010000            		jne		asm_end_app	; ここだけ違ぁe
   469 0000023C 415F                    		pop r15
   470 0000023E 415E                    		pop r14
   471 00000240 415D                    		pop r13
   472 00000242 415C                    		pop r12
   473 00000244 415B                    		pop r11
   474 00000246 415A                    		pop r10
   475 00000248 4159                    		pop r9
   476 0000024A 4158                    		pop r8
   477 0000024C 5D                      		pop rbp
   478 0000024D 5F                      		pop rdi
   479 0000024E 5E                      		pop rsi
   480 0000024F 5B                      		pop rbx
   481 00000250 5A                      		pop rdx
   482 00000251 59                      		pop rcx
   483 00000252 58                      		pop rax
   484                                  		
   485 00000253 58                      		pop rax
   486 00000254 8ED8                    		mov ds,eax
   487 00000256 58                      		pop rax
   488 00000257 8EC0                    		mov es,eax
   489 00000259 58                      		pop rax
   490 0000025A 83C404                  		add		esp,4			; int 0x0d では、これが忁e��e
   491 0000025D 48                      		db 0x48
   492 0000025E CF                      		iret
   493                                  
   494                                  asm_inthandler0e:
   495 0000025F FB                      		sti
   496 00000260 50                      		push rax
   497 00000261 8CC0                    		mov eax,es
   498 00000263 50                      		push rax
   499 00000264 8CD8                    		mov eax,ds
   500 00000266 50                      		push rax
   501                                  		
   502 00000267 50                      		push rax
   503 00000268 51                      		push rcx
   504 00000269 52                      		push rdx
   505 0000026A 53                      		push rbx
   506 0000026B 56                      		push rsi
   507 0000026C 57                      		push rdi
   508 0000026D 55                      		push rbp
   509 0000026E 4150                    		push r8
   510 00000270 4151                    		push r9
   511 00000272 4152                    		push r10
   512 00000274 4153                    		push r11
   513 00000276 4154                    		push r12
   514 00000278 4155                    		push r13
   515 0000027A 4156                    		push r14
   516 0000027C 4157                    		push r15
   517                                  		
   518 0000027E 4889E1                  		mov		rcx,rsp
   519 00000281 668CD0                  		mov		ax,ss
   520 00000284 8ED8                    		mov		ds,ax
   521 00000286 8EC0                    		mov		es,ax
   522 00000288 0F20D2                  		mov 	rdx,cr2 ;保存现场
   523 0000028B 50                      		push 	rax
   524 0000028C E8(00000000)            		call	inthandler0e
   525 00000291 83F800                  		cmp		eax,0
   526 00000294 0F85B4000000            		jne		asm_end_app
   527 0000029A 415F                    		pop r15
   528 0000029C 415E                    		pop r14
   529 0000029E 415D                    		pop r13
   530 000002A0 415C                    		pop r12
   531 000002A2 415B                    		pop r11
   532 000002A4 415A                    		pop r10
   533 000002A6 4159                    		pop r9
   534 000002A8 4158                    		pop r8
   535 000002AA 5D                      		pop rbp
   536 000002AB 5F                      		pop rdi
   537 000002AC 5E                      		pop rsi
   538 000002AD 5B                      		pop rbx
   539 000002AE 5A                      		pop rdx
   540 000002AF 59                      		pop rcx
   541 000002B0 58                      		pop rax
   542                                  		
   543 000002B1 58                      		pop rax
   544 000002B2 8ED8                    		mov ds,eax
   545 000002B4 58                      		pop rax
   546 000002B5 8EC0                    		mov es,eax
   547 000002B7 58                      		pop rax
   548 000002B8 83C404                  		add		esp,4
   549 000002BB 48                      		db 0x48
   550 000002BC CF                      		iret
   551                                  memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   552 000002BD 57                      		push	rdi						; �e�ebx, esi, edi も使ぁe��ぁe�eで�e�e
   553 000002BE 56                      		push	rsi
   554 000002BF 53                      		push	rbx
   555 000002C0 BE55AA55AA              		mov		esi,0xaa55aa55			; pat0 = 0xaa55aa55;
   556 000002C5 BFAA55AA55              		mov		edi,0x55aa55aa			; pat1 = 0x55aa55aa;
   557 000002CA 8B442410                		mov		eax,[rsp+12+4]			; i = start;
   558                                  mts_loop:
   559 000002CE 89C3                    		mov		ebx,eax
   560 000002D0 81C3FC0F0000            		add		ebx,0xffc				; p = i + 0xffc;
   561 000002D6 678B13                  		mov		edx,[ebx]				; old = *p;
   562 000002D9 678933                  		mov		[ebx],esi				; *p = pat0;
   563 000002DC 678333FF                		xor		dword [ebx],0xffffffff	; *p ^= 0xffffffff;
   564 000002E0 673B3B                  		cmp		edi,[ebx]				; if (*p != pat1) goto fin;
   565 000002E3 751B                    		jne		mts_fin
   566 000002E5 678333FF                		xor		dword [ebx],0xffffffff	; *p ^= 0xffffffff;
   567 000002E9 673B33                  		cmp		esi,[ebx]				; if (*p != pat0) goto fin;
   568 000002EC 7512                    		jne		mts_fin
   569 000002EE 678913                  		mov		[ebx],edx				; *p = old;
   570 000002F1 0500100000              		add		eax,0x1000				; i += 0x1000;
   571 000002F6 3B442414                		cmp		eax,[rsp+12+8]			; if (i <= end) goto mts_loop;
   572 000002FA 76D2                    		jbe		mts_loop
   573 000002FC 5B                      		pop		rbx
   574 000002FD 5E                      		pop		rsi
   575 000002FE 5F                      		pop		rdi
   576 000002FF C3                      		ret
   577                                  mts_fin:
   578 00000300 678913                  		mov		[ebx],edx				; *p = old;
   579 00000303 5B                      		pop		rbx
   580 00000304 5E                      		pop		rsi
   581 00000305 5F                      		pop		rdi
   582 00000306 C3                      		ret
   583                                  
   584                                  farjmp:		; void farjmp(int eip, int cs);
   585 00000307 48FF6C2408              		jmp		far	[rsp+ip_size]				; eip, cs
   586 0000030C C3                      		ret
   587                                  
   588                                  farcall:		; void farcall(int eip, int cs);
   589 0000030D 48FF5C2408              		call	far	[rsp+ip_size]				; eip, cs
   590 00000312 C3                      		ret
   591                                  
   592                                  asm_hrb_api:
   593 00000313 FB                      		sti
   594 00000314 8CC0                    		mov eax,es
   595 00000316 50                      		push rax
   596 00000317 8CD8                    		mov eax,ds
   597 00000319 50                      		push rax
   598                                  		
   599                                  
   600 0000031A 50                      		push rax
   601 0000031B 51                      		push rcx
   602 0000031C 52                      		push rdx
   603 0000031D 53                      		push rbx
   604 0000031E 56                      		push rsi
   605 0000031F 57                      		push rdi
   606 00000320 55                      		push rbp
   607 00000321 54                      		push rsp; 保存�eためのpush
   608                                  		
   609                                  
   610 00000322 50                      		push rax
   611 00000323 51                      		push rcx
   612 00000324 52                      		push rdx
   613 00000325 53                      		push rbx
   614 00000326 56                      		push rsi
   615 00000327 57                      		push rdi
   616 00000328 55                      		push rbp
   617 00000329 54                      		push rsp; hrb_apiにわたすため�epush
   618 0000032A 668CD0                  		mov		ax,ss
   619 0000032D 8ED8                    		mov		ds,ax		; os用のセグメントをdsとesにも�eれる
   620 0000032F 8EC0                    		mov		es,ax
   621 00000331 E8(00000000)            		call	hrb_api
   622 00000336 83F800                  		cmp		eax,0		; eaxぁeでなければアプリ終亁e�e琁e
   623 00000339 7513                    		jne		asm_end_app
   624 0000033B 83C420                  		add		esp,32
   625                                  		
   626 0000033E 5C                      		pop rsp
   627 0000033F 5D                      		pop rbp
   628 00000340 5F                      		pop rdi
   629 00000341 5E                      		pop rsi
   630 00000342 5B                      		pop rbx
   631 00000343 5A                      		pop rdx
   632 00000344 59                      		pop rcx
   633 00000345 58                      		pop rax
   634                                  		
   635 00000346 58                      		pop rax
   636 00000347 8ED8                    		mov ds,eax
   637 00000349 58                      		pop rax
   638 0000034A 8EC0                    		mov es,eax
   639 0000034C 48                      		db 0x48
   640 0000034D CF                      		iret
   641                                  asm_end_app:
   642                                  ;	eaxはtss.esp0の番地
   643 0000034E 488B20                  		mov		rsp,[rax]
   644 00000351 67C7400400000000        		mov		dword [eax+4],0
   645 00000359 5C                      		pop rsp
   646 0000035A 5D                      		pop rbp
   647 0000035B 5F                      		pop rdi
   648 0000035C 5E                      		pop rsi
   649 0000035D 5B                      		pop rbx
   650 0000035E 5A                      		pop rdx
   651 0000035F 59                      		pop rcx
   652 00000360 58                      		pop rax
   653 00000361 C3                      		ret					; cmd_appへ帰めe
   654                                  
   655                                  start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   656 00000362 50                      		push rax
   657 00000363 51                      		push rcx
   658 00000364 52                      		push rdx
   659 00000365 53                      		push rbx
   660 00000366 56                      		push rsi
   661 00000367 57                      		push rdi
   662 00000368 55                      		push rbp
   663 00000369 54                      		push rsp		; 32ビットレジスタを�e部保存しておく
   664                                  		
   665 0000036A 488B6C2448              		mov		rbp,[rsp+ip_size+gpr_size*8]	; tss.esp0の番地
   666 0000036F 48896500                		mov		[rbp  ],rsp		; os用のespを保孁e
   667 00000373 8C5504                  		mov		[rbp+4],ss		; os用のssを保孁e
   668 00000376 8EC3                    		mov		es,bx
   669 00000378 8EDB                    		mov		ds,bx
   670 0000037A 8EE3                    		mov		fs,bx
   671 0000037C 8EEB                    		mov		gs,bx
   672                                  		;db 0x0f,0x35;sys_ret
   673                                  ;	以下�eretfでアプリに行かせるためのスタチe��調整
   674 0000037E 83C803                  		or		eax,3			; アプリ用のセグメント番号に3をorする
   675 00000381 83CB03                  		or		ebx,3			; アプリ用のセグメント番号に3をorする
   676 00000384 4151                    		push	r9				; アプリのss
   677 00000386 4150                    		push	r8				; アプリのesp
   678 00000388 52                      		push	rdx				; アプリのcs
   679 00000389 51                      		push	rcx				; アプリのeip
   680 0000038A CB                      		retf
   681                                  ;	アプリが終亁e��てもここには来なぁe
   682                                  strcmp:	;int strcmp(char* s,char* t,int longer);
   683 0000038B 4889CE                  	mov rsi,rcx
   684 0000038E 4889D7                  	mov rdi,rdx
   685 00000391 4C89C1                  	mov rcx,r8
   686 00000394 F2A7                    	repne cmpsd
   687 00000396 89C8                    	mov eax,ecx
   688 00000398 C3                      	ret
   689                                  strcpy:	;void strcpy(char* s,char* t,int longer);
   690 00000399 4889CE                  	mov rsi,rcx
   691 0000039C 4889D7                  	mov rdi,rdx
   692 0000039F 4C89C1                  	mov rcx,r8
   693                                  	;db 0xf3,0xa5;rep movsb
   694 000003A2 F3A4                    	rep movsb
   695 000003A4 C3                      	ret
   696                                  memset:	;void memset(char* s,int num,int longer)
   697 000003A5 57                      	push rdi
   698 000003A6 50                      	push rax
   699 000003A7 51                      	push rcx
   700 000003A8 488B7C2408              	mov rdi,[rsp+ip_size]
   701 000003AD 488B442410              	mov rax,[rsp+ip_size+gpr_size]
   702 000003B2 488B4C2418              	mov rcx,[rsp+ip_size+gpr_size*2]
   703 000003B7 F3AA                    	rep stosb
   704 000003B9 59                      	pop rcx
   705 000003BA 58                      	pop rax
   706 000003BB 5F                      	pop rdi
   707 000003BC C3                      	ret
   708                                  support_apic: ;int support_apic(void):
   709 000003BD 52                      	push rdx
   710 000003BE B801000000              	mov eax,1
   711                                  	;db 0x0f,0xa2 ;cpuid 
   712 000003C3 0FA2                    	cpuid
   713 000003C5 0FBAE209                	bt edx,9
   714 000003C9 0F92C0                  	setc al
   715 000003CC 0FB6C0                  	movzx eax,al
   716 000003CF 5A                      	pop rdx
   717 000003D0 C3                      	ret
   718                                  io_rdmsr: ;void io_rdmsr(int* edx,int* eax,int ecx)
   719                                  	;db 0x0f,0x32 ;rdmsr
   720 000003D1 0F32                    	rdmsr
   721 000003D3 498900                  	mov [r8],rax
   722 000003D6 488912                  	mov [rdx],rdx
   723 000003D9 C3                      	ret
   724                                  io_wrmsr: ;void io_wrmsr(int edx,int eax,int ecx)
   725                                  	;db 0x0f,0x30 ;wrmsr
   726 000003DA 4C89C0                  	mov rax,r8
   727 000003DD 0F30                    	wrmsr
   728 000003DF C3                      	ret
   729                                  test2: ;void test(int eax,int ebx)
   730 000003E0 50                      	push rax
   731 000003E1 53                      	push rbx
   732 000003E2 8B442418                	mov eax,[rsp+ip_size+gpr_size*2]
   733 000003E6 8B5C2420                	mov ebx,[rsp+ip_size+gpr_size*3]
   734 000003EA 0F0B                    	db 0x0f,0x0b ;ud2
   735                                  .fin:
   736 000003EC FA                      	cli
   737 000003ED F4                      	hlt
   738 000003EE EBFC                    	jmp .fin
   739 000003F0 5B                      	pop rbx
   740 000003F1 58                      	pop rax
   741 000003F2 C3                      	ret
   742                                  get_lock: ;int get_lock(int* lock,int bit)
   743 000003F3 F00FAB11                	lock bts dword [rcx],edx
   744 000003F7 4831C0                  	xor rax,rax
   745 000003FA 11C0                    	adc eax,eax
   746 000003FC C3                      	ret
   747                                  store_gdt: ;void store_gdt(void* addr)
   748 000003FD 0F0101                  	sgdt [rcx]
   749 00000400 C3                      	ret
   750                                  store_idt: ;void store_gdt(void* addr)
   751 00000401 0F0109                  	sidt [rcx]
   752 00000404 C3                      	ret
   753                                  sys_reboot: ;void sys_reboot(void)
   754 00000405 FA                      	cli
   755 00000406 0F20C0                  	mov rax,cr0
   756 00000409 66BA6400                	mov dx,0x64
   757 0000040D 66B8FE00                	mov ax,0xfe
   758 00000411 66EF                    	out dx,ax
   759                                  .fin:
   760 00000413 F4                      	hlt
   761 00000414 EBFD                    	jmp .fin
   762                                  sys_call:
   763 00000416 0F35                    	db 0x0f,0x35 ;sysexit
   764                                  test3:
   765 00000418 F4                      	db 0xf4
   766                                  .fin:
   767 00000419 EBFE                    	jmp .fin
   768                                  support_rand: ;int support_rand()
   769 0000041B 31C0                    	xor eax,eax
   770 0000041D FFC0                    	inc eax
   771 0000041F C3                      	ret
   772                                  	
   773 00000420 53                      	push rbx
   774 00000421 51                      	push rcx
   775 00000422 52                      	push rdx
   776 00000423 B801000000              	mov eax,1
   777 00000428 0FA2                    	db 0x0f,0xa2 ;cpuid
   778 0000042A 81E100000040            	and ecx,0x40000000
   779 00000430 0F92C0                  	db 0x0f,0x92,0xc0;setc al
   780 00000433 5A                      	pop rdx
   781 00000434 59                      	pop rcx
   782 00000435 5B                      	pop rbx
   783 00000436 C3                      	ret
   784                                  rdrand: ;int rdrand()
   785 00000437 0FC7F0                  	db 0x0f,0xc7,0xf0 ;rdrand eax
   786                                  	;rdrand
   787 0000043A C3                      	ret
   788                                  _invlpg:
   789 0000043B C3                      	ret
   790                                  tpm_init:
   791                                  	;初始化tpm
   792 0000043C 50                      	push rax
   793 0000043D B800F00600                  mov eax, 0x6f000
   794 00000442 8904250000D4FE              mov dword [tpm_command], eax
   795          ******************       warning: dword data exceeds bounds
   796 00000449 E802000000                  call tpm_wait_for_status
   797 0000044E 58                      	pop rax
   798 0000044F C3                      	ret
   799                                  tpm_get_a_key:
   800                                  	
   801                                  tpm_wait_for_status:
   802                                          ;等待tpm状态就绪
   803 00000450 8B04251400D4FE                  mov eax, dword [tpm_status]
   804          ******************       warning: dword data exceeds bounds
   805 00000457 2500008001                      and eax, 0x01800000
   806 0000045C 3D00008000                      cmp eax, 0x00800000
   807 00000461 75ED                            jne tpm_wait_for_status
   808 00000463 C3                      		ret
   809                                  sys_nop:
   810 00000464 90                      	nop
   811 00000465 C3                      	ret
   812                                  ;unsigned int asm_sse_strcmp(char* str,char* str,unsigned,int longer)
   813                                  asm_sse_strcmp:
   814 00000466 55                      	push rbp
   815 00000467 4889E5                  	mov rbp,rsp
   816                                  	
   817 0000046A 4889C8                  	mov rax,rcx
   818                                  	;mov edx,rdx
   819 0000046D 4C89C1                  	mov rcx,r8
   820 00000470 53                      	push rbx
   821 00000471 56                      	push rsi
   822 00000472 57                      	push rdi
   823 00000473 4889C6                  	mov rsi,rax
   824 00000476 4889D7                  	mov rdi,rdx
   825 00000479 4889CA                  	mov rdx,rcx
   826                                  	;清零计数器
   827 0000047C 4831DB                  	xor rbx,rbx 
   828 0000047F 0F06                    	clts
   829 00000481 660FEFD2                	pxor xmm2,xmm2
   830                                  .lp:
   831 00000485 0F06                    	clts
   832                                  	;将字符串剩余长度读入
   833                                  	;lea eax,[edx-ebx]
   834 00000487 4889D0                  	mov rax,rdx
   835 0000048A 4829D8                  	sub rax,rbx
   836 0000048D 4889C1                  	mov rcx,rax
   837 00000490 F30F6F041E              	movdqu xmm0, [rsi+rbx]
   838 00000495 F30F6F0C1F              	movdqu xmm1, [rdi+rbx]
   839 0000049A 660F3A61C118            	pcmpestri xmm0,xmm1,0x18
   840                                  	;不是16证明有不一样的部分
   841 000004A0 4883F910                	cmp rcx,16
   842 000004A4 752E                    	jne .fin
   843                                  	
   844                                  	;检查两个字符串中是否有0 如果有 证明其中一个字符串已经结束
   845 000004A6 4889CB                  	mov rbx,rcx
   846 000004A9 660F3A63C204            	pcmpistri xmm0,xmm2,0x04
   847                                  	;如果不是16 证明有一个字符是空字符 字符串结束
   848 000004AF 4883F910                	cmp rcx,16
   849 000004B3 7517                    	jne .fin2
   850                                  	
   851 000004B5 660F3A63CA04            	pcmpistri xmm1,xmm2,0x04
   852                                  	;如果不是16 证明有一个字符是空字符 字符串结束
   853 000004BB 4883F910                	cmp rcx,16
   854 000004BF 750B                    	jne .fin2
   855                                  	
   856 000004C1 4883C310                	add rbx,16
   857                                  	;最后 比较是否达到了界限值
   858 000004C5 4839DA                  	cmp rdx,rbx
   859 000004C8 7602                    	jbe .fin2
   860                                  	
   861 000004CA EBB9                    	jmp .lp
   862                                  .fin2:
   863                                  	;没有异常
   864 000004CC 4831C0                  	xor rax,rax
   865 000004CF 5F                      	pop rdi
   866 000004D0 5E                      	pop rsi
   867 000004D1 5B                      	pop rbx
   868 000004D2 5D                      	pop rbp
   869 000004D3 C3                      	ret
   870                                  .fin:
   871 000004D4 488D040B                	lea rax,[rbx+rcx]
   872 000004D8 48FFC0                  	inc rax
   873                                  	
   874 000004DB 660F3A63C118            	pcmpistri xmm0,xmm1,0x18
   875                                  	;最后判断一次是不是遇到了字符串结尾
   876 000004E1 4883F910                	cmp rcx,16
   877 000004E5 74E5                    	je .fin2
   878                                  	
   879 000004E7 5F                      	pop rdi
   880 000004E8 5E                      	pop rsi
   881 000004E9 5B                      	pop rbx
   882 000004EA 5D                      	pop rbp
   883 000004EB C3                      	ret
   884                                  ;asm_sse_strtest(char* str,char test[16])
   885                                  _asm_sse_strtest:
   886 000004EC 55                      	push rbp
   887 000004ED 4889E5                  	mov rbp,rsp
   888 000004F0 4889C8                  	mov rax,rcx
   889                                  	;mov rdx,[rbp+gpr_size*3]
   890 000004F3 53                      	push rbx
   891 000004F4 56                      	push rsi
   892 000004F5 57                      	push rdi
   893 000004F6 67F30F6F0A              	movdqu xmm1,[edx]
   894                                  	;清零计数器
   895 000004FB 4831C0                  	xor rax,rax 
   896 000004FE 0F06                    	clts
   897 00000500 660FEFD2                	pxor xmm2,xmm2
   898                                  .lp:
   899 00000504 0F06                    	clts
   900 00000506 67F30F6F0406            	movdqu xmm0, [esi+eax]
   901 0000050C 660F3A63C114            	pcmpistri xmm0,xmm1,0x14
   902 00000512 4883F910                	cmp rcx,16
   903                                  	;0
   904 00000516 7518                    	jne .fin
   905                                  	
   906 00000518 4889CB                  	mov rbx,rcx
   907 0000051B 660F3A63C204            	pcmpistri xmm0,xmm2,0x04
   908                                  	;如果是16 证明没有任何一个字符是空字符 字符串没有结束
   909 00000521 4883F910                	cmp rcx,16
   910 00000525 7506                    	jne .fin2
   911                                  	
   912 00000527 4883C010                	add rax,16
   913 0000052B EBD7                    	jmp .lp
   914                                  .fin2:
   915 0000052D 4889D8                  	mov rax,rbx
   916                                  .fin:
   917 00000530 4801C8                  	add rax,rcx
   918 00000533 5F                      	pop rdi
   919 00000534 5E                      	pop rsi
   920 00000535 5B                      	pop rbx
   921 00000536 5D                      	pop rbp
   922 00000537 C3                      	ret
   923                                  ;asm_task_switch32(unsigned int *old_esp,unsigned int *new_esp)
   924                                  asm_task_switch32:
   925 00000538 55                      	push rbp
   926                                  	;mov ecx,[rbp+8]
   927                                  	;mov edx,[rbp+12]
   928 00000539 E802000000              	call .start
   929                                  	;恢复环境的代码
   930 0000053E 5D                      	pop rbp
   931 0000053F C3                      	ret
   932                                  .start:
   933                                  	;保存环境的代码
   934 00000540 53                      	push rbx
   935 00000541 56                      	push rsi
   936 00000542 57                      	push rdi
   937 00000543 55                      	push rbp
   938                                  	;cr3
   939 00000544 0F20D8                  	mov rax,cr3
   940 00000547 50                      	push rax
   941 00000548 4831C0                  	xor rax,rax
   942                                  	;flags
   943 0000054B 9C                      	pushfq
   944                                  	;tr
   945 0000054C 50                      	push rax
   946 0000054D 0F000C24                	str [rsp]
   947                                  	;ldtr
   948 00000551 50                      	push rax
   949 00000552 0F000424                	sldt [rsp]
   950                                  	;64位被调用者寄存器
   951 00000556 4154                    	push r12
   952 00000558 4155                    	push r13
   953 0000055A 4156                    	push r14
   954 0000055C 4157                    	push r15
   955 0000055E 488921                  	mov [rcx],rsp
   956                                  	;加载环境的代码
   957 00000561 488B22                  	mov rsp,[rdx]
   958 00000564 415F                    	pop r15
   959 00000566 415E                    	pop r14
   960 00000568 415D                    	pop r13
   961 0000056A 415C                    	pop r12
   962                                  	;ldtr
   963 0000056C 0F001424                	lldt [rsp]
   964 00000570 58                      	pop rax
   965                                  	;tr
   966                                  	;ltr [esp]
   967 00000571 58                      	pop rax
   968                                  	;flags
   969 00000572 9D                      	popfq
   970                                  	;cr3
   971 00000573 58                      	pop rax
   972 00000574 0F22D8                  	mov cr3,rax
   973 00000577 5D                      	pop rbp
   974 00000578 5F                      	pop rdi
   975 00000579 5E                      	pop rsi
   976 0000057A 5B                      	pop rbx
   977 0000057B C3                      	ret
   978                                  bits 32
   979                                  ;asm_task_switch32_2(unsigned int *old_esp,tss32 *new_esp)
   980                                  asm_task_switch32_2:
   981 0000057C 55                      	push ebp
   982 0000057D 89E5                    	mov ebp,esp
   983 0000057F 8B4D08                  	mov ecx,[ebp+8]
   984 00000582 8B550C                  	mov edx,[ebp+12]
   985 00000585 E802000000              	call .start
   986                                  	;恢复环境的代码
   987 0000058A 5D                      	pop ebp
   988 0000058B C3                      	ret
   989                                  .start:
   990                                  	;保存环境的代码
   991 0000058C 53                      	push ebx
   992 0000058D 56                      	push esi
   993 0000058E 57                      	push edi
   994 0000058F 55                      	push ebp
   995 00000590 0F20D8                  	mov eax,cr3
   996 00000593 50                      	push eax
   997 00000594 9C                      	pushfd
   998 00000595 50                      	push eax
   999 00000596 8921                    	mov [ecx],esp
  1000                                  	;加载环境的代码
  1001 00000598 8B02                    	mov eax,[edx]
  1002 0000059A 8B503C                  	mov edx,[eax+15*4]
  1003 0000059D 89D5                    	mov ebp,edx
  1004 0000059F 8B5040                  	mov edx,[eax+16*4]
  1005 000005A2 89D6                    	mov esi,edx
  1006 000005A4 8B5044                  	mov edx,[eax+17*4]
  1007 000005A7 89D7                    	mov edi,edx
  1008 000005A9 8B5048                  	mov edx,[eax+18*4]
  1009 000005AC 8EC2                    	mov es,edx
  1010 000005AE 8B5058                  	mov edx,[eax+22*4]
  1011 000005B1 8EE2                    	mov fs,edx
  1012 000005B3 8B505C                  	mov edx,[eax+23*4]
  1013 000005B6 8EEA                    	mov gs,edx
  1014 000005B8 89C4                    	mov esp,eax
  1015 000005BA 61                      	popad
  1016 000005BB CB                      	retf
  1017 000005BC C3                      	ret
  1018                                  bits 64
  1019                                  ;void asm_vmptrld(unsigned int vmcs_point)
  1020                                  global asm_vmptrld
  1021                                  asm_vmptrld:
  1022 000005BD 0FC731                  	vmptrld [rcx]
  1023 000005C0 C3                      	ret
  1024                                  ;void asm_vmptrst(unsigned int* vmcs_point)
  1025                                  global asm_vmptrst
  1026                                  asm_vmptrst:
  1027 000005C1 0FC739                  	vmptrst [rcx]
  1028 000005C4 C3                      	ret
  1029                                  ;void asm_vmclear(unsigned int vmcs_point)
  1030                                  global asm_vmclear
  1031                                  asm_vmclear:
  1032 000005C5 660FC731                	vmclear [rcx]
  1033 000005C9 C3                      	ret
  1034                                  ;unsigned long long asm_vmread(unsigned int index)
  1035                                  global asm_vmread
  1036                                  asm_vmread:
  1037 000005CA 0F78C8                  	vmread rax,rcx
  1038 000005CD C3                      	ret
  1039                                  ;void asm_vmread(unsigned int index,void data)
  1040                                  global asm_vmwrite
  1041                                  asm_vmwrite:
  1042 000005CE 0F79CA                  	vmwrite rcx,rdx
  1043 000005D1 C3                      	ret
  1044                                  global asm_vmxon
  1045                                  asm_vmxon:
  1046 000005D2 F30FC731                	vmxon [rcx]
  1047                                  asm_x64_cs_init:
  1048 000005D6 48                      	db 0x48
  1049 000005D7 CB                      	retf
  1050                                  asm_get_cs:
  1051 000005D8 8CC8                    	mov rax,cs
  1052 000005DA C3                      	ret
  1053                                  ;void asm_sheet_refreshsub32(void* struct SHEET_REFRESH_PACK_32 pack);
  1054                                  asm_sheet_refreshsub32:
  1055 000005DB 53                      	push rbx
  1056 000005DC 56                      	push rsi
  1057 000005DD 57                      	push rdi
  1058 000005DE 4154                    	push r12
  1059 000005E0 4155                    	push r13
  1060 000005E2 4156                    	push r14
  1061 000005E4 4157                    	push r15
  1062 000005E6 488B31                  	mov rsi,[rcx];源变址
  1063 000005E9 488B7908                	mov rdi,[rcx+8];目的变址
  1064 000005ED 4C8B4110                	mov r8,[rcx+16];源图层宽度
  1065 000005F1 4C8B4918                	mov r9,[rcx+24];目的图层宽度
  1066 000005F5 4C8B5120                	mov r10,[rcx+32];刷新窗口宽度
  1067 000005F9 4C8B5928                	mov r11,[rcx+40];刷新窗口高度
  1068 000005FD 4C8B6130                	mov r12,[rcx+48];sid_addr
  1069 00000601 4C8B6938                	mov r13,[rcx+56];sid
  1070 00000605 4489693C                	mov [rcx+56+4],r13d;低端32位sid数据复制到高32位
  1071 00000609 4C8B6938                	mov r13,[rcx+56];sid
  1072 0000060D 4C896940                	mov [rcx+64],r13;sid
  1073 00000611 F30F6F6138              	movdqu xmm4,[rcx+56]
  1074 00000616 4831C0                  	xor rax,rax
  1075 00000619 4831D2                  	xor rdx,rdx
  1076                                  	
  1077                                  .start:	
  1078 0000061C F30F6F0C86              	movdqu xmm1,[rsi+rax*4]
  1079 00000621 F30F6F1487              	movdqu xmm2,[rdi+rax*4]
  1080 00000626 F3410F6F1C84            	movdqu xmm3,[r12+rax*4];sid序列
  1081 0000062C 0FC2DC00                	cmpps xmm3,xmm4,0
  1082 00000630 660FDBCB                	pand xmm1,xmm3;清空无效数据
  1083 00000634 660FDFDA                	pandn xmm3,xmm2;清空无效数据
  1084 00000638 660FEBCB                	por xmm1,xmm3;混合
  1085 0000063C F30F7F0C87              	movdqu [rdi+rax*4],xmm1
  1086 00000641 83C004                  	add eax,4
  1087 00000644 4C39D0                  	cmp rax,r10
  1088 00000647 72D3                    	jb .start
  1089 00000649 7420                    	je .fin;正好相等
  1090 0000064B 83E804                  	sub eax,4
  1091                                  .continued:
  1092                                  	;这里说明本行剩下的不足4个像素
  1093 0000064E 8B1C86                  	mov ebx,[rsi+rax*4]
  1094 00000651 448B3487                	mov r14d,[rdi+rax*4]
  1095 00000655 458B3C84                	mov r15d,[r12+rax*4]
  1096 00000659 4539EF                  	cmp r15d,r13d
  1097 0000065C 490F45DE                	cmovne rbx,r14
  1098 00000660 891C87                  	mov [rdi+rax*4],ebx
  1099 00000663 48FFC0                  	inc rax
  1100 00000666 4C39D0                  	cmp rax,r10
  1101 00000669 75E3                    	jne .continued
  1102                                  .fin:
  1103 0000066B 31C0                    	xor eax,eax
  1104 0000066D 48FFC2                  	inc rdx
  1105 00000670 4A8D3486                	lea rsi,[rsi+r8*4]
  1106 00000674 4A8D3C8F                	lea rdi,[rdi+r9*4]
  1107 00000678 4F8D248C                	lea r12,[r12+r9*4]
  1108 0000067C 4C39DA                  	cmp rdx,r11
  1109 0000067F 729B                    	jb .start
  1110 00000681 415F                    	pop r15
  1111 00000683 415E                    	pop r14
  1112 00000685 415D                    	pop r13
  1113 00000687 415C                    	pop r12
  1114 00000689 5F                      	pop rdi
  1115 0000068A 5E                      	pop rsi
  1116 0000068B 5B                      	pop rbx
  1117 0000068C C3                      	ret
  1118                                  
  1119                                  
  1120                                  ;void asm_sheet_refreshsub32a(void* struct SHEET_REFRESH_PACK_32 pack);
  1121                                  asm_sheet_refreshsub32a:
  1122 0000068D 53                      	push rbx
  1123 0000068E 56                      	push rsi
  1124 0000068F 57                      	push rdi
  1125 00000690 4154                    	push r12
  1126 00000692 4155                    	push r13
  1127 00000694 4156                    	push r14
  1128 00000696 4157                    	push r15
  1129 00000698 488B31                  	mov rsi,[rcx];源变址
  1130 0000069B 488B7908                	mov rdi,[rcx+8];目的变址
  1131 0000069F 4C8B4110                	mov r8,[rcx+16];源图层宽度
  1132 000006A3 4C8B4918                	mov r9,[rcx+24];目的图层宽度
  1133 000006A7 4C8B5120                	mov r10,[rcx+32];刷新窗口宽度
  1134 000006AB 4C8B5928                	mov r11,[rcx+40];刷新窗口高度
  1135 000006AF 4C8B6130                	mov r12,[rcx+48];sid_addr
  1136 000006B3 4C8B6938                	mov r13,[rcx+56];sid
  1137 000006B7 660F126138              	movlpd xmm4,[rcx+56]
  1138 000006BC 660F70E400              	pshufd xmm4,xmm4,0;低端32位sid数据复制扩展到整个xmm
  1139 000006C1 4831C0                  	xor rax,rax
  1140 000006C4 4831D2                  	xor rdx,rdx
  1141                                  	
  1142                                  .start:	
  1143 000006C7 660F6F0C86              	movdqa xmm1,[rsi+rax*4]
  1144 000006CC 660F6F1487              	movdqa xmm2,[rdi+rax*4]
  1145 000006D1 66410F6F1C84            	movdqa xmm3,[r12+rax*4];sid序列
  1146 000006D7 0FC2DC00                	cmpps xmm3,xmm4,0
  1147 000006DB 660FDBCB                	pand xmm1,xmm3;清空无效数据
  1148 000006DF 660FDFDA                	pandn xmm3,xmm2;清空无效数据
  1149 000006E3 660FEBCB                	por xmm1,xmm3;混合
  1150 000006E7 660F7F0C87              	movdqa [rdi+rax*4],xmm1
  1151 000006EC 83C004                  	add eax,4
  1152 000006EF 4C39D0                  	cmp rax,r10
  1153 000006F2 72D3                    	jb .start
  1154 000006F4 7420                    	je .fin;正好相等
  1155 000006F6 83E804                  	sub eax,4
  1156                                  .continued:
  1157                                  	;这里说明本行剩下的不足4个像素
  1158 000006F9 8B1C86                  	mov ebx,[rsi+rax*4]
  1159 000006FC 448B3487                	mov r14d,[rdi+rax*4]
  1160 00000700 458B3C84                	mov r15d,[r12+rax*4]
  1161 00000704 4539EF                  	cmp r15d,r13d
  1162 00000707 490F45DE                	cmovne rbx,r14
  1163 0000070B 891C87                  	mov [rdi+rax*4],ebx
  1164 0000070E 48FFC0                  	inc rax
  1165 00000711 4C39D0                  	cmp rax,r10
  1166 00000714 75E3                    	jne .continued
  1167                                  .fin:
  1168 00000716 31C0                    	xor eax,eax
  1169 00000718 48FFC2                  	inc rdx
  1170 0000071B 4A8D3486                	lea rsi,[rsi+r8*4]
  1171 0000071F 4A8D3C8F                	lea rdi,[rdi+r9*4]
  1172 00000723 4F8D248C                	lea r12,[r12+r9*4]
  1173 00000727 4C39DA                  	cmp rdx,r11
  1174 0000072A 729B                    	jb .start
  1175 0000072C 415F                    	pop r15
  1176 0000072E 415E                    	pop r14
  1177 00000730 415D                    	pop r13
  1178 00000732 415C                    	pop r12
  1179 00000734 5F                      	pop rdi
  1180 00000735 5E                      	pop rsi
  1181 00000736 5B                      	pop rbx
  1182 00000737 C3                      	ret
  1183                                  global asm_memcpy
  1184                                  asm_memcpy:
  1185 00000738 4889CF                  	mov rdi,rcx
  1186 0000073B 4889D6                  	mov rsi,rdx
  1187 0000073E 4C89C1                  	mov rcx,r8
  1188 00000741 F3A4                    	rep movsb
  1189 00000743 C3                      	ret
  1190                                  extern console_task
  1191                                  global asm_console_task_start_64
  1192                                  ;这个函数的目的是因为x64架构下无法使用栈传递第一个和第二个参数 但是为了任务切换效率无法切换调用者保存寄存器 因此使用这个函数中转
  1193                                  asm_console_task_start_64:
  1194 00000744 488B4C2408              	mov rcx,[rsp+8]
  1195 00000749 488B542410              	mov rdx,[rsp+16]
  1196 0000074E E9(00000000)            	jmp console_task
